{'CLASSES': {'auth.extensions.rapidsms.contact.AuthenticatedContact': {'bases': ['django.db.models.Model'],
                                                                       'constructor': [],
                                                                       'docstring': '\n    This extension for Contacts allows developers to tie a Contact (and potentially\n    a phone number) to an authenticated django User object.  In order for this to\n    work correctly, it\'s important to add the following line to settings.py:\n    \n    AUTH_PROFILE_MODULE = \'rapidsms.Contact\'\n    \n    When this is set up properly, django will automatically load the appropriate\n    Contact object as the User\'s "profile" (accessible via get_profile()) \n    upon login.\n    \n    See http://docs.djangoproject.com/en/dev/topics/auth/ under the section \n    \'Storing additional information about users\' for more information.\n    ',
                                                                       'methods': [],
                                                                       'properties': ['user',
                                                                                      'user_permissions',
                                                                                      'groups']},
             'auth.tests.TestAuthenticatedContact': {'bases': ['django.test.TestCase'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [('test_get_profile',
                                                                  [],
                                                                  '\n        Test that the get_profile() method works properly and links to\n        Contact\n        ')],
                                                     'properties': []},
             'contact.extensions.rapidsms.contact.DemographicContact': {'bases': ['django.db.models.Model'],
                                                                        'constructor': [],
                                                                        'docstring': "\n    This extension for Contacts allows developers to tie a Contact to\n    the Location object they're reporting from.\n    ",
                                                                        'methods': [],
                                                                        'properties': ['birthdate',
                                                                                       'gender',
                                                                                       'village',
                                                                                       'village_name']},
             'contact.forms.AgeFilterForm': {'bases': ['generic.forms.FilterForm'],
                                             'constructor': [],
                                             'docstring': ' filter contacts by their age ',
                                             'methods': [('filter',
                                                          ['request', 'queryset'],
                                                          '')],
                                             'properties': ['flag', 'age']},
             'contact.forms.AssignGroupForm': {'bases': ['generic.forms.ActionForm'],
                                               'constructor': ['data=None', '**kwargs'],
                                               'docstring': '',
                                               'methods': [('perform',
                                                            ['request', 'results'],
                                                            '')],
                                               'properties': ['action_label', 'request']},
             'contact.forms.DistictFilterForm': {'bases': ['generic.forms.FilterForm'],
                                                 'constructor': [],
                                                 'docstring': ' filter cvs districs on their districts ',
                                                 'methods': [('filter',
                                                              ['request', 'queryset'],
                                                              '')],
                                                 'properties': ['district', 'd']},
             'contact.forms.DistictFilterMessageForm': {'bases': ['generic.forms.FilterForm'],
                                                        'constructor': [],
                                                        'docstring': ' filter cvs districs on their districts ',
                                                        'methods': [('filter',
                                                                     ['request', 'queryset'],
                                                                     '')],
                                                        'properties': ['district', 'd']},
             'contact.forms.FilterGroupsForm': {'bases': ['generic.forms.FilterForm'],
                                                'constructor': ['data=None', '**kwargs'],
                                                'docstring': ' concrete implementation of filter form ',
                                                'methods': [('filter',
                                                             ['request', 'queryset'],
                                                             '')],
                                                'properties': ['request']},
             'contact.forms.FlagMessageForm': {'bases': ['generic.forms.ActionForm'],
                                               'constructor': [],
                                               'docstring': ' flag/unflag messages action form ',
                                               'methods': [('perform',
                                                            ['request', 'results'],
                                                            '')],
                                               'properties': ['flag', 'action_label']},
             'contact.forms.FlaggedForm': {'bases': ['generic.forms.FilterForm'],
                                           'constructor': [],
                                           'docstring': ' filter flagged/unflagged messages form ',
                                           'methods': [('filter', ['request', 'queryset'], '')],
                                           'properties': ['flagged']},
             'contact.forms.FlaggedMessageForm': {'bases': ['django.forms.ModelForm'],
                                                  'constructor': [],
                                                  'docstring': '',
                                                  'methods': [],
                                                  'properties': []},
             'contact.forms.FreeSearchForm': {'bases': ['generic.forms.FilterForm'],
                                              'constructor': [],
                                              'docstring': " concrete implementation of filter form\n        TO DO: add ability to search for multiple search terms separated by 'or'\n    ",
                                              'methods': [('filter',
                                                           ['request', 'queryset'],
                                                           '')],
                                              'properties': ['search']},
             'contact.forms.FreeSearchTextForm': {'bases': ['generic.forms.FilterForm'],
                                                  'constructor': [],
                                                  'docstring': ' concrete implementation of filter form ',
                                                  'methods': [('filter',
                                                               ['request', 'queryset'],
                                                               '')],
                                                  'properties': ['search']},
             'contact.forms.GenderFilterForm': {'bases': ['generic.forms.FilterForm'],
                                                'constructor': [],
                                                'docstring': ' filter contacts by their gender',
                                                'methods': [('filter',
                                                             ['request', 'queryset'],
                                                             '')],
                                                'properties': ['gender']},
             'contact.forms.HandledByForm': {'bases': ['generic.forms.FilterForm'],
                                             'constructor': [],
                                             'docstring': '',
                                             'methods': [('filter',
                                                          ['request', 'queryset'],
                                                          '')],
                                             'properties': ['type']},
             'contact.forms.MassTextForm': {'bases': ['generic.forms.ActionForm'],
                                            'constructor': [],
                                            'docstring': '',
                                            'methods': [('clean_text', [], ''),
                                                        ('perform', ['request', 'results'], '')],
                                            'properties': ['text', 'action_label']},
             'contact.forms.NewContactForm': {'bases': ['django.forms.ModelForm'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [],
                                              'properties': []},
             'contact.forms.ReplyForm': {'bases': ['django.forms.Form'],
                                         'constructor': [],
                                         'docstring': '',
                                         'methods': [('clean', [], '')],
                                         'properties': ['recipient',
                                                        'message',
                                                        'in_response_to']},
             'contact.forms.ReplyTextForm': {'bases': ['generic.forms.ActionForm'],
                                             'constructor': [],
                                             'docstring': '',
                                             'methods': [('perform',
                                                          ['request', 'results'],
                                                          '')],
                                             'properties': ['text', 'action_label']},
             'contact.migrations.0001_initial.Migration': {'bases': ['south.v2.SchemaMigration'],
                                                           'constructor': [],
                                                           'docstring': '',
                                                           'methods': [('forwards',
                                                                        ['orm'],
                                                                        ''),
                                                                       ('backwards',
                                                                        ['orm'],
                                                                        '')],
                                                           'properties': ['models',
                                                                          'complete_apps']},
             'contact.models.Flag': {'bases': ['django.db.models.Model'],
                                     'constructor': [],
                                     'docstring': '\n    a Message flag\n    ',
                                     'methods': [('get_messages', [], ''),
                                                 ('__unicode__', [], '')],
                                     'properties': ['name']},
             'contact.models.MassText': {'bases': ['django.db.models.Model'],
                                         'constructor': [],
                                         'docstring': '',
                                         'methods': [],
                                         'properties': ['sites',
                                                        'contacts',
                                                        'user',
                                                        'date',
                                                        'text',
                                                        'objects',
                                                        'on_site',
                                                        'bulk']},
             'contact.models.MessageFlag': {'bases': ['django.db.models.Model'],
                                            'constructor': [],
                                            'docstring': ' relation between flag and message\n    ',
                                            'methods': [],
                                            'properties': ['message', 'flag']},
             'eav.admin.AttributeAdmin': {'bases': ['django.contrib.admin.options.ModelAdmin'],
                                          'constructor': [],
                                          'docstring': '',
                                          'methods': [],
                                          'properties': ['list_display',
                                                         'list_filter',
                                                         'prepopulated_fields']},
             'eav.admin.BaseEntityAdmin': {'bases': ['django.contrib.admin.options.ModelAdmin'],
                                           'constructor': [],
                                           'docstring': '',
                                           'methods': [('render_change_form',
                                                        ['request',
                                                         'context',
                                                         'add=False',
                                                         'change=False',
                                                         "form_url=''",
                                                         'obj=None'],
                                                        '\n        Wrapper for ModelAdmin.render_change_form. Replaces standard static\n        AdminForm with an EAV-friendly one. The point is that our form generates\n        fields dynamically and fieldsets must be inferred from a prepared and\n        validated form instance, not just the form class. Django does not seem\n        to provide hooks for this purpose, so we simply wrap the view and\n        substitute some data.\n        ')],
                                           'properties': []},
             'eav.admin.BaseEntityInline': {'bases': ['django.contrib.admin.options.InlineModelAdmin'],
                                            'constructor': [],
                                            'docstring': '\n    Inline model admin that works correctly with EAV attributes. You should mix\n    in the standard StackedInline or TabularInline classes in order to define\n    formset representation, e.g.::\n\n        class ItemInline(BaseEntityInline, StackedInline):\n            model = Item\n            form = forms.ItemForm\n\n    .. warning: TabularInline does *not* work out of the box. There is,\n        however, a patched template `admin/edit_inline/tabular.html` bundled\n        with EAV-Django. You can copy or symlink the `admin` directory to your\n        templates search path (see Django documentation).\n\n    ',
                                            'methods': [('get_fieldsets',
                                                         ['request', 'obj=None'],
                                                         '')],
                                            'properties': ['formset']},
             'eav.admin.BaseEntityInlineFormSet': {'bases': ['django.forms.models.BaseInlineFormSet'],
                                                   'constructor': [],
                                                   'docstring': '\n    An inline formset that correctly initializes EAV forms.\n    ',
                                                   'methods': [('add_fields',
                                                                ['form', 'index'],
                                                                '')],
                                                   'properties': []},
             'eav.fields.EavDatatypeField': {'bases': ['django.db.models.CharField'],
                                             'constructor': [],
                                             'docstring': '\n    The datatype field used by :class:`~eav.models.Attribute`\n    ',
                                             'methods': [('validate',
                                                          ['value', 'instance'],
                                                          '\n        Raise ``ValidationError`` if they try to change the datatype of an\n        :class:`~eav.models.Attribute` that is already used by\n        :class:`~eav.models.Value` objects.\n        ')],
                                             'properties': []},
             'eav.fields.EavSlugField': {'bases': ['django.db.models.SlugField'],
                                         'constructor': [],
                                         'docstring': '\n    The slug field used by :class:`~eav.models.Attribute`\n    ',
                                         'methods': [('validate',
                                                      ['value', 'instance'],
                                                      "\n        Slugs are used to convert the Python attribute name to a database\n        lookup and vice versa. We need it to be a valid Python identifier.\n        We don't want it to start with a '_', underscore will be used\n        var variables we don't want to be saved in db.\n        "),
                                                     ('create_slug_from_name',
                                                      [],
                                                      '\n        Creates a slug based on the name\n        ')],
                                         'properties': []},
             'eav.forms.BaseDynamicEntityForm': {'bases': ['django.forms.ModelForm'],
                                                 'constructor': ['data=None',
                                                                 '*args',
                                                                 '**kwargs'],
                                                 'docstring': '\n    ModelForm for entity with support for EAV attributes. Form fields are\n    created on the fly depending on Schema defined for given entity instance.\n    If no schema is defined (i.e. the entity instance has not been saved yet),\n    only static fields are used. However, on form validation the schema will be\n    retrieved and EAV fields dynamically added to the form, so when the\n    validation is actually done, all EAV fields are present in it (unless\n    Rubric is not defined).\n    ',
                                                 'methods': [('_build_dynamic_fields', [], ''),
                                                             ('save',
                                                              ['commit=True'],
                                                              "\n        Saves this ``form``'s cleaned_data into model instance\n        ``self.instance`` and related EAV attributes.\n\n        Returns ``instance``.\n        ")],
                                                 'properties': ['FIELD_CLASSES',
                                                                'entity',
                                                                'fields']},
             'eav.managers.EntityManager': {'bases': ['django.db.models.Manager'],
                                            'constructor': [],
                                            'docstring': '\n    Our custom manager, overriding ``models.Manager``\n    ',
                                            'methods': [('filter',
                                                         ['*args', '**kwargs'],
                                                         '\n        Pass *args* and *kwargs* through :func:`eav_filter`, then pass to\n        the ``models.Manager`` filter method.\n        '),
                                                        ('exclude',
                                                         ['*args', '**kwargs'],
                                                         '\n        Pass *args* and *kwargs* through :func:`eav_filter`, then pass to\n        the ``models.Manager`` exclude method.\n        '),
                                                        ('get',
                                                         ['*args', '**kwargs'],
                                                         '\n        Pass *args* and *kwargs* through :func:`eav_filter`, then pass to\n        the ``models.Manager`` get method.\n        '),
                                                        ('create',
                                                         ['**kwargs'],
                                                         "\n        Parse eav attributes out of *kwargs*, then try to create and save\n        the object, then assign and save it's eav attributes.\n        "),
                                                        ('get_or_create',
                                                         ['**kwargs'],
                                                         '\n        Reproduces the behavior of get_or_create, eav friendly.\n        ')],
                                            'properties': []},
             'eav.migrations.0001_initial.Migration': {'bases': ['south.v2.SchemaMigration'],
                                                       'constructor': [],
                                                       'docstring': '',
                                                       'methods': [('forwards', ['orm'], ''),
                                                                   ('backwards', ['orm'], '')],
                                                       'properties': ['models', 'complete_apps']},
             'eav.models.Attribute': {'bases': ['django.db.models.Model'],
                                      'constructor': [],
                                      'docstring': "\n    Putting the **A** in *EAV*. This holds the attributes, or concepts.\n    Examples of possible *Attributes*: color, height, weight,\n    number of children, number of patients, has fever?, etc...\n\n    Each attribute has a name, and a description, along with a slug that must\n    be unique.  If you don't provide a slug, a default slug (derrived from\n    name), will be created.\n\n    The *required* field is a boolean that indicates whether this EAV attribute\n    is required for entitys to which it applies. It defaults to *False*.\n\n    .. warning::\n       Just like a normal model field that is required, you will not be able\n       to save or create any entity object for which this attribute applies,\n       without first setting this EAV attribute.\n\n    There are 7 possible values for datatype:\n\n        * int (TYPE_INT)\n        * float (TYPE_FLOAT)\n        * text (TYPE_TEXT)\n        * date (TYPE_DATE)\n        * bool (TYPE_BOOLEAN)\n        * object (TYPE_OBJECT)\n        * enum (TYPE_ENUM)\n\n    Examples:\n\n    >>> Attribute.objects.create(name='Height', datatype=Attribute.TYPE_INT)\n    <Attribute: Height (Integer)>\n\n    >>> Attribute.objects.create(name='Color', datatype=Attribute.TYPE_TEXT)\n    <Attribute: Color (Text)>\n\n    >>> yes = EnumValue.objects.create(value='yes')\n    >>> no = EnumValue.objects.create(value='no')\n    >>> unkown = EnumValue.objects.create(value='unkown')\n    >>> ynu = EnumGroup.objects.create(name='Yes / No / Unkown')\n    >>> ynu.enums.add(yes, no, unkown)\n    >>> Atrribute.objects.create(name='Has Fever?',\n    ...                          datatype=Attribute.TYPE_ENUM,\n    ...                          enum_group=ynu)\n    <Attribute: Has Fever? (Multiple Choice)>\n\n    .. warning:: Once an Attribute has been used by an entity, you can not\n                 change it's datatype.\n    ",
                                      'methods': [('get_validators',
                                                   [],
                                                   '\n        Returns the appropriate validator function from :mod:`~eav.validators`\n        as a list (of length one) for the datatype.\n\n        .. note::\n           The reason it returns it as a list, is eventually we may want this\n           method to look elsewhere for additional attribute specific\n           validators to return as well as the default, built-in one.\n        '),
                                                  ('validate_value',
                                                   ['value'],
                                                   '\n        Check *value* against the validators returned by\n        :meth:`get_validators` for this attribute.\n        '),
                                                  ('save',
                                                   ['*args', '**kwargs'],
                                                   "\n        Saves the Attribute and auto-generates a slug field if one wasn't\n        provided.\n        "),
                                                  ('clean',
                                                   [],
                                                   "\n        Validates the attribute.  Will raise ``ValidationError`` if\n        the attribute's datatype is *TYPE_ENUM* and enum_group is not set,\n        or if the attribute is not *TYPE_ENUM* and the enum group is set.\n        "),
                                                  ('get_choices',
                                                   [],
                                                   '\n        Returns a query set of :class:`EnumValue` objects for this attribute.\n        Returns None if the datatype of this attribute is not *TYPE_ENUM*.\n        '),
                                                  ('save_value',
                                                   ['entity', 'value'],
                                                   "\n        Called with *entity*, any django object registered with eav, and\n        *value*, the :class:`Value` this attribute for *entity* should\n        be set to.\n\n        If a :class:`Value` object for this *entity* and attribute doesn't\n        exist, one will be created.\n\n        .. note::\n           If *value* is None and a :class:`Value` object exists for this\n            Attribute and *entity*, it will delete that :class:`Value` object.\n        "),
                                                  ('__unicode__', [], '')],
                                      'properties': ['TYPE_TEXT',
                                                     'TYPE_FLOAT',
                                                     'TYPE_INT',
                                                     'TYPE_DATE',
                                                     'TYPE_BOOLEAN',
                                                     'TYPE_OBJECT',
                                                     'TYPE_ENUM',
                                                     'DATATYPE_CHOICES',
                                                     'name',
                                                     'site',
                                                     'slug',
                                                     'description',
                                                     'enum_group',
                                                     'type',
                                                     'help_text',
                                                     'datatype',
                                                     'created',
                                                     'modified',
                                                     'required',
                                                     'objects',
                                                     'on_site']},
             'eav.models.Entity': {'bases': ['object'],
                                   'constructor': ['instance'],
                                   'docstring': '\n    The helper class that will be attached to any entity registered with\n    eav.\n    ',
                                   'methods': [('__getattr__',
                                                ['name'],
                                                "\n        Tha magic getattr helper.  This is called whenevery you do\n        this_instance.<whatever>\n\n        Checks if *name* is a valid slug for attributes available to this\n        instances. If it is, tries to lookup the :class:`Value` with that\n        attribute slug. If there is one, it returns the value of the\n        class:`Value` object, otherwise it hasn't been set, so it returns\n        None.\n        "),
                                               ('get_all_attributes',
                                                [],
                                                '\n        Return a query set of all :class:`Attribute` objects that can be set\n        for this entity.\n        '),
                                               ('save',
                                                [],
                                                '\n        Saves all the EAV values that have been set on this entity.\n        '),
                                               ('validate_attributes',
                                                [],
                                                "\n        Called before :meth:`save`, first validate all the entity values to\n        make sure they can be created / saved cleanly.\n\n        Raise ``ValidationError`` if they can't be.\n        "),
                                               ('get_values',
                                                [],
                                                '\n        Get all set :class:`Value` objects for self.model\n        '),
                                               ('get_all_attribute_slugs',
                                                [],
                                                '\n        Returns a list of slugs for all attributes available to this entity.\n        '),
                                               ('get_attribute_by_slug',
                                                ['slug'],
                                                '\n        Returns a single :class:`Attribute` with *slug*\n        '),
                                               ('get_value_by_attribute',
                                                ['attribute'],
                                                '\n        Returns a single :class:`Value` for *attribute*\n        '),
                                               ('__iter__',
                                                [],
                                                '\n        Iterate over set eav values.\n\n        This would allow you to do:\n\n        >>> for i in m.eav: print i\n        '),
                                               ('post_save_handler',
                                                ['*args', '**kwargs'],
                                                '\n        Post save handler attached to self.model.  Calls :meth:`save` when\n        the model instance we are attached to is saved.\n        '),
                                               ('pre_save_handler',
                                                ['*args', '**kwargs'],
                                                '\n        Pre save handler attached to self.model.  Called before the\n        model instance we are attached to is saved. This allows us to call\n        :meth:`validate_attributes` before the entity is saved.\n        ')],
                                   'properties': ['model', 'ct']},
             'eav.models.EnumGroup': {'bases': ['django.db.models.Model'],
                                      'constructor': [],
                                      'docstring': '\n    *EnumGroup* objects have two fields- a *name* ``CharField`` and *enums*,\n    a ``ManyToManyField`` to :class:`EnumValue`. :class:`Attribute` classes\n    with datatype *TYPE_ENUM* have a ``ForeignKey`` field to *EnumGroup*.\n\n    See :class:`EnumValue` for an example.\n\n    ',
                                      'methods': [('__unicode__', [], '')],
                                      'properties': ['name', 'enums']},
             'eav.models.EnumValue': {'bases': ['django.db.models.Model'],
                                      'constructor': [],
                                      'docstring': "\n    *EnumValue* objects are the value 'choices' to multiple choice\n    *TYPE_ENUM* :class:`Attribute` objects.\n\n    They have only one field, *value*, a``CharField`` that must be unique.\n\n    For example:\n\n    >>> yes = EnumValue.objects.create(value='yes')\n    >>> no = EnumValue.objects.create(value='no')\n    >>> unkown = EnumValue.objects.create(value='unkown')\n\n    >>> ynu = EnumGroup.objects.create(name='Yes / No / Unkown')\n    >>> ynu.enums.add(yes, no, unkown)\n\n    >>> Atrribute.objects.create(name='Has Fever?',\n    ...                          datatype=Attribute.TYPE_ENUM,\n    ...                          enum_group=ynu)\n\n    .. note::\n       The same *EnumValue* objects should be reused within multiple\n       *EnumGroups*.  For example, if you have one *EnumGroup*\n       called: *Yes / No / Unkown* and another called *Yes / No /\n       Not applicable*, you should only have a total of four *EnumValues*\n       objects, as you should have used the same *Yes* and *No* *EnumValues*\n       for both *EnumGroups*.\n    ",
                                      'methods': [('__unicode__', [], '')],
                                      'properties': ['value']},
             'eav.models.Value': {'bases': ['django.db.models.Model'],
                                  'constructor': [],
                                  'docstring': '\n    Putting the **V** in *EAV*. This model stores the value for one particular\n    :class:`Attribute` for some entity.\n\n    As with most EAV implementations, most of the columns of this model will\n    be blank, as onle one *value_* field will be used.\n\n    Example:\n\n    >>> import eav\n    >>> from django.contrib.auth.models import User\n    >>> eav.register(User)\n    >>> u = User.objects.create(username=\'crazy_dev_user\')\n    >>> a = Attribute.objects.create(name=\'Favorite Drink\', datatype=\'text\',\n    ... slug=\'fav_drink\')\n    >>> Value.objects.create(entity=u, attribute=a, value_text=\'red bull\')\n    <Value: crazy_dev_user - Favorite Drink: "red bull">\n    ',
                                  'methods': [('save',
                                               ['*args', '**kwargs'],
                                               '\n        Validate and save this value\n        '),
                                              ('clean',
                                               [],
                                               "\n        Raises ``ValidationError`` if this value's attribute is *TYPE_ENUM*\n        and value_enum is not a valid choice for this value's attribute.\n        "),
                                              ('_get_value',
                                               [],
                                               '\n        Return the python object this value is holding\n        '),
                                              ('_set_value',
                                               ['new_value'],
                                               '\n        Set the object this value is holding\n        '),
                                              ('__unicode__', [], '')],
                                  'properties': ['entity_ct',
                                                 'entity_id',
                                                 'entity',
                                                 'value_text',
                                                 'value_float',
                                                 'value_int',
                                                 'value_date',
                                                 'value_bool',
                                                 'value_enum',
                                                 'generic_value_id',
                                                 'generic_value_ct',
                                                 'value_object',
                                                 'created',
                                                 'modified',
                                                 'attribute',
                                                 'value']},
             'eav.registry.EavConfig': {'bases': ['object'],
                                        'constructor': [],
                                        'docstring': '\n    The default EevConfig class used if it is not overriden on registration.\n    This is where all the default eav attribute names are defined.\n    ',
                                        'methods': [('get_attributes',
                                                     [],
                                                     '\n        By default, all :class:`~eav.models.Attribute` object apply to an\n        entity, unless you provide a custom EavConfig class overriding this.\n        ')],
                                        'properties': ['manager_attr',
                                                       'manager_only',
                                                       'eav_attr',
                                                       'generic_relation_attr',
                                                       'generic_relation_related_name']},
             'eav.registry.Registry': {'bases': ['object'],
                                       'constructor': ['model_cls'],
                                       'docstring': '\n    Handles registration through the\n    :meth:`register` and :meth:`unregister` methods.\n    ',
                                       'methods': [('register',
                                                    ['config_cls=None'],
                                                    '\n        Registers *model_cls* with eav. You can pass an optional *config_cls*\n        to override the EavConfig defaults.\n\n        .. note::\n           Multiple registrations for the same entity are harmlessly ignored.\n        '),
                                                   ('unregister',
                                                    [],
                                                    '\n        Unregisters *model_cls* with eav.\n\n        .. note::\n           Unregistering a class not already registered is harmlessly ignored.\n        '),
                                                   ('attach_eav_attr',
                                                    ['*args', '**kwargs'],
                                                    '\n        Attache EAV Entity toolkit to an instance after init.\n        '),
                                                   ('_attach_manager',
                                                    [],
                                                    '\n        Attach the manager to *manager_attr* specified in *config_cls*\n        '),
                                                   ('_detach_manager',
                                                    [],
                                                    '\n        Detach the manager, and reatach the previous manager (if there was one)\n        '),
                                                   ('_attach_signals',
                                                    [],
                                                    '\n        Attach all signals for eav\n        '),
                                                   ('_detach_signals',
                                                    [],
                                                    '\n        Detach all signals for eav\n        '),
                                                   ('_attach_generic_relation',
                                                    [],
                                                    '\n        Set up the generic relation for the entity\n        '),
                                                   ('_detach_generic_relation',
                                                    [],
                                                    '\n        Remove the generic relation from the entity\n        '),
                                                   ('_register_self',
                                                    [],
                                                    '\n        Call the necessary registration methods\n        '),
                                                   ('_unregister_self',
                                                    [],
                                                    '\n        Call the necessary unregistration methods\n        ')],
                                       'properties': ['model_cls', 'config_cls']},
             'eav.tests.data_validation.DataValidation': {'bases': ['django.test.TestCase'],
                                                          'constructor': [],
                                                          'docstring': '',
                                                          'methods': [('setUp', [], ''),
                                                                      ('tearDown', [], ''),
                                                                      ('test_required_field',
                                                                       [],
                                                                       ''),
                                                                      ('test_create_required_field',
                                                                       [],
                                                                       ''),
                                                                      ('test_validation_error_create',
                                                                       [],
                                                                       ''),
                                                                      ('test_bad_slug', [], ''),
                                                                      ('test_changing_datatypes',
                                                                       [],
                                                                       ''),
                                                                      ('test_int_validation',
                                                                       [],
                                                                       ''),
                                                                      ('test_date_validation',
                                                                       [],
                                                                       ''),
                                                                      ('test_float_validation',
                                                                       [],
                                                                       ''),
                                                                      ('test_text_validation',
                                                                       [],
                                                                       ''),
                                                                      ('test_bool_validation',
                                                                       [],
                                                                       ''),
                                                                      ('test_object_validation',
                                                                       [],
                                                                       ''),
                                                                      ('test_enum_validation',
                                                                       [],
                                                                       ''),
                                                                      ('test_enum_datatype_without_enum_group',
                                                                       [],
                                                                       ''),
                                                                      ('test_enum_group_on_other_datatype',
                                                                       [],
                                                                       '')],
                                                          'properties': []},
             'eav.tests.limiting_attributes.LimittingAttributes': {'bases': ['django.test.TestCase'],
                                                                   'constructor': [],
                                                                   'docstring': '',
                                                                   'methods': [('setUp',
                                                                                [],
                                                                                ''),
                                                                               ('tearDown',
                                                                                [],
                                                                                ''),
                                                                               ('test_get_attribute_querysets',
                                                                                [],
                                                                                ''),
                                                                               ('test_setting_attributes',
                                                                                [],
                                                                                '')],
                                                                   'properties': []},
             'eav.tests.misc_models.MiscModels': {'bases': ['django.test.TestCase'],
                                                  'constructor': [],
                                                  'docstring': '',
                                                  'methods': [('test_enumgroup_unicode',
                                                               [],
                                                               ''),
                                                              ('test_attribute_help_text',
                                                               [],
                                                               ''),
                                                              ('test_setting_to_none_deletes_value',
                                                               [],
                                                               '')],
                                                  'properties': []},
             'eav.tests.models.Encounter': {'bases': ['django.db.models.Model'],
                                            'constructor': [],
                                            'docstring': '',
                                            'methods': [('__unicode__', [], '')],
                                            'properties': ['num', 'patient']},
             'eav.tests.models.Patient': {'bases': ['django.db.models.Model'],
                                          'constructor': [],
                                          'docstring': '',
                                          'methods': [('__unicode__', [], '')],
                                          'properties': ['name']},
             'eav.tests.queries.Queries': {'bases': ['django.test.TestCase'],
                                           'constructor': [],
                                           'docstring': '',
                                           'methods': [('setUp', [], ''),
                                                       ('tearDown', [], ''),
                                                       ('test_get_or_create_with_eav', [], ''),
                                                       ('test_get_with_eav', [], ''),
                                                       ('test_filtering_on_normal_and_eav_fields',
                                                        [],
                                                        ''),
                                                       ('test_eav_through_foreign_key', [], ''),
                                                       ('test_manager_only_create', [], '')],
                                           'properties': ['yes', 'no', 'unkown']},
             'eav.tests.registry.RegistryTests': {'bases': ['django.test.TestCase'],
                                                  'constructor': [],
                                                  'docstring': '',
                                                  'methods': [('setUp', [], ''),
                                                              ('tearDown', [], ''),
                                                              ('register_encounter', [], ''),
                                                              ('test_registering_with_defaults',
                                                               [],
                                                               ''),
                                                              ('test_registering_overriding_defaults',
                                                               [],
                                                               ''),
                                                              ('test_unregistering', [], ''),
                                                              ('test_unregistering_unregistered_model_proceeds_silently',
                                                               [],
                                                               ''),
                                                              ('test_double_registering_model_is_harmless',
                                                               [],
                                                               '')],
                                                  'properties': []},
             'eav.tests.set_and_get.RegistryTests': {'bases': ['django.test.TestCase'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [('setUp', [], ''),
                                                                 ('tearDown', [], ''),
                                                                 ('register_encounter', [], ''),
                                                                 ('test_registering_with_defaults',
                                                                  [],
                                                                  ''),
                                                                 ('test_registering_overriding_defaults',
                                                                  [],
                                                                  ''),
                                                                 ('test_unregistering', [], ''),
                                                                 ('test_unregistering_unregistered_model_proceeds_silently',
                                                                  [],
                                                                  ''),
                                                                 ('test_double_registering_model_is_harmless',
                                                                  [],
                                                                  '')],
                                                     'properties': []},
             'generic.admin.dashboardAdmin': {'bases': ['django.contrib.admin.ModelAdmin'],
                                              'constructor': [],
                                              'docstring': 'dashboard admin ',
                                              'methods': [],
                                              'properties': []},
             'generic.admin.moduleAdmin': {'bases': ['django.contrib.admin.ModelAdmin'],
                                           'constructor': [],
                                           'docstring': 'module admin ',
                                           'methods': [],
                                           'properties': []},
             'generic.admin.moduleParamsAdmin': {'bases': ['django.contrib.admin.ModelAdmin'],
                                                 'constructor': [],
                                                 'docstring': 'module params admin ',
                                                 'methods': [],
                                                 'properties': []},
             'generic.forms.ActionForm': {'bases': ['django.forms.Form'],
                                          'constructor': ['data=None', '**kwargs'],
                                          'docstring': "Action forms consume a list of selected object from the generic list \n    view (generic.views.generic), performing an action on them.  ActionForm\n    subclasses are usually tied to a particular view or at least a particular model,\n    as the peform() method could in theory be passed any iterable in the 'results'\n    parameter.\n    ",
                                          'methods': [('perform', ['request', 'results'], '')],
                                          'properties': ['request']},
             'generic.forms.DateRangeForm': {'bases': ['django.forms.Form'],
                                             'constructor': [],
                                             'docstring': '',
                                             'methods': [('clean', [], '')],
                                             'properties': ['start', 'end']},
             'generic.forms.FilterForm': {'bases': ['django.forms.Form'],
                                          'constructor': ['data=None', '**kwargs'],
                                          'docstring': ' abstract filter class for filtering contacts',
                                          'methods': [('filter', ['request', 'queryset'], '')],
                                          'properties': ['request']},
             'generic.forms.ModuleForm': {'bases': ['django.forms.Form'],
                                          'constructor': [],
                                          'docstring': ' abstract class for module creation forms',
                                          'methods': [('createModule',
                                                       ['dashboard', 'view_name', 'title'],
                                                       ''),
                                                      ('setModuleParams',
                                                       ['dashboard',
                                                        'module=None',
                                                        'title=None'],
                                                       '')],
                                          'properties': []},
             'generic.forms.StaticModuleForm': {'bases': ['generic.models.ModuleForm'],
                                                'constructor': [],
                                                'docstring': '',
                                                'methods': [('setModuleParams',
                                                             ['dashboard',
                                                              'module=None',
                                                              'title=None'],
                                                             '')],
                                                'properties': ['old_content',
                                                               'content',
                                                               'title']},
             'generic.forms.TimeRangeForm': {'bases': ['django.forms.Form'],
                                             'constructor': [],
                                             'docstring': '',
                                             'methods': [],
                                             'properties': ['range']},
             'generic.migrations.0001_initial.Migration': {'bases': ['south.v2.SchemaMigration'],
                                                           'constructor': [],
                                                           'docstring': '',
                                                           'methods': [('forwards',
                                                                        ['orm'],
                                                                        ''),
                                                                       ('backwards',
                                                                        ['orm'],
                                                                        '')],
                                                           'properties': ['models',
                                                                          'complete_apps']},
             'generic.models.Dashboard': {'bases': ['django.db.models.Model'],
                                          'constructor': [],
                                          'docstring': '\n    Dashboards are the landing (default) pages for the different application built into\n    rapidsms. Each user of the application can define what appears on their landing page\n    and the arrangement of the different modules and their individual behavior / configuration\n    is customizable by the user.\n    ',
                                          'methods': [('__unicode__', [], '')],
                                          'properties': ['user', 'slug']},
             'generic.models.Module': {'bases': ['django.db.models.Model'],
                                       'constructor': [],
                                       'docstring': '\n    Modules are the different applications that run / display on a user dashboard. Modules are\n    customizable by the user in terms of where they display on the dashboard and how they behave.\n    ',
                                       'methods': [('get_absolute_url', [], ''),
                                                   ('_param_dict', [], ''),
                                                   ('_param_http', [], ''),
                                                   ('__unicode__', [], '')],
                                       'properties': ['dashboard',
                                                      'title',
                                                      'view_name',
                                                      'offset',
                                                      'column']},
             'generic.models.ModuleParams': {'bases': ['django.db.models.Model'],
                                             'constructor': [],
                                             'docstring': '\n    Module Parameters specify the different configurations and configuration values for each module\n    on the dashboard. These parameters or configurations can be changed by the owner of the dashboard.\n    ',
                                             'methods': [('__unicode__', [], '')],
                                             'properties': ['module',
                                                            'param_name',
                                                            'param_value',
                                                            'is_url_param']},
             'generic.models.StaticModuleContent': {'bases': ['django.db.models.Model'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [('__unicode__', [], '')],
                                                    'properties': ['content']},
             'generic.reporting.forms.DateRangeForm': {'bases': ['django.forms.Form'],
                                                       'constructor': [],
                                                       'docstring': '',
                                                       'methods': [('clean', [], '')],
                                                       'properties': ['start', 'end']},
             'generic.reporting.reports.BasicDateGetter': {'bases': ['object'],
                                                           'constructor': [],
                                                           'docstring': '',
                                                           'methods': [('get_dates',
                                                                        ['request'],
                                                                        ''),
                                                                       ('set_default_dates',
                                                                        ['request', 'context'],
                                                                        ''),
                                                                       ('add_dates_to_context',
                                                                        ['request', 'context'],
                                                                        '')],
                                                           'properties': []},
             'generic.reporting.reports.Column': {'bases': ['object'],
                                                  'constructor': ['order=0',
                                                                  'title=None',
                                                                  'chart_title=None',
                                                                  'chart_subtitle=None',
                                                                  'chart_yaxis=None'],
                                                  'docstring': '',
                                                  'methods': [('get_title', [], ''),
                                                              ('set_report', ['report'], ''),
                                                              ('add_to_report',
                                                               ['report', 'key', 'dictionary'],
                                                               ''),
                                                              ('get_chart', [], ''),
                                                              ('get_redirect', [], ''),
                                                              ('get_view_function', [], ''),
                                                              ('get_order', [], '')],
                                                  'properties': ['report',
                                                                 'order',
                                                                 'title',
                                                                 'chart_title',
                                                                 'chart_subtitle',
                                                                 'chart_yaxis']},
             'generic.reporting.views.ChartView': {'bases': ['django.views.generic.base.View'],
                                                   'constructor': [],
                                                   'docstring': '',
                                                   'methods': [('as_url', [], ''),
                                                               ('get_chart_title', [], ''),
                                                               ('get_chart_subtitle', [], ''),
                                                               ('get_y_axis', [], ''),
                                                               ('get_group_by',
                                                                ['start_date', 'end_date'],
                                                                ''),
                                                               ('get_data', [], ''),
                                                               ('drill_on', ['key'], ''),
                                                               ('render_to_response',
                                                                ['context'],
                                                                ''),
                                                               ('add_data_to_context',
                                                                ['context'],
                                                                ''),
                                                               ('post',
                                                                ['request',
                                                                 '*args',
                                                                 '**kwargs'],
                                                                '')],
                                                   'properties': ['http_method_names',
                                                                  'start_date',
                                                                  'end_date',
                                                                  'date_getter',
                                                                  'chart_title',
                                                                  'chart_subtitle',
                                                                  'chart_yaxis']},
             'generic.reporting.views.JsonResponse': {'bases': ['django.http.HttpResponse'],
                                                      'constructor': ['obj'],
                                                      'docstring': ' return json content type   ',
                                                      'methods': [('serialize', [], '')],
                                                      'properties': ['original_obj']},
             'generic.reporting.views.ReportView': {'bases': ['django.views.generic.base.View',
                                                              'django.views.generic.base.TemplateResponseMixin'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [('get',
                                                                 ['request',
                                                                  '*args',
                                                                  '**kwargs'],
                                                                 ''),
                                                                ('post',
                                                                 ['request',
                                                                  '*args',
                                                                  '**kwargs'],
                                                                 ''),
                                                                ('get_top_columns', [], ''),
                                                                ('get_columns', [], ''),
                                                                ('get_default_column', [], ''),
                                                                ('flatten_list',
                                                                 ['report_dict'],
                                                                 "\n            Rearrange a dictionary of dictionaries:\n                { 'apple':{'a':1,'b':2,'c':3},\n                  'orange':{'d':4,'e':5,'f':6} }\n                  \n            Into a list of dictionaries:\n               [{'key':'apple','a':1,'b':2,'c':3},{'key':'orange','d':4,'e':5,'f':6}]\n        "),
                                                                ('compile_report', [], ''),
                                                                ('drill_on', ['key'], ''),
                                                                ('render_to_response',
                                                                 ['context'],
                                                                 ''),
                                                                ('as_urlpatterns',
                                                                 ['name=None'],
                                                                 "\n        Creates the appropriate URL patterns for this object.\n        The root url (to the main report page) can take an optional 'name'\n        parameter.\n        ")],
                                                    'properties': ['http_method_names',
                                                                   'template_name',
                                                                   'partial_base',
                                                                   'drill_key',
                                                                   'row_name_key',
                                                                   'needs_date',
                                                                   'date_getter',
                                                                   'has_chart',
                                                                   'start_date',
                                                                   'end_date',
                                                                   'columns',
                                                                   'top_columns',
                                                                   'location',
                                                                   'report']},
             'generic.reports.Column': {'bases': ['object'],
                                        'constructor': [],
                                        'docstring': '',
                                        'methods': [('add_to_report',
                                                     ['report', 'key', 'dictionary'],
                                                     '')],
                                        'properties': []},
             'generic.reports.Report': {'bases': ['object'],
                                        'constructor': ['request=None', 'dates=None'],
                                        'docstring': "\n    A report was found to be a useful callable for more complicated aggregate reports, in which each\n    column of the report is a complicated query, but can be performed for every row of the\n    table at once.  Subclasses of this object can define tabular reports declaratively,\n    by creating Column attributes.\n\n    The main report class builds a dictionary of dictionaries.  Each key is a unique identifier, and\n    the dictionary value has the remaining column attributes.  Each column is called in the order it was\n    declared, adding its column value to each subdictionary in the main dictionary.  The final product\n    is then flattened.\n\n    For instance, suppose we were aggregating stats by Locations.  I might declare three columns:\n\n    class MyCityReport(Report):\n        population = PopulationColumn()\n        crime = CrimeColumn()\n        pollution = PollutionColumn()\n\n    each Column knows how to add itself to the report structure following the same convention.\n    So MyCityReport would start with an empty report dictionary, {}.\n    After the call to PopulationColumn's add_to_report() method, the report dictionary might look\n    like this:\n\n    {'nairobi':{'pop':3000000},\n     'kampala':{'pop':1420200},\n     'kigali':{'pop':965398}}\n\n    After Crime's add_to_report(), it would be:\n\n    {'nairobi':{'pop':3000000, 'crime':'nairobbery'},\n     'kampala':{'pop':1420200, 'crime':'lots of carjacking'},\n     'kigali':{'pop':965398, 'crime':'ok lately'}}\n\n    And so on.  After all columns have been given a shot at adding their data, the report finally flattens\n    this list into something that can be used by the generic view in the standard way (i.e., as an iterable\n    that can be sorted, paginated, and selected): \n    \n    [{'key':'nairobi','pop':3000000, 'crime':'nairobbery'},\n     {'key':'kampala','pop':1420200, 'crime':'lots of carjacking'},\n     {'key':'kigali','pop':965398, 'crime':'ok lately'}]\n     \n     Reports also sort date filtering and drill-down by default, just be sure to set \n     `needs_date` to True when passing a Report object to the generic view, and also set\n     the base_template to be `generic/timeslider_base.html' rather than the standard \n     `generic/base.html`\n    ",
                                        'methods': [('__iter__', [], ''), ('__len__', [], '')],
                                        'properties': ['drill_key',
                                                       'start_date',
                                                       'end_date',
                                                       'report',
                                                       'columns']},
             'generic.sorters.QuickSorter': {'bases': ['object'],
                                             'constructor': ['comparator'],
                                             'docstring': "\n    >>> qs = QuickSorter(comparator = simple_comparator)\n    >>> qs.sort('', [3, 1, 4, 5, 6, 9, 2]\n    [1, 2, 3, 4, 5, 6, 9]\n    ",
                                             'methods': [('sort',
                                                          ['column',
                                                           'object_list',
                                                           'ascending=True'],
                                                          ''),
                                                         ('quicksort',
                                                          ['column',
                                                           'object_list',
                                                           'ascending',
                                                           'comparator',
                                                           'start',
                                                           'pivot',
                                                           'finish'],
                                                          ''),
                                                         ('swap',
                                                          ['object_list', 'index1', 'index2'],
                                                          '')],
                                             'properties': ['comparator']},
             'generic.sorters.SimpleSorter': {'bases': ['object'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [('sort',
                                                           ['column',
                                                            'object_list',
                                                            'ascending=True'],
                                                           '')],
                                              'properties': []},
             'generic.sorters.Sorter': {'bases': ['object'],
                                        'constructor': [],
                                        'docstring': '',
                                        'methods': [('sort',
                                                     ['column',
                                                      'object_list',
                                                      'ascending=True'],
                                                     '')],
                                        'properties': []},
             'generic.sorters.TupleSorter': {'bases': ['object'],
                                             'constructor': ['index'],
                                             'docstring': '',
                                             'methods': [('sort',
                                                          ['column',
                                                           'object_list',
                                                           'ascending=True'],
                                                          '')],
                                             'properties': ['index']},
             'healthmodels.admin.HealthFacilityAdmin': {'bases': ['django.contrib.admin.ModelAdmin'],
                                                        'constructor': [],
                                                        'docstring': '',
                                                        'methods': [],
                                                        'properties': []},
             'healthmodels.admin.HealthFacilityTypeAdmin': {'bases': ['django.contrib.admin.ModelAdmin'],
                                                            'constructor': [],
                                                            'docstring': '',
                                                            'methods': [],
                                                            'properties': []},
             'healthmodels.migrations.0001_initial.Migration': {'bases': ['south.v2.SchemaMigration'],
                                                                'constructor': [],
                                                                'docstring': '',
                                                                'methods': [('forwards',
                                                                             ['orm'],
                                                                             ''),
                                                                            ('backwards',
                                                                             ['orm'],
                                                                             '')],
                                                                'properties': ['models',
                                                                               'complete_apps']},
             'healthmodels.models.FacilityReport.FacilityReport': {'bases': ['healthmodels.models.FacilityReport.FacilityReportBase'],
                                                                   'constructor': [],
                                                                   'docstring': '',
                                                                   'methods': [],
                                                                   'properties': ['__metaclass__']},
             'healthmodels.models.FacilityReport.FacilityReportBase': {'bases': ['django.db.models.Model'],
                                                                       'constructor': [],
                                                                       'docstring': '',
                                                                       'methods': [],
                                                                       'properties': ['facility']},
             'healthmodels.models.HealthFacility.HealthFacility': {'bases': ['healthmodels.models.HealthFacility.HealthFacilityBase'],
                                                                   'constructor': [],
                                                                   'docstring': '',
                                                                   'methods': [('is_root',
                                                                                [],
                                                                                ''),
                                                                               ('get_children',
                                                                                [],
                                                                                ''),
                                                                               ('is_child_node',
                                                                                [],
                                                                                '')],
                                                                   'properties': ['__metaclass__']},
             'healthmodels.models.HealthFacility.HealthFacilityBase': {'bases': ['django.db.models.Model'],
                                                                       'constructor': [],
                                                                       'docstring': '',
                                                                       'methods': [('__unicode__',
                                                                                    [],
                                                                                    ''),
                                                                                   ('save',
                                                                                    ['*args',
                                                                                     '**kwargs'],
                                                                                    ' generates a code if none provided ')],
                                                                       'properties': ['name',
                                                                                      'code',
                                                                                      'type',
                                                                                      'catchment_areas',
                                                                                      'location',
                                                                                      'report_to_type',
                                                                                      'report_to_id',
                                                                                      'report_to']},
             'healthmodels.models.HealthFacility.HealthFacilityType': {'bases': ['healthmodels.models.HealthFacility.HealthFacilityTypeBase'],
                                                                       'constructor': [],
                                                                       'docstring': '',
                                                                       'methods': [],
                                                                       'properties': ['__metaclass__']},
             'healthmodels.models.HealthFacility.HealthFacilityTypeBase': {'bases': ['django.db.models.Model'],
                                                                           'constructor': [],
                                                                           'docstring': '',
                                                                           'methods': [('__unicode__',
                                                                                        [],
                                                                                        '')],
                                                                           'properties': ['name',
                                                                                          'slug']},
             'healthmodels.models.HealthId.HealthId': {'bases': ['healthmodels.models.HealthId.HealthIdBase'],
                                                       'constructor': [],
                                                       'docstring': '',
                                                       'methods': [],
                                                       'properties': ['__metaclass__']},
             'healthmodels.models.HealthId.HealthIdBase': {'bases': ['django.db.models.Model'],
                                                           'constructor': [],
                                                           'docstring': "\n    Health Id is a unique identifier for a patient, but can also correspond\n    to a physical ID in places where these exist (hence the separate class).\n    This class is designed to err on the side of *too much* information, as\n    for simpler MIS systems this class may be completely unused.\n\n    An important field to note is migration_id.\n    This field is here optimistically.  Ideally, one day, all mHealth\n    projects will do a monolithic migration to a universal MIS with\n    universal health ids.  This would serve as a placeholder to make\n    the migration easy at an API level: each internal app could use\n    its own health_id internally within it's existing models,\n    while exposing the public migration_id to the outside world.\n    ",
                                                           'methods': [('__unicode__', [], '')],
                                                           'properties': ['GENERATED',
                                                                          'PRINTED',
                                                                          'ISSUED',
                                                                          'REVOKED',
                                                                          'STATUS_CHOICES',
                                                                          'health_id',
                                                                          'generated_on',
                                                                          'printed_on',
                                                                          'issued_on',
                                                                          'revoked_on',
                                                                          'issued_to',
                                                                          'status']},
             'healthmodels.models.HealthProvider.HealthProvider': {'bases': ['healthmodels.models.HealthProvider.HealthProviderBase'],
                                                                   'constructor': [],
                                                                   'docstring': '',
                                                                   'methods': [],
                                                                   'properties': ['__metaclass__']},
             'healthmodels.models.HealthProvider.HealthProviderBase': {'bases': ['rapidsms.models.Contact'],
                                                                       'constructor': [],
                                                                       'docstring': '',
                                                                       'methods': [],
                                                                       'properties': ['facility',
                                                                                      'location']},
             'healthmodels.models.Patient.Patient': {'bases': ['healthmodels.models.Patient.PatientBase'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [],
                                                     'properties': ['__metaclass__']},
             'healthmodels.models.Patient.PatientBase': {'bases': ['django.db.models.Model'],
                                                         'constructor': [],
                                                         'docstring': '',
                                                         'methods': [('full_name', [], ''),
                                                                     ('__unicode__', [], '')],
                                                         'properties': ['MALE',
                                                                        'FEMALE',
                                                                        'GENDER_CHOICES',
                                                                        'ACTIVE',
                                                                        'INACTIVE',
                                                                        'STATUS_CHOICES',
                                                                        'health_id',
                                                                        'first_name',
                                                                        'middle_name',
                                                                        'last_name',
                                                                        'gender',
                                                                        'birthdate',
                                                                        'estimated_birthdate',
                                                                        'deathdate',
                                                                        'created',
                                                                        'updated',
                                                                        'health_worker',
                                                                        'location',
                                                                        'health_facility',
                                                                        'contact',
                                                                        'status',
                                                                        'age',
                                                                        'is_dead']},
             'healthmodels.models.PatientEncounter.PatientEncounter': {'bases': ['Patient.PatientEncounterBase'],
                                                                       'constructor': [],
                                                                       'docstring': '',
                                                                       'methods': [],
                                                                       'properties': ['__metaclass__']},
             'healthmodels.models.PatientEncounter.PatientEncounterBase': {'bases': ['django.db.models.Model'],
                                                                           'constructor': [],
                                                                           'docstring': '',
                                                                           'methods': [],
                                                                           'properties': ['patient']},
             'healthmodels.templatetags.health_facility_tree.HealthTreeNode': {'bases': ['django.template.Node'],
                                                                               'constructor': ['template_nodes',
                                                                                               'queryset'],
                                                                               'docstring': '',
                                                                               'methods': [('_render_node',
                                                                                            ['context',
                                                                                             'node'],
                                                                                            ''),
                                                                                           ('render',
                                                                                            ['context'],
                                                                                            '')],
                                                                               'properties': ['template_nodes',
                                                                                              'queryset']},
             'healthmodels.tests.SimpleTest': {'bases': ['django.test.TestCase'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [('test_basic_addition',
                                                            [],
                                                            '\n        Tests that 1 + 1 always equals 2.\n        ')],
                                               'properties': []},
             'healthmodels.views.forms.HealthFacilityForm': {'bases': ['django.forms.ModelForm'],
                                                             'constructor': ['*args',
                                                                             '**kwargs'],
                                                             'docstring': '',
                                                             'methods': [],
                                                             'properties': []},
             'healthmodels.views.forms.HealthProviderForm': {'bases': ['django.forms.Form'],
                                                             'constructor': ['*args',
                                                                             '**kwargs'],
                                                             'docstring': '',
                                                             'methods': [],
                                                             'properties': []},
             'healthmodels.views.forms.PointForm': {'bases': ['django.forms.ModelForm'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [],
                                                    'properties': []},
             'healthmodels.views.forms.ReportToForm': {'bases': ['django.forms.Form'],
                                                       'constructor': [],
                                                       'docstring': '',
                                                       'methods': [],
                                                       'properties': ['report_to', 'p']},
             'mtrack_project.email_reports_src.email_reports.admin.DailyReportSubscriptionAdmin': {'bases': ['django.contrib.admin.ModelAdmin'],
                                                                                                   'constructor': [],
                                                                                                   'docstring': '',
                                                                                                   'methods': [],
                                                                                                   'properties': ['model']},
             'mtrack_project.email_reports_src.email_reports.admin.WeeklyReportSubscriptionAdmin': {'bases': ['django.contrib.admin.ModelAdmin'],
                                                                                                    'constructor': [],
                                                                                                    'docstring': '',
                                                                                                    'methods': [],
                                                                                                    'properties': ['model']},
             'mtrack_project.email_reports_src.email_reports.models.DailyReportSubscription': {'bases': ['mtrack_project.email_reports_src.email_reports.models.ReportSubscription'],
                                                                                               'constructor': [],
                                                                                               'docstring': '',
                                                                                               'methods': [],
                                                                                               'properties': ['__name__',
                                                                                                              'hours']},
             'mtrack_project.email_reports_src.email_reports.models.ReportSubscription': {'bases': ['django.db.models.Model',
                                                                                                    'dimagi.utils.mixins.UnicodeMixIn'],
                                                                                          'constructor': [],
                                                                                          'docstring': '',
                                                                                          'methods': [('__unicode__',
                                                                                                       [],
                                                                                                       ''),
                                                                                                      ('send',
                                                                                                       [],
                                                                                                       ''),
                                                                                                      ('send_to_user',
                                                                                                       ['user'],
                                                                                                       ''),
                                                                                                      ('view_args',
                                                                                                       ['value'],
                                                                                                       ''),
                                                                                                      ('view_args',
                                                                                                       [],
                                                                                                       '')],
                                                                                          'properties': ['report',
                                                                                                         '_view_args',
                                                                                                         'users',
                                                                                                         'view_args']},
             'mtrack_project.email_reports_src.email_reports.models.WeeklyReportSubscription': {'bases': ['mtrack_project.email_reports_src.email_reports.models.ReportSubscription'],
                                                                                                'constructor': [],
                                                                                                'docstring': '',
                                                                                                'methods': [],
                                                                                                'properties': ['__name__',
                                                                                                               'hours',
                                                                                                               'day_of_week']},
             'mtrack_project.email_reports_src.email_reports.schedule.ReportSchedule': {'bases': ['object'],
                                                                                        'constructor': ['view_func',
                                                                                                        "title='unspecified'",
                                                                                                        'processor=RequestProcessor()'],
                                                                                        'docstring': '\n    A basic report scedule, fully customizable, but requiring you to \n    understand exactly what to pass to the view at runtime.\n    ',
                                                                                        'methods': [('get_response',
                                                                                                     ['user',
                                                                                                      'view_args={}'],
                                                                                                     '')],
                                                                                        'properties': ['_view_func',
                                                                                                       '_processor',
                                                                                                       '_title',
                                                                                                       'title']},
             'mtrack_project.email_reports_src.email_reports.schedule.html2text._html2text': {'bases': ['HTMLParser.HTMLParser'],
                                                                                              'constructor': ['out=None',
                                                                                                              "baseurl=''"],
                                                                                              'docstring': '',
                                                                                              'methods': [('outtextf',
                                                                                                           ['s'],
                                                                                                           ''),
                                                                                                          ('close',
                                                                                                           [],
                                                                                                           ''),
                                                                                                          ('handle_charref',
                                                                                                           ['c'],
                                                                                                           ''),
                                                                                                          ('handle_entityref',
                                                                                                           ['c'],
                                                                                                           ''),
                                                                                                          ('handle_starttag',
                                                                                                           ['tag',
                                                                                                            'attrs'],
                                                                                                           ''),
                                                                                                          ('handle_endtag',
                                                                                                           ['tag'],
                                                                                                           ''),
                                                                                                          ('previousIndex',
                                                                                                           ['attrs'],
                                                                                                           ' returns the index of certain set of attributes (of a link) in the\n            self.a list\n \n            If the set of attributes is not found, returns None\n        '),
                                                                                                          ('handle_tag',
                                                                                                           ['tag',
                                                                                                            'attrs',
                                                                                                            'start'],
                                                                                                           ''),
                                                                                                          ('pbr',
                                                                                                           [],
                                                                                                           ''),
                                                                                                          ('p',
                                                                                                           [],
                                                                                                           ''),
                                                                                                          ('o',
                                                                                                           ['data',
                                                                                                            'puredata=0',
                                                                                                            'force=0'],
                                                                                                           ''),
                                                                                                          ('handle_data',
                                                                                                           ['data'],
                                                                                                           ''),
                                                                                                          ('unknown_decl',
                                                                                                           ['data'],
                                                                                                           '')],
                                                                                              'properties': ['out',
                                                                                                             'outtext',
                                                                                                             'quiet',
                                                                                                             'p_p',
                                                                                                             'outcount',
                                                                                                             'start',
                                                                                                             'space',
                                                                                                             'a',
                                                                                                             'astack',
                                                                                                             'acount',
                                                                                                             'list',
                                                                                                             'blockquote',
                                                                                                             'pre',
                                                                                                             'startpre',
                                                                                                             'lastWasNL',
                                                                                                             'abbr_title',
                                                                                                             'abbr_data',
                                                                                                             'abbr_list',
                                                                                                             'baseurl']},
             'mtrack_project.email_reports_src.email_reports.schedule.parsers.DivIdParser': {'bases': ['HTMLParser.HTMLParser'],
                                                                                             'constructor': ['tag_id',
                                                                                                             "tag_type='div'"],
                                                                                             'docstring': '',
                                                                                             'methods': [('feed',
                                                                                                          ['data'],
                                                                                                          ''),
                                                                                                         ('handle_starttag',
                                                                                                          ['tag',
                                                                                                           'attributes'],
                                                                                                          ''),
                                                                                                         ('handle_endtag',
                                                                                                          ['tag'],
                                                                                                          ''),
                                                                                                         ('get_html',
                                                                                                          [],
                                                                                                          '')],
                                                                                             'properties': ['recording',
                                                                                                            '_start_pos',
                                                                                                            '_end_pos',
                                                                                                            '_tag_id',
                                                                                                            '_tag_type',
                                                                                                            '_start_tag',
                                                                                                            '_end_tag',
                                                                                                            '_raw_html']},
             'mtrack_project.email_reports_src.email_reports.schedule.parsers.ReportParser': {'bases': [],
                                                                                              'constructor': ['raw_html'],
                                                                                              'docstring': '',
                                                                                              'methods': [('get_html',
                                                                                                           [],
                                                                                                           '')],
                                                                                              'properties': ['_title_parser',
                                                                                                             '_body_parser']},
             'mtrack_project.email_reports_src.email_reports.schedule.request.RequestProcessor': {'bases': ['object'],
                                                                                                  'constructor': [],
                                                                                                  'docstring': '',
                                                                                                  'methods': [('preprocess',
                                                                                                               ['request',
                                                                                                                '**vals'],
                                                                                                               '\n        Kind of like a middleware. If you need to preprocess the request \n        do it here')],
                                                                                                  'properties': []},
             'mtrack_project.email_reports_src.email_reports.tests.TestReports': {'bases': ['rapidsms.tests.scripted.TestScript'],
                                                                                  'constructor': [],
                                                                                  'docstring': '',
                                                                                  'methods': [('testDailyEmailReports',
                                                                                               [],
                                                                                               ''),
                                                                                              ('testWeeklyEmailReports',
                                                                                               [],
                                                                                               '')],
                                                                                  'properties': []},
             'mtrack_project.rapidsms_alerts.alerts.Alert': {'bases': ['object'],
                                                             'constructor': ['text', 'url=None'],
                                                             'docstring': '\n    An alert, for display on the dashboard.\n    ',
                                                             'methods': [],
                                                             'properties': ['_text',
                                                                            '_url',
                                                                            'url',
                                                                            'text']},
             'mtrack_project.rapidsms_alerts.alerts._prototyping.NotifiableDiseaseThresholdAlert': {'bases': ['alerts.models.NotificationType'],
                                                                                                    'constructor': [],
                                                                                                    'docstring': '',
                                                                                                    'methods': [('users_for_escalation_level',
                                                                                                                 ['esc_level'],
                                                                                                                 ''),
                                                                                                                ('auto_escalation_interval',
                                                                                                                 ['esc_level'],
                                                                                                                 ''),
                                                                                                                ('escalation_level_name',
                                                                                                                 ['esc_level'],
                                                                                                                 '')],
                                                                                                    'properties': ['escalation_levels']},
             'mtrack_project.rapidsms_alerts.alerts._prototyping.TestAlertType': {'bases': ['alerts.models.NotificationType'],
                                                                                  'constructor': [],
                                                                                  'docstring': '',
                                                                                  'methods': [('users_for_escalation_level',
                                                                                               ['esc_level'],
                                                                                               ''),
                                                                                              ('auto_escalation_interval',
                                                                                               ['esc_level'],
                                                                                               ''),
                                                                                              ('escalation_level_name',
                                                                                               ['esc_level'],
                                                                                               '')],
                                                                                  'properties': ['escalation_levels']},
             'mtrack_project.rapidsms_alerts.alerts.management.commands.alert_maintenance.Command': {'bases': ['django.core.management.base.BaseCommand'],
                                                                                                     'constructor': [],
                                                                                                     'docstring': '',
                                                                                                     'methods': [('handle',
                                                                                                                  ['*args',
                                                                                                                   '**options'],
                                                                                                                  '')],
                                                                                                     'properties': []},
             'mtrack_project.rapidsms_alerts.alerts.management.commands.trigger_alerts.Command': {'bases': ['django.core.management.base.BaseCommand'],
                                                                                                  'constructor': [],
                                                                                                  'docstring': '',
                                                                                                  'methods': [('handle',
                                                                                                               ['*args',
                                                                                                                '**options'],
                                                                                                               '')],
                                                                                                  'properties': []},
             'mtrack_project.rapidsms_alerts.alerts.models.Notification': {'bases': ['django.db.models.Model'],
                                                                           'constructor': [],
                                                                           'docstring': '',
                                                                           'methods': [('json',
                                                                                        ['user=None'],
                                                                                        ''),
                                                                                       ('actions',
                                                                                        ['user'],
                                                                                        'return the actions this user may currently take on this alert'),
                                                                                       ('initialize',
                                                                                        [],
                                                                                        ''),
                                                                                       ('resolve',
                                                                                        [],
                                                                                        ''),
                                                                                       ('followup',
                                                                                        ['user'],
                                                                                        ''),
                                                                                       ('escalate',
                                                                                        [],
                                                                                        ''),
                                                                                       ('reveal_to_users',
                                                                                        [],
                                                                                        ''),
                                                                                       ('autoescalate_due',
                                                                                        [],
                                                                                        ''),
                                                                                       ('set_esc_level',
                                                                                        ['esc_level'],
                                                                                        ''),
                                                                                       ('user_escalation_level',
                                                                                        ['user'],
                                                                                        'determine at what escalation level this user is affiliated with the\n        alert (determines what actions that user may take'),
                                                                                       ('__unicode__',
                                                                                        [],
                                                                                        ''),
                                                                                       ('__getattribute__',
                                                                                        ['name'],
                                                                                        'delegate out to the associated AlertType; in practice, this will only be done for\n        known methods in the AlertType interface')],
                                                                           'properties': ['uid',
                                                                                          'created_on',
                                                                                          'escalated_on',
                                                                                          'modified_on',
                                                                                          'text',
                                                                                          'url',
                                                                                          'alert_type',
                                                                                          'originating_location',
                                                                                          'owner',
                                                                                          'is_open',
                                                                                          'escalation_level',
                                                                                          '_type_inst',
                                                                                          'is_escalated',
                                                                                          'status',
                                                                                          '_type']},
             'mtrack_project.rapidsms_alerts.alerts.models.NotificationComment': {'bases': ['django.db.models.Model'],
                                                                                  'constructor': [],
                                                                                  'docstring': '',
                                                                                  'methods': [('json',
                                                                                               [],
                                                                                               ''),
                                                                                              ('__unicode__',
                                                                                               [],
                                                                                               '')],
                                                                                  'properties': ['notification',
                                                                                                 'user',
                                                                                                 'date',
                                                                                                 'text',
                                                                                                 'is_system']},
             'mtrack_project.rapidsms_alerts.alerts.models.NotificationType': {'bases': ['object'],
                                                                               'constructor': ['notif'],
                                                                               'docstring': '',
                                                                               'methods': [('__getattr__',
                                                                                            ['name'],
                                                                                            ''),
                                                                                           ('next_escalation_level',
                                                                                            ['esc_level'],
                                                                                            'return the escalation level that follows esc_level\n        if esc_level is None, return the default (un-escalated) level\n        if alert cannot be escalated further, return None'),
                                                                                           ('users_for_escalation_level',
                                                                                            ['esc_level'],
                                                                                            'return the set of users responsible for this alert once it\n        reaches the specified escalation level'),
                                                                                           ('auto_escalation_interval',
                                                                                            ['esc_level'],
                                                                                            'return the time interval (as a timedelta) the alert has spent\n        at the given level after which it is auto-escalated to the next\n        level'),
                                                                                           ('escalation_level_name',
                                                                                            ['esc_level'],
                                                                                            "human readable name for the given escalation level (i.e.,\n        'district team', 'MoH', 'regional supervisor'")],
                                                                               'properties': ['_notif',
                                                                                              'initial_escalation_level',
                                                                                              'is_escalable',
                                                                                              'escalation_levels']},
             'mtrack_project.rapidsms_alerts.alerts.models.NotificationVisibility': {'bases': ['django.db.models.Model'],
                                                                                     'constructor': [],
                                                                                     'docstring': 'many-to-many mapping of which users can see which alerts',
                                                                                     'methods': [],
                                                                                     'properties': ['notif',
                                                                                                    'user',
                                                                                                    'esc_level']},
             'mtrack_project.rapidsms_alerts.alerts.models.ResolutionAcknowledgement': {'bases': [],
                                                                                        'constructor': [],
                                                                                        'docstring': '',
                                                                                        'methods': [],
                                                                                        'properties': []},
             'mtrack_project.rapidsms_cvs.cvs.app.App': {'bases': ['rapidsms.apps.base.AppBase'],
                                                         'constructor': [],
                                                         'docstring': '',
                                                         'methods': [('handle',
                                                                      ['message'],
                                                                      ''),
                                                                     ('outgoing', ['msg'], '')],
                                                         'properties': []},
             'mtrack_project.rapidsms_cvs.cvs.extensions.healthmodels.facilityreport.XFormFacilityReport': {'bases': ['django.db.models.Model'],
                                                                                                            'constructor': [],
                                                                                                            'docstring': '\n    FIXME: Documentation\n    ',
                                                                                                            'methods': [],
                                                                                                            'properties': ['submission',
                                                                                                                           'reporter',
                                                                                                                           'message',
                                                                                                                           'valid']},
             'mtrack_project.rapidsms_cvs.cvs.extensions.healthmodels.patientencounter.XFormPatientEncounter': {'bases': ['django.db.models.Model'],
                                                                                                                'constructor': [],
                                                                                                                'docstring': '\n    FIXME: Documentation\n    ',
                                                                                                                'methods': [],
                                                                                                                'properties': ['submission',
                                                                                                                               'reporter',
                                                                                                                               'message',
                                                                                                                               'valid']},
             'mtrack_project.rapidsms_cvs.cvs.forms.ActivateForm': {'bases': ['generic.forms.ActionForm'],
                                                                    'constructor': [],
                                                                    'docstring': '',
                                                                    'methods': [('perform',
                                                                                 ['request',
                                                                                  'results'],
                                                                                 '')],
                                                                    'properties': ['action_label']},
             'mtrack_project.rapidsms_cvs.cvs.forms.FacilityFilterForm': {'bases': ['generic.forms.FilterForm'],
                                                                          'constructor': [],
                                                                          'docstring': ' filter form for cvs facilities ',
                                                                          'methods': [('filter',
                                                                                       ['request',
                                                                                        'queryset'],
                                                                                       '')],
                                                                          'properties': ['facility']},
             'mtrack_project.rapidsms_cvs.cvs.forms.FacilityForm': {'bases': ['django.forms.Form'],
                                                                    'constructor': ['*args',
                                                                                    '**kwargs'],
                                                                    'docstring': '',
                                                                    'methods': [('save',
                                                                                 [],
                                                                                 '')],
                                                                    'properties': ['name',
                                                                                   'code',
                                                                                   'type',
                                                                                   'catchment_areas',
                                                                                   'facility_district',
                                                                                   'facility']},
             'mtrack_project.rapidsms_cvs.cvs.forms.FacilityResponseForm': {'bases': ['django.forms.Form'],
                                                                            'constructor': ['data=None',
                                                                                            '**kwargs'],
                                                                            'docstring': '',
                                                                            'methods': [],
                                                                            'properties': ['value']},
             'mtrack_project.rapidsms_cvs.cvs.forms.ReporterForm': {'bases': ['django.forms.Form'],
                                                                    'constructor': ['*args',
                                                                                    '**kwargs'],
                                                                    'docstring': '',
                                                                    'methods': [('get_district',
                                                                                 [],
                                                                                 ''),
                                                                                ('save',
                                                                                 [],
                                                                                 '')],
                                                                    'properties': ['name',
                                                                                   'facility',
                                                                                   'roles',
                                                                                   'village_name',
                                                                                   'reporter_district',
                                                                                   'reporting_location',
                                                                                   'reporter']},
             'mtrack_project.rapidsms_cvs.cvs.management.commands.create_cvsreg_script.Command': {'bases': ['django.core.management.base.BaseCommand'],
                                                                                                  'constructor': [],
                                                                                                  'docstring': '',
                                                                                                  'methods': [('handle',
                                                                                                               ['**options'],
                                                                                                               '')],
                                                                                                  'properties': []},
             'mtrack_project.rapidsms_cvs.cvs.management.commands.send_monthly_reports.Command': {'bases': ['django.core.management.base.BaseCommand'],
                                                                                                  'constructor': [],
                                                                                                  'docstring': '',
                                                                                                  'methods': [('handle',
                                                                                                               ['**options'],
                                                                                                               '')],
                                                                                                  'properties': []},
             'mtrack_project.rapidsms_cvs.cvs.migrations.0001_initial.Migration': {'bases': ['south.v2.SchemaMigration'],
                                                                                   'constructor': [],
                                                                                   'docstring': '',
                                                                                   'methods': [('forwards',
                                                                                                ['orm'],
                                                                                                ''),
                                                                                               ('backwards',
                                                                                                ['orm'],
                                                                                                '')],
                                                                                   'properties': ['models',
                                                                                                  'complete_apps']},
             'mtrack_project.rapidsms_cvs.cvs.reports.ActiveReportersColumn': {'bases': ['generic.reporting.reports.Column'],
                                                                               'constructor': ["roles=['VHT', 'PVHT']",
                                                                                               'period=1',
                                                                                               '**kwargs'],
                                                                               'docstring': '',
                                                                               'methods': [('add_to_report',
                                                                                            ['report',
                                                                                             'key',
                                                                                             'dictionary'],
                                                                                            ''),
                                                                                           ('get_chart',
                                                                                            [],
                                                                                            ''),
                                                                                           ('get_view_function',
                                                                                            [],
                                                                                            '')],
                                                                               'properties': ['roles',
                                                                                              'period']},
             'mtrack_project.rapidsms_cvs.cvs.reports.BirthReport': {'bases': ['uganda_common.views.XFormReport'],
                                                                     'constructor': [],
                                                                     'docstring': '',
                                                                     'methods': [],
                                                                     'properties': ['at_home_filter',
                                                                                    'at_facility_filter',
                                                                                    'total',
                                                                                    'boys',
                                                                                    'girls',
                                                                                    'home',
                                                                                    'facility',
                                                                                    'percent_home',
                                                                                    'percent_facility']},
             'mtrack_project.rapidsms_cvs.cvs.reports.CVSAttributeColumn': {'bases': ['uganda_common.reports.XFormAttributeColumn'],
                                                                            'constructor': [],
                                                                            'docstring': '',
                                                                            'methods': [('get_title',
                                                                                         [],
                                                                                         '')],
                                                                            'properties': []},
             'mtrack_project.rapidsms_cvs.cvs.reports.CVSSubmissionColumn': {'bases': ['uganda_common.reports.XFormSubmissionColumn'],
                                                                             'constructor': [],
                                                                             'docstring': '',
                                                                             'methods': [('get_title',
                                                                                          [],
                                                                                          '')],
                                                                             'properties': []},
             'mtrack_project.rapidsms_cvs.cvs.reports.DeathReport': {'bases': ['uganda_common.views.XFormReport'],
                                                                     'constructor': [],
                                                                     'docstring': '',
                                                                     'methods': [],
                                                                     'properties': ['total',
                                                                                    'boys',
                                                                                    'girls',
                                                                                    'under_28days',
                                                                                    'upto_3months',
                                                                                    'upto_12months',
                                                                                    'upto_5years']},
             'mtrack_project.rapidsms_cvs.cvs.reports.EpiReport': {'bases': ['uganda_common.views.XFormReport'],
                                                                   'constructor': [],
                                                                   'docstring': '',
                                                                   'methods': [],
                                                                   'properties': ['total',
                                                                                  'bd',
                                                                                  'ma',
                                                                                  'tb',
                                                                                  'ab',
                                                                                  'af',
                                                                                  'mg',
                                                                                  'me',
                                                                                  'ch',
                                                                                  'gw',
                                                                                  'nt',
                                                                                  'yf',
                                                                                  'pl',
                                                                                  'ra',
                                                                                  'vf',
                                                                                  'ei']},
             'mtrack_project.rapidsms_cvs.cvs.reports.HomeReport': {'bases': ['uganda_common.views.XFormReport'],
                                                                    'constructor': [],
                                                                    'docstring': '',
                                                                    'methods': [('get_top_columns',
                                                                                 [],
                                                                                 '')],
                                                                    'properties': ['total',
                                                                                   'to',
                                                                                   'wa',
                                                                                   'wa_percent',
                                                                                   'ha',
                                                                                   'ha_percent',
                                                                                   'la',
                                                                                   'la_percent',
                                                                                   'it',
                                                                                   'it_percent']},
             'mtrack_project.rapidsms_cvs.cvs.reports.MTrackBirthReport': {'bases': ['uganda_common.views.XFormReport'],
                                                                           'constructor': [],
                                                                           'docstring': '',
                                                                           'methods': [('get_top_columns',
                                                                                        [],
                                                                                        '')],
                                                                           'properties': ['at_home_filter',
                                                                                          'at_facility_filter',
                                                                                          'total',
                                                                                          'percent_home',
                                                                                          'deaths_total',
                                                                                          'opd_att',
                                                                                          'opd_nat',
                                                                                          'opd_md',
                                                                                          'opd_pd']},
             'mtrack_project.rapidsms_cvs.cvs.reports.MTrackEpiReport': {'bases': ['uganda_common.views.XFormReport'],
                                                                         'constructor': [],
                                                                         'docstring': '',
                                                                         'methods': [('get_top_columns',
                                                                                      [],
                                                                                      '')],
                                                                         'properties': ['ma_vht',
                                                                                        'tb_vht',
                                                                                        'pneumonia',
                                                                                        'bd_vht',
                                                                                        'ma_hc',
                                                                                        'dy_hc',
                                                                                        'sa_hc',
                                                                                        'ab_hc']},
             'mtrack_project.rapidsms_cvs.cvs.reports.MTrackMalariaReport': {'bases': ['uganda_common.views.XFormReport'],
                                                                             'constructor': [],
                                                                             'docstring': '',
                                                                             'methods': [('get_top_columns',
                                                                                          [],
                                                                                          '')],
                                                                             'properties': ['test_sm',
                                                                                            'test_rdt',
                                                                                            'test_rdp',
                                                                                            'test_mtc',
                                                                                            'test_mtp',
                                                                                            'test_pcc',
                                                                                            'test_pcy',
                                                                                            'treat_rdn',
                                                                                            'treat_rdp',
                                                                                            'treat_mtn',
                                                                                            'treat_mtp',
                                                                                            'treat_tin',
                                                                                            'treat_tic',
                                                                                            'treat_tiy',
                                                                                            'treat_tia']},
             'mtrack_project.rapidsms_cvs.cvs.reports.MTrackNutritionReport': {'bases': ['uganda_common.views.XFormReport'],
                                                                               'constructor': [],
                                                                               'docstring': '',
                                                                               'methods': [('get_top_columns',
                                                                                            [],
                                                                                            '')],
                                                                               'properties': ['red',
                                                                                              'yellow',
                                                                                              'green',
                                                                                              'oe',
                                                                                              'new_adm',
                                                                                              'tot_adm',
                                                                                              'defaults',
                                                                                              'deaths']},
             'mtrack_project.rapidsms_cvs.cvs.reports.MTrackReport': {'bases': ['uganda_common.views.XFormReport'],
                                                                      'constructor': [],
                                                                      'docstring': '',
                                                                      'methods': [('get_top_columns',
                                                                                   [],
                                                                                   ''),
                                                                                  ('get_default_column',
                                                                                   [],
                                                                                   '')],
                                                                      'properties': ['template_name',
                                                                                     'ma_hc',
                                                                                     'ma_vht',
                                                                                     'bd_hc',
                                                                                     'bd_vht',
                                                                                     'opd_att',
                                                                                     'opd_md',
                                                                                     'opd_pd',
                                                                                     'com_muac_red',
                                                                                     'opd_nat',
                                                                                     'active_reporters']},
             'mtrack_project.rapidsms_cvs.cvs.reports.MainReport': {'bases': ['uganda_common.views.XFormReport'],
                                                                    'constructor': [],
                                                                    'docstring': '',
                                                                    'methods': [('get_top_columns',
                                                                                 [],
                                                                                 '')],
                                                                    'properties': ['muac',
                                                                                   'ma',
                                                                                   'tb',
                                                                                   'bd',
                                                                                   'birth',
                                                                                   'death',
                                                                                   'home',
                                                                                   'reporters',
                                                                                   'active_reporters']},
             'mtrack_project.rapidsms_cvs.cvs.reports.MuacReport': {'bases': ['uganda_common.views.XFormReport'],
                                                                    'constructor': [],
                                                                    'docstring': '',
                                                                    'methods': [],
                                                                    'properties': ['total',
                                                                                   'green',
                                                                                   'green_oe',
                                                                                   'yellow',
                                                                                   'red',
                                                                                   'red_oe']},
             'mtrack_project.rapidsms_cvs.cvs.reports.RegisteredReportersColumn': {'bases': ['generic.reporting.reports.Column'],
                                                                                   'constructor': ["roles=['VHT', 'PVHT']",
                                                                                                   '**kwargs'],
                                                                                   'docstring': '',
                                                                                   'methods': [('add_to_report',
                                                                                                ['report',
                                                                                                 'key',
                                                                                                 'dictionary'],
                                                                                                ''),
                                                                                               ('get_chart',
                                                                                                [],
                                                                                                ''),
                                                                                               ('get_view_function',
                                                                                                [],
                                                                                                '')],
                                                                                   'properties': ['roles']},
             'mtrack_project.rapidsms_cvs.cvs.sorters.LatestFacilitySubmissionSorter': {'bases': ['generic.sorters.Sorter'],
                                                                                        'constructor': [],
                                                                                        'docstring': '',
                                                                                        'methods': [('sort',
                                                                                                     ['column',
                                                                                                      'object_list',
                                                                                                      'ascending=True'],
                                                                                                     '')],
                                                                                        'properties': []},
             'mtrack_project.rapidsms_cvs.cvs.sorters.LatestJoinedSorter': {'bases': ['generic.sorters.Sorter'],
                                                                            'constructor': [],
                                                                            'docstring': '',
                                                                            'methods': [('sort',
                                                                                         ['column',
                                                                                          'object_list',
                                                                                          'ascending=True'],
                                                                                         '')],
                                                                            'properties': []},
             'mtrack_project.rapidsms_cvs.cvs.sorters.LatestSubmissionSorter': {'bases': ['generic.sorters.Sorter'],
                                                                                'constructor': [],
                                                                                'docstring': '',
                                                                                'methods': [('sort',
                                                                                             ['column',
                                                                                              'object_list',
                                                                                              'ascending=True'],
                                                                                             '')],
                                                                                'properties': []},
             'mtrack_project.rapidsms_cvs.cvs.sorters.SubmissionValueSorter': {'bases': ['generic.sorters.Sorter'],
                                                                               'constructor': [],
                                                                               'docstring': '',
                                                                               'methods': [('sort',
                                                                                            ['column',
                                                                                             'object_list',
                                                                                             'ascending=True'],
                                                                                            '')],
                                                                               'properties': []},
             'mtrack_project.rapidsms_cvs.cvs.sorters.TotalFacilitySubmissionSorter': {'bases': ['generic.sorters.Sorter'],
                                                                                       'constructor': [],
                                                                                       'docstring': '',
                                                                                       'methods': [('sort',
                                                                                                    ['column',
                                                                                                     'object_list',
                                                                                                     'ascending=True'],
                                                                                                    '')],
                                                                                       'properties': []},
             'mtrack_project.rapidsms_cvs.cvs.templatetags.stats_extras.DateRangeNode': {'bases': ['django.template.Node'],
                                                                                         'constructor': ['min_date',
                                                                                                         'max_date',
                                                                                                         'start_date',
                                                                                                         'end_date'],
                                                                                         'docstring': '',
                                                                                         'methods': [('render',
                                                                                                      ['context'],
                                                                                                      '')],
                                                                                         'properties': ['end_date',
                                                                                                        'start_date',
                                                                                                        'min_date',
                                                                                                        'max_date']},
             'mtrack_project.rapidsms_cvs.cvs.tests.all.ModelTest': {'bases': ['django.test.TestCase'],
                                                                     'constructor': [],
                                                                     'docstring': '',
                                                                     'methods': [('setUp',
                                                                                  [],
                                                                                  ''),
                                                                                 ('fakeErrorMessage',
                                                                                  ['message',
                                                                                   'connection=None'],
                                                                                  ''),
                                                                                 ('incomingResponse',
                                                                                  ['message',
                                                                                   'expected_response',
                                                                                   'connection=None'],
                                                                                  ''),
                                                                                 ('testBasicSubmission',
                                                                                  [],
                                                                                  ''),
                                                                                 ('testBirth',
                                                                                  [],
                                                                                  ''),
                                                                                 ('testDeath',
                                                                                  [],
                                                                                  '\n        Old-style death reports are no longer used (this xform is inactive\n        '),
                                                                                 ('testMuac',
                                                                                  [],
                                                                                  ''),
                                                                                 ('testEpi',
                                                                                  [],
                                                                                  ''),
                                                                                 ('testHome',
                                                                                  [],
                                                                                  ''),
                                                                                 ('testCom',
                                                                                  [],
                                                                                  ''),
                                                                                 ('testMal',
                                                                                  [],
                                                                                  ''),
                                                                                 ('testRutf',
                                                                                  [],
                                                                                  ''),
                                                                                 ('testACT',
                                                                                  [],
                                                                                  ''),
                                                                                 ('testReport',
                                                                                  [],
                                                                                  ''),
                                                                                 ('testTimeDeltas',
                                                                                  [],
                                                                                  ''),
                                                                                 ('testValidity',
                                                                                  [],
                                                                                  ''),
                                                                                 ('testPatientMatching',
                                                                                  [],
                                                                                  ''),
                                                                                 ('testRegister',
                                                                                  [],
                                                                                  ''),
                                                                                 ('testVHTRegistration',
                                                                                  [],
                                                                                  ''),
                                                                                 ('testDoubleRegister',
                                                                                  [],
                                                                                  ''),
                                                                                 ('testResponses',
                                                                                  [],
                                                                                  ''),
                                                                                 ('testErrors',
                                                                                  [],
                                                                                  '')],
                                                                     'properties': []},
             'mtrack_project.rapidsms_cvs.cvs.tests.autoreg.AutoRegTest': {'bases': ['django.test.TestCase'],
                                                                           'constructor': [],
                                                                           'docstring': '',
                                                                           'methods': [('fake_incoming',
                                                                                        ['message',
                                                                                         'connection=None'],
                                                                                        ''),
                                                                                       ('spoof_incoming_obj',
                                                                                        ['message',
                                                                                         'connection=None'],
                                                                                        ''),
                                                                                       ('assertResponseEquals',
                                                                                        ['message',
                                                                                         'expected_response',
                                                                                         'connection=None'],
                                                                                        ''),
                                                                                       ('fake_submission',
                                                                                        ['connection=None'],
                                                                                        ''),
                                                                                       ('fake_error_submission',
                                                                                        ['message',
                                                                                         'connection=None'],
                                                                                        ''),
                                                                                       ('setUp',
                                                                                        [],
                                                                                        ''),
                                                                                       ('fake_script_dialog',
                                                                                        ['script_prog',
                                                                                         'connection',
                                                                                         'responses',
                                                                                         'emit_signal=True'],
                                                                                        ''),
                                                                                       ('testBasicAutoReg',
                                                                                        [],
                                                                                        ''),
                                                                                       ('testBadAutoReg',
                                                                                        [],
                                                                                        '\n        Crummy answers\n        '),
                                                                                       ('testMultipleRegistrations',
                                                                                        [],
                                                                                        ''),
                                                                                       ('testQuitRejoin',
                                                                                        [],
                                                                                        ''),
                                                                                       ('testActivateAutoReg',
                                                                                        [],
                                                                                        '')],
                                                                           'properties': ['backend',
                                                                                          'connection',
                                                                                          'root_node',
                                                                                          'kampala_district',
                                                                                          'makindye_village',
                                                                                          'ntinda_village',
                                                                                          'hcii',
                                                                                          'mulago_healthfacility',
                                                                                          'mengo_healthfacility']},
             'mtrack_project.rapidsms_cvs.cvs.tests.reports.ReportsTest': {'bases': ['django.test.TestCase'],
                                                                           'constructor': [],
                                                                           'docstring': '',
                                                                           'methods': [('fake_incoming',
                                                                                        ['message',
                                                                                         'connection=None'],
                                                                                        ''),
                                                                                       ('spoof_incoming_obj',
                                                                                        ['message',
                                                                                         'connection=None'],
                                                                                        ''),
                                                                                       ('elapseTime',
                                                                                        ['submission',
                                                                                         'seconds'],
                                                                                        ''),
                                                                                       ('setUp',
                                                                                        [],
                                                                                        ''),
                                                                                       ('testReport',
                                                                                        [],
                                                                                        ''),
                                                                                       ('testReportNoMessageInPreviousMonth',
                                                                                        [],
                                                                                        ''),
                                                                                       ('testReportWithErrors',
                                                                                        [],
                                                                                        '')],
                                                                           'properties': ['group',
                                                                                          'hp_group',
                                                                                          'backend',
                                                                                          'connection']},
             'mtrack_project.rapidsms_cvs.cvs.utils.ExcelResponse': {'bases': ['django.http.HttpResponse'],
                                                                     'constructor': ['data',
                                                                                     "output_name='excel_report'",
                                                                                     'headers=None',
                                                                                     'force_csv=False',
                                                                                     "encoding='utf8'"],
                                                                     'docstring': '',
                                                                     'methods': [],
                                                                     'properties': []},
             'mtrack_project.rapidsms_cvs.cvs.views.chart.ActiveReportersChartView': {'bases': ['uganda_common.views.XFormChartView'],
                                                                                      'constructor': [],
                                                                                      'docstring': '',
                                                                                      'methods': [('get_data',
                                                                                                   [],
                                                                                                   '')],
                                                                                      'properties': ['chart_title',
                                                                                                     'roles',
                                                                                                     'period']},
             'mtrack_project.rapidsms_cvs.cvs.views.map.JsonResponse': {'bases': ['django.http.HttpResponse'],
                                                                        'constructor': ['obj'],
                                                                        'docstring': ' return json content type   ',
                                                                        'methods': [('serialize',
                                                                                     [],
                                                                                     '')],
                                                                        'properties': ['original_obj']},
             'mtrack_project.rapidsms_logistics.logistics.admin.ContactRoleAdmin': {'bases': ['django.contrib.admin.ModelAdmin'],
                                                                                    'constructor': [],
                                                                                    'docstring': '',
                                                                                    'methods': [],
                                                                                    'properties': ['model']},
             'mtrack_project.rapidsms_logistics.logistics.admin.LogisticsContactAdmin': {'bases': ['django.contrib.admin.ModelAdmin'],
                                                                                         'constructor': [],
                                                                                         'docstring': '',
                                                                                         'methods': [],
                                                                                         'properties': ['model',
                                                                                                        'list_display']},
             'mtrack_project.rapidsms_logistics.logistics.admin.LogisticsProfileAdmin': {'bases': ['django.contrib.admin.ModelAdmin'],
                                                                                         'constructor': [],
                                                                                         'docstring': '',
                                                                                         'methods': [],
                                                                                         'properties': ['model']},
             'mtrack_project.rapidsms_logistics.logistics.admin.ProductAdmin': {'bases': ['django.contrib.admin.ModelAdmin'],
                                                                                'constructor': [],
                                                                                'docstring': '',
                                                                                'methods': [],
                                                                                'properties': ['model',
                                                                                               'list_display']},
             'mtrack_project.rapidsms_logistics.logistics.admin.ProductReportAdmin': {'bases': ['django.contrib.admin.ModelAdmin'],
                                                                                      'constructor': [],
                                                                                      'docstring': '',
                                                                                      'methods': [],
                                                                                      'properties': ['model']},
             'mtrack_project.rapidsms_logistics.logistics.admin.ProductReportTypeAdmin': {'bases': ['django.contrib.admin.ModelAdmin'],
                                                                                          'constructor': [],
                                                                                          'docstring': '',
                                                                                          'methods': [],
                                                                                          'properties': ['model']},
             'mtrack_project.rapidsms_logistics.logistics.admin.ProductStockAdmin': {'bases': ['django.contrib.admin.ModelAdmin'],
                                                                                     'constructor': [],
                                                                                     'docstring': '',
                                                                                     'methods': [],
                                                                                     'properties': ['model']},
             'mtrack_project.rapidsms_logistics.logistics.admin.ProductTypeAdmin': {'bases': ['django.contrib.admin.ModelAdmin'],
                                                                                    'constructor': [],
                                                                                    'docstring': '',
                                                                                    'methods': [],
                                                                                    'properties': ['model']},
             'mtrack_project.rapidsms_logistics.logistics.admin.RequisitionReportAdmin': {'bases': ['django.contrib.admin.ModelAdmin'],
                                                                                          'constructor': [],
                                                                                          'docstring': '',
                                                                                          'methods': [],
                                                                                          'properties': ['model']},
             'mtrack_project.rapidsms_logistics.logistics.admin.ResponsibilityAdmin': {'bases': ['django.contrib.admin.ModelAdmin'],
                                                                                       'constructor': [],
                                                                                       'docstring': '',
                                                                                       'methods': [],
                                                                                       'properties': ['model']},
             'mtrack_project.rapidsms_logistics.logistics.admin.StockRequestAdmin': {'bases': ['django.contrib.admin.ModelAdmin'],
                                                                                     'constructor': [],
                                                                                     'docstring': '',
                                                                                     'methods': [],
                                                                                     'properties': ['model',
                                                                                                    'list_display']},
             'mtrack_project.rapidsms_logistics.logistics.admin.StockTransactionAdmin': {'bases': ['django.contrib.admin.ModelAdmin'],
                                                                                         'constructor': [],
                                                                                         'docstring': '',
                                                                                         'methods': [],
                                                                                         'properties': ['model']},
             'mtrack_project.rapidsms_logistics.logistics.admin.SupplyPointAdmin': {'bases': ['django.contrib.admin.ModelAdmin'],
                                                                                    'constructor': [],
                                                                                    'docstring': '',
                                                                                    'methods': [],
                                                                                    'properties': ['list_display',
                                                                                                   'model']},
             'mtrack_project.rapidsms_logistics.logistics.admin.SupplyPointTypeAdmin': {'bases': ['django.contrib.admin.ModelAdmin'],
                                                                                        'constructor': [],
                                                                                        'docstring': '',
                                                                                        'methods': [],
                                                                                        'properties': ['model']},
             'mtrack_project.rapidsms_logistics.logistics.alerts.FacilitiesWithoutRemindersAlert': {'bases': ['alerts.Alert'],
                                                                                                    'constructor': ['supply_point'],
                                                                                                    'docstring': '',
                                                                                                    'methods': [('_get_text',
                                                                                                                 [],
                                                                                                                 '')],
                                                                                                    'properties': ['_supply_point']},
             'mtrack_project.rapidsms_logistics.logistics.alerts.FacilitiesWithoutReportersAlert': {'bases': ['alerts.Alert'],
                                                                                                    'constructor': ['supply_point'],
                                                                                                    'docstring': '',
                                                                                                    'methods': [('_get_text',
                                                                                                                 [],
                                                                                                                 '')],
                                                                                                    'properties': ['_supply_point']},
             'mtrack_project.rapidsms_logistics.logistics.alerts.NonReportingFacilityAlert': {'bases': ['alerts.Alert'],
                                                                                              'constructor': ['facility'],
                                                                                              'docstring': '',
                                                                                              'methods': [('_get_text',
                                                                                                           [],
                                                                                                           '')],
                                                                                              'properties': ['_facility']},
             'mtrack_project.rapidsms_logistics.logistics.app.App': {'bases': ['rapidsms.apps.base.AppBase'],
                                                                     'constructor': [],
                                                                     'docstring': '',
                                                                     'methods': [('start',
                                                                                  [],
                                                                                  'Configure your app in the start phase.'),
                                                                                 ('parse',
                                                                                  ['message'],
                                                                                  'Parse and annotate messages in the parse phase.'),
                                                                                 ('_check_preconditions',
                                                                                  ['message'],
                                                                                  '\n        Handles base logic of whether this message should be processed.\n        Returns a tuple, the first value is whether the operation should\n        proceed with the normal handle phase, the second being the return \n        code. If the first argument is True, the value of the second argument \n        is not defined.\n        '),
                                                                                 ('_send_error_response',
                                                                                  ['message',
                                                                                   'stock_report'],
                                                                                  ''),
                                                                                 ('_get_responses',
                                                                                  ['stock_report'],
                                                                                  '\n        Gets responses to a SOH message, in the form of a response to the \n        sender, a response to the supervisor, and kwargs to populate them.\n        '),
                                                                                 ('_send_responses',
                                                                                  ['message',
                                                                                   'stock_report'],
                                                                                  ''),
                                                                                 ('handle',
                                                                                  ['message'],
                                                                                  'Add your main application logic in the handle phase.'),
                                                                                 ('default',
                                                                                  ['message'],
                                                                                  " There's probably a better way to do this, but for now,\n        this is what the folks in the field want \n        "),
                                                                                 ('cleanup',
                                                                                  ['message'],
                                                                                  'Perform any clean up after all handlers have run in the\n           cleanup phase.'),
                                                                                 ('outgoing',
                                                                                  ['message'],
                                                                                  'Handle outgoing message notifications.'),
                                                                                 ('stop',
                                                                                  [],
                                                                                  'Perform global app cleanup when the application is stopped.'),
                                                                                 ('_should_handle',
                                                                                  ['message'],
                                                                                  '\n        Tests whether this message is one which should go through the handle phase\n        i.e. if it begins with soh or one of the product codes\n        '),
                                                                                 ('_clean_message',
                                                                                  ['text'],
                                                                                  '')],
                                                                     'properties': []},
             'mtrack_project.rapidsms_logistics.logistics.config.Groups': {'bases': ['object'],
                                                                           'constructor': [],
                                                                           'docstring': '',
                                                                           'methods': [],
                                                                           'properties': ['EPT',
                                                                                          'EM',
                                                                                          'GROUPS']},
             'mtrack_project.rapidsms_logistics.logistics.config.Messages': {'bases': ['object'],
                                                                             'constructor': [],
                                                                             'docstring': '',
                                                                             'methods': [],
                                                                             'properties': ['HSA_HELP',
                                                                                            'MANAGER_HELP',
                                                                                            'LEAVE_NOT_REGISTERED',
                                                                                            'LEAVE_CONFIRM',
                                                                                            'SOH_HELP_MESSAGE',
                                                                                            'SUPERVISOR_SOH_NOTIFICATION',
                                                                                            'SOH_ORDER_CONFIRM',
                                                                                            'RECEIPT_CONFIRM',
                                                                                            'RECEIPT_FROM_CONFIRM',
                                                                                            'ORDERREADY_HELP_MESSAGE',
                                                                                            'APPROVAL_RESPONSE',
                                                                                            'APPROVAL_NOTICE',
                                                                                            'STOCKOUT_HELP',
                                                                                            'STOCKOUT_RESPONSE',
                                                                                            'STOCKOUT_NOTICE',
                                                                                            'SUPERVISOR_STOCKOUT_NOTIFICATION',
                                                                                            'EMERGENCY_HELP',
                                                                                            'SUPERVISOR_EMERGENCY_SOH_NOTIFICATION',
                                                                                            'TRANSFER_HELP_MESSAGE',
                                                                                            'TRANSFER_RESPONSE',
                                                                                            'TRANSFER_CONFIRM',
                                                                                            'NO_PENDING_TRANSFERS',
                                                                                            'CONFIRM_RESPONSE',
                                                                                            'REPORT_HELP',
                                                                                            'BAD_REPORT_KEYWORD',
                                                                                            'REPORT_SOH_RESPONSE',
                                                                                            'REPORT_RECEIPT_RESPONSE',
                                                                                            'ALREADY_REGISTERED',
                                                                                            'UNKNOWN_LOCATION',
                                                                                            'REGISTRATION_REQUIRED_MESSAGE',
                                                                                            'UNSUPPORTED_OPERATION',
                                                                                            'UNKNOWN_HSA',
                                                                                            'UNKNOWN_ROLE',
                                                                                            'NO_SUPPLY_POINT_MESSAGE',
                                                                                            'GENERIC_ERROR',
                                                                                            'NO_IN_CHARGE',
                                                                                            'REGISTRATION_CONFIRM',
                                                                                            'ADD_HELP_MESSAGE',
                                                                                            'REMOVE_HELP_MESSAGE',
                                                                                            'ADD_FAILURE_MESSAGE',
                                                                                            'REMOVE_FAILURE_MESSAGE',
                                                                                            'ADD_SUCCESS_MESSAGE',
                                                                                            'REMOVE_SUCCESS_MESSAGE',
                                                                                            'UNKNOWN_CODE',
                                                                                            'HSA_NAG_FIRST',
                                                                                            'HSA_NAG_SECOND',
                                                                                            'HSA_NAG_THIRD',
                                                                                            'HSA_SUPERVISOR_NAG',
                                                                                            'PARTIAL_FILL_HELP',
                                                                                            'PARTIAL_FILL_RESPONSE',
                                                                                            'PARTIAL_FILL_NOTICE',
                                                                                            'SUPERVISOR_TITLE',
                                                                                            'GET_HELP_MESSAGE',
                                                                                            'NO_CODE_ERROR',
                                                                                            'NO_QUANTITY_ERROR',
                                                                                            'REGISTER_MESSAGE']},
             'mtrack_project.rapidsms_logistics.logistics.config.Operations': {'bases': ['object'],
                                                                               'constructor': [],
                                                                               'docstring': '',
                                                                               'methods': [],
                                                                               'properties': ['FILL_ORDER',
                                                                                              'MAKE_TRANSFER',
                                                                                              'CONFIRM_TRANSFER',
                                                                                              'REPORT_FOR_OTHERS',
                                                                                              'REPORT_STOCK',
                                                                                              'REPORT_RECEIPT',
                                                                                              'ADD_PRODUCT',
                                                                                              'REMOVE_PRODUCT']},
             'mtrack_project.rapidsms_logistics.logistics.config.Roles': {'bases': ['object'],
                                                                          'constructor': [],
                                                                          'docstring': '\n    Roles go here\n    ',
                                                                          'methods': [],
                                                                          'properties': ['HSA',
                                                                                         'SENIOR_HSA',
                                                                                         'IN_CHARGE',
                                                                                         'CLUSTER_SUPERVISOR',
                                                                                         'DISTRICT_SUPERVISOR',
                                                                                         'DISTRICT_PHARMACIST',
                                                                                         'IMCI_COORDINATOR',
                                                                                         'ALL_ROLES']},
             'mtrack_project.rapidsms_logistics.logistics.const.Reports': {'bases': ['object'],
                                                                           'constructor': [],
                                                                           'docstring': '\n    Types of reports\n    ',
                                                                           'methods': [],
                                                                           'properties': ['SOH',
                                                                                          'REC',
                                                                                          'GIVE',
                                                                                          'EMERGENCY_SOH',
                                                                                          'ALL_REPORTS']},
             'mtrack_project.rapidsms_logistics.logistics.errors.UnknownCommodityCodeError': {'bases': ['ValueError'],
                                                                                              'constructor': [],
                                                                                              'docstring': '',
                                                                                              'methods': [],
                                                                                              'properties': []},
             'mtrack_project.rapidsms_logistics.logistics.errors.UnknownFacilityCodeError': {'bases': ['ValueError'],
                                                                                             'constructor': [],
                                                                                             'docstring': '',
                                                                                             'methods': [],
                                                                                             'properties': []},
             'mtrack_project.rapidsms_logistics.logistics.errors.UnknownLocationCodeError': {'bases': ['ValueError'],
                                                                                             'constructor': [],
                                                                                             'docstring': '',
                                                                                             'methods': [],
                                                                                             'properties': []},
             'mtrack_project.rapidsms_logistics.logistics.extensions.locations.location.Location': {'bases': ['django.db.models.Model'],
                                                                                                    'constructor': [],
                                                                                                    'docstring': '\n    Location - the main concept of a location.  Currently covers MOHSW, Regions, Districts and Facilities.\n    This could/should be broken out into subclasses.\n    ',
                                                                                                    'methods': [('set_parent',
                                                                                                                 ['parent'],
                                                                                                                 ''),
                                                                                                                ('get_children',
                                                                                                                 [],
                                                                                                                 ' This signature gets overriden by mptt when mptt is used '),
                                                                                                                ('get_descendents',
                                                                                                                 ['include_self=False'],
                                                                                                                 ' This signature gets overriden by mptt when mptt is used\n        It must return a queryset\n        '),
                                                                                                                ('peers',
                                                                                                                 [],
                                                                                                                 ''),
                                                                                                                ('child_facilities',
                                                                                                                 [],
                                                                                                                 ''),
                                                                                                                ('facilities',
                                                                                                                 [],
                                                                                                                 ''),
                                                                                                                ('all_facilities',
                                                                                                                 [],
                                                                                                                 ''),
                                                                                                                ('all_child_facilities',
                                                                                                                 [],
                                                                                                                 ''),
                                                                                                                ('stockout_count',
                                                                                                                 ['product=None',
                                                                                                                  'producttype=None'],
                                                                                                                 ''),
                                                                                                                ('emergency_stock_count',
                                                                                                                 ['product=None',
                                                                                                                  'producttype=None'],
                                                                                                                 ' This indicates all stock below reorder levels,\n            including all stock below emergency supply levels\n        '),
                                                                                                                ('low_stock_count',
                                                                                                                 ['product=None',
                                                                                                                  'producttype=None'],
                                                                                                                 ' This indicates all stock below reorder levels,\n            including all stock below emergency supply levels\n        '),
                                                                                                                ('emergency_plus_low',
                                                                                                                 ['product=None',
                                                                                                                  'producttype=None'],
                                                                                                                 ' This indicates all stock below reorder levels,\n            including all stock below emergency supply levels\n        '),
                                                                                                                ('good_supply_count',
                                                                                                                 ['product=None',
                                                                                                                  'producttype=None'],
                                                                                                                 ' This indicates all stock below reorder levels,\n            including all stock below emergency supply levels\n        '),
                                                                                                                ('overstocked_count',
                                                                                                                 ['product=None',
                                                                                                                  'producttype=None'],
                                                                                                                 ''),
                                                                                                                ('consumption',
                                                                                                                 ['product=None',
                                                                                                                  'producttype=None'],
                                                                                                                 ''),
                                                                                                                ('deprecate',
                                                                                                                 ['new_code=None'],
                                                                                                                 '\n        Deprecates a location, by changing the code and deactivating it.\n        ')],
                                                                                                    'properties': ['code',
                                                                                                                   'is_active',
                                                                                                                   'tree_parent',
                                                                                                                   'parent']},
             'mtrack_project.rapidsms_logistics.logistics.extensions.rapidsms.contact.Contact': {'bases': ['django.db.models.Model'],
                                                                                                 'constructor': [],
                                                                                                 'docstring': '',
                                                                                                 'methods': [('__unicode__',
                                                                                                              [],
                                                                                                              '')],
                                                                                                 'properties': ['role',
                                                                                                                'supply_point',
                                                                                                                'needs_reminders',
                                                                                                                'commodities',
                                                                                                                'is_active',
                                                                                                                'is_approved',
                                                                                                                'phone',
                                                                                                                'last_message']},
             'mtrack_project.rapidsms_logistics.logistics.forms.CommodityForm': {'bases': ['django.forms.ModelForm'],
                                                                                 'constructor': [],
                                                                                 'docstring': '',
                                                                                 'methods': [],
                                                                                 'properties': []},
             'mtrack_project.rapidsms_logistics.logistics.forms.FacilityForm': {'bases': ['django.forms.ModelForm'],
                                                                                'constructor': ['*args',
                                                                                                '**kwargs'],
                                                                                'docstring': '',
                                                                                'methods': [('save',
                                                                                             ['*args',
                                                                                              '**kwargs'],
                                                                                             '')],
                                                                                'properties': ['commodities',
                                                                                               'latitude',
                                                                                               'longitude']},
             'mtrack_project.rapidsms_logistics.logistics.gviz_api.DataTable': {'bases': ['object'],
                                                                                'constructor': ['table_description',
                                                                                                'data=None',
                                                                                                'custom_properties=None'],
                                                                                'docstring': "Wraps the data to convert to a Google Visualization API DataTable.\n\n  Create this object, populate it with data, then call one of the ToJS...\n  methods to return a string representation of the data in the format described.\n\n  You can clear all data from the object to reuse it, but you cannot clear\n  individual cells, rows, or columns. You also cannot modify the table schema\n  specified in the class constructor.\n\n  You can add new data one or more rows at a time. All data added to an\n  instantiated DataTable must conform to the schema passed in to __init__().\n\n  You can reorder the columns in the output table, and also specify row sorting\n  order by column. The default column order is according to the original\n  table_description parameter. Default row sort order is ascending, by column\n  1 values. For a dictionary, we sort the keys for order.\n\n  The data and the table_description are closely tied, as described here:\n\n  The table schema is defined in the class constructor's table_description\n  parameter. The user defines each column using a tuple of\n  (id[, type[, label[, custom_properties]]]). The default value for type is\n  string, label is the same as ID if not specified, and custom properties is\n  an empty dictionary if not specified.\n\n  table_description is a dictionary or list, containing one or more column\n  descriptor tuples, nested dictionaries, and lists. Each dictionary key, list\n  element, or dictionary element must eventually be defined as\n  a column description tuple. Here's an example of a dictionary where the key\n  is a tuple, and the value is a list of two tuples:\n    {('a', 'number'): [('b', 'number'), ('c', 'string')]}\n\n  This flexibility in data entry enables you to build and manipulate your data\n  in a Python structure that makes sense for your program.\n\n  Add data to the table using the same nested design as the table's\n  table_description, replacing column descriptor tuples with cell data, and\n  each row is an element in the top level collection. This will be a bit\n  clearer after you look at the following examples showing the\n  table_description, matching data, and the resulting table:\n\n  Columns as list of tuples [col1, col2, col3]\n    table_description: [('a', 'number'), ('b', 'string')]\n    AppendData( [[1, 'z'], [2, 'w'], [4, 'o'], [5, 'k']] )\n    Table:\n    a  b   <--- these are column ids/labels\n    1  z\n    2  w\n    4  o\n    5  k\n\n  Dictionary of columns, where key is a column, and value is a list of\n  columns  {col1: [col2, col3]}\n    table_description: {('a', 'number'): [('b', 'number'), ('c', 'string')]}\n    AppendData( data: {1: [2, 'z'], 3: [4, 'w']}\n    Table:\n    a  b  c\n    1  2  z\n    3  4  w\n\n  Dictionary where key is a column, and the value is itself a dictionary of\n  columns {col1: {col2, col3}}\n    table_description: {('a', 'number'): {'b': 'number', 'c': 'string'}}\n    AppendData( data: {1: {'b': 2, 'c': 'z'}, 3: {'b': 4, 'c': 'w'}}\n    Table:\n    a  b  c\n    1  2  z\n    3  4  w\n  ",
                                                                                'methods': [('_EscapeValueForCsv',
                                                                                             [],
                                                                                             'Escapes the value for use in a CSV file.\n\n    Puts the string in double-quotes, and escapes any inner double-quotes by\n    doubling them.\n\n    Args:\n      v: The value to escape.\n\n    Returns:\n      The escaped values.\n    '),
                                                                                            ('_EscapeValue',
                                                                                             [],
                                                                                             'Puts the string in quotes, and escapes any inner quotes and slashes.'),
                                                                                            ('_EscapeCustomProperties',
                                                                                             [],
                                                                                             'Escapes the custom properties dictionary.'),
                                                                                            ('SingleValueToJS',
                                                                                             ['value_type',
                                                                                              'escape_func=None'],
                                                                                             'Translates a single value and type into a JS value.\n\n    Internal helper method.\n\n    Args:\n      value: The value which should be converted\n      value_type: One of "string", "number", "boolean", "date", "datetime" or\n                  "timeofday".\n      escape_func: The function to use for escaping strings.\n\n    Returns:\n      The proper JS format (as string) of the given value according to the\n      given value_type. For None, we simply return "null".\n      If a tuple is given, it should be in one of the following forms:\n        - (value, formatted value)\n        - (value, formatted value, custom properties)\n      where the formatted value is a string, and custom properties is a\n      dictionary of the custom properties for this cell.\n      To specify custom properties without specifying formatted value, one can\n      pass None as the formatted value.\n      One can also have a null-valued cell with formatted value and/or custom\n      properties by specifying None for the value.\n      This method ignores the custom properties except for checking that it is a\n      dictionary. The custom properties are handled in the ToJSon and ToJSCode\n      methods.\n      The real type of the given value is not strictly checked. For example,\n      any type can be used for string - as we simply take its str( ) and for\n      boolean value we just check "if value".\n      Examples:\n        SingleValueToJS(None, "boolean") returns "null"\n        SingleValueToJS(False, "boolean") returns "false"\n        SingleValueToJS((5, "5$"), "number") returns ("5", "\'5$\'")\n        SingleValueToJS((None, "5$"), "number") returns ("null", "\'5$\'")\n\n    Raises:\n      DataTableException: The value and type did not match in a not-recoverable\n                          way, for example given value \'abc\' for type \'number\'.\n    '),
                                                                                            ('ColumnTypeParser',
                                                                                             [],
                                                                                             "Parses a single column description. Internal helper method.\n\n    Args:\n      description: a column description in the possible formats:\n       'id'\n       ('id',)\n       ('id', 'type')\n       ('id', 'type', 'label')\n       ('id', 'type', 'label', {'custom_prop1': 'custom_val1'})\n    Returns:\n      Dictionary with the following keys: id, label, type, and\n      custom_properties where:\n        - If label not given, it equals the id.\n        - If type not given, string is used by default.\n        - If custom properties are not given, an empty dictionary is used by\n          default.\n\n    Raises:\n      DataTableException: The column description did not match the RE, or\n          unsupported type was passed.\n    "),
                                                                                            ('TableDescriptionParser',
                                                                                             ['depth=0'],
                                                                                             "Parses the table_description object for internal use.\n\n    Parses the user-submitted table description into an internal format used\n    by the Python DataTable class. Returns the flat list of parsed columns.\n\n    Args:\n      table_description: A description of the table which should comply\n                         with one of the formats described below.\n      depth: Optional. The depth of the first level in the current description.\n             Used by recursive calls to this function.\n\n    Returns:\n      List of columns, where each column represented by a dictionary with the\n      keys: id, label, type, depth, container which means the following:\n      - id: the id of the column\n      - name: The name of the column\n      - type: The datatype of the elements in this column. Allowed types are\n              described in ColumnTypeParser().\n      - depth: The depth of this column in the table description\n      - container: 'dict', 'iter' or 'scalar' for parsing the format easily.\n      - custom_properties: The custom properties for this column.\n      The returned description is flattened regardless of how it was given.\n\n    Raises:\n      DataTableException: Error in a column description or in the description\n                          structure.\n\n    Examples:\n      A column description can be of the following forms:\n       'id'\n       ('id',)\n       ('id', 'type')\n       ('id', 'type', 'label')\n       ('id', 'type', 'label', {'custom_prop1': 'custom_val1'})\n       or as a dictionary:\n       'id': 'type'\n       'id': ('type',)\n       'id': ('type', 'label')\n       'id': ('type', 'label', {'custom_prop1': 'custom_val1'})\n      If the type is not specified, we treat it as string.\n      If no specific label is given, the label is simply the id.\n      If no custom properties are given, we use an empty dictionary.\n\n      input: [('a', 'date'), ('b', 'timeofday', 'b', {'foo': 'bar'})]\n      output: [{'id': 'a', 'label': 'a', 'type': 'date',\n                'depth': 0, 'container': 'iter', 'custom_properties': {}},\n               {'id': 'b', 'label': 'b', 'type': 'timeofday',\n                'depth': 0, 'container': 'iter',\n                'custom_properties': {'foo': 'bar'}}]\n\n      input: {'a': [('b', 'number'), ('c', 'string', 'column c')]}\n      output: [{'id': 'a', 'label': 'a', 'type': 'string',\n                'depth': 0, 'container': 'dict', 'custom_properties': {}},\n               {'id': 'b', 'label': 'b', 'type': 'number',\n                'depth': 1, 'container': 'iter', 'custom_properties': {}},\n               {'id': 'c', 'label': 'column c', 'type': 'string',\n                'depth': 1, 'container': 'iter', 'custom_properties': {}}]\n\n      input:  {('a', 'number', 'column a'): { 'b': 'number', 'c': 'string'}}\n      output: [{'id': 'a', 'label': 'column a', 'type': 'number',\n                'depth': 0, 'container': 'dict', 'custom_properties': {}},\n               {'id': 'b', 'label': 'b', 'type': 'number',\n                'depth': 1, 'container': 'dict', 'custom_properties': {}},\n               {'id': 'c', 'label': 'c', 'type': 'string',\n                'depth': 1, 'container': 'dict', 'custom_properties': {}}]\n\n      input: { ('w', 'string', 'word'): ('c', 'number', 'count') }\n      output: [{'id': 'w', 'label': 'word', 'type': 'string',\n                'depth': 0, 'container': 'dict', 'custom_properties': {}},\n               {'id': 'c', 'label': 'count', 'type': 'number',\n                'depth': 1, 'container': 'scalar', 'custom_properties': {}}]\n\n      input: {'a': ('number', 'column a'), 'b': ('string', 'column b')}\n      output: [{'id': 'a', 'label': 'column a', 'type': 'number', 'depth': 0,\n               'container': 'dict', 'custom_properties': {}},\n               {'id': 'b', 'label': 'column b', 'type': 'string', 'depth': 0,\n               'container': 'dict', 'custom_properties': {}}\n\n      NOTE: there might be ambiguity in the case of a dictionary representation\n      of a single column. For example, the following description can be parsed\n      in 2 different ways: {'a': ('b', 'c')} can be thought of a single column\n      with the id 'a', of type 'b' and the label 'c', or as 2 columns: one named\n      'a', and the other named 'b' of type 'c'. We choose the first option by\n      default, and in case the second option is the right one, it is possible to\n      make the key into a tuple (i.e. {('a',): ('b', 'c')}) or add more info\n      into the tuple, thus making it look like this: {'a': ('b', 'c', 'b', {})}\n      -- second 'b' is the label, and {} is the custom properties field.\n    "),
                                                                                            ('NumberOfRows',
                                                                                             [],
                                                                                             'Returns the number of rows in the current data stored in the table.'),
                                                                                            ('SetRowsCustomProperties',
                                                                                             ['rows',
                                                                                              'custom_properties'],
                                                                                             'Sets the custom properties for given row(s).\n\n    Can accept a single row or an iterable of rows.\n    Sets the given custom properties for all specified rows.\n\n    Args:\n      rows: The row, or rows, to set the custom properties for.\n      custom_properties: A string to string dictionary of custom properties to\n      set for all rows.\n    '),
                                                                                            ('LoadData',
                                                                                             ['data',
                                                                                              'custom_properties=None'],
                                                                                             'Loads new rows to the data table, clearing existing rows.\n\n    May also set the custom_properties for the added rows. The given custom\n    properties dictionary specifies the dictionary that will be used for *all*\n    given rows.\n\n    Args:\n      data: The rows that the table will contain.\n      custom_properties: A dictionary of string to string to set as the custom\n                         properties for all rows.\n    '),
                                                                                            ('AppendData',
                                                                                             ['data',
                                                                                              'custom_properties=None'],
                                                                                             'Appends new data to the table.\n\n    Data is appended in rows. Data must comply with\n    the table schema passed in to __init__(). See SingleValueToJS() for a list\n    of acceptable data types. See the class documentation for more information\n    and examples of schema and data values.\n\n    Args:\n      data: The row to add to the table. The data must conform to the table\n            description format.\n      custom_properties: A dictionary of string to string, representing the\n                         custom properties to add to all the rows.\n\n    Raises:\n      DataTableException: The data structure does not match the description.\n    '),
                                                                                            ('_InnerAppendData',
                                                                                             ['prev_col_values',
                                                                                              'data',
                                                                                              'col_index'],
                                                                                             'Inner function to assist LoadData.'),
                                                                                            ('_PreparedData',
                                                                                             ['order_by=()'],
                                                                                             'Prepares the data for enumeration - sorting it by order_by.\n\n    Args:\n      order_by: Optional. Specifies the name of the column(s) to sort by, and\n                (optionally) which direction to sort in. Default sort direction\n                is asc. Following formats are accepted:\n                "string_col_name"  -- For a single key in default (asc) order.\n                ("string_col_name", "asc|desc") -- For a single key.\n                [("col_1","asc|desc"), ("col_2","asc|desc")] -- For more than\n                    one column, an array of tuples of (col_name, "asc|desc").\n\n    Returns:\n      The data sorted by the keys given.\n\n    Raises:\n      DataTableException: Sort direction not in \'asc\' or \'desc\'\n    '),
                                                                                            ('ToJSCode',
                                                                                             ['name',
                                                                                              'columns_order=None',
                                                                                              'order_by=()'],
                                                                                             'Writes the data table as a JS code string.\n\n    This method writes a string of JS code that can be run to\n    generate a DataTable with the specified data. Typically used for debugging\n    only.\n\n    Args:\n      name: The name of the table. The name would be used as the DataTable\'s\n            variable name in the created JS code.\n      columns_order: Optional. Specifies the order of columns in the\n                     output table. Specify a list of all column IDs in the order\n                     in which you want the table created.\n                     Note that you must list all column IDs in this parameter,\n                     if you use it.\n      order_by: Optional. Specifies the name of the column(s) to sort by.\n                Passed as is to _PreparedData.\n\n    Returns:\n      A string of JS code that, when run, generates a DataTable with the given\n      name and the data stored in the DataTable object.\n      Example result:\n        "var tab1 = new google.visualization.DataTable();\n         tab1.addColumn(\'string\', \'a\', \'a\');\n         tab1.addColumn(\'number\', \'b\', \'b\');\n         tab1.addColumn(\'boolean\', \'c\', \'c\');\n         tab1.addRows(10);\n         tab1.setCell(0, 0, \'a\');\n         tab1.setCell(0, 1, 1, null, {\'foo\': \'bar\'});\n         tab1.setCell(0, 2, true);\n         ...\n         tab1.setCell(9, 0, \'c\');\n         tab1.setCell(9, 1, 3, \'3$\');\n         tab1.setCell(9, 2, false);"\n\n    Raises:\n      DataTableException: The data does not match the type.\n    '),
                                                                                            ('ToHtml',
                                                                                             ['columns_order=None',
                                                                                              'order_by=()'],
                                                                                             'Writes the data table as an HTML table code string.\n\n    Args:\n      columns_order: Optional. Specifies the order of columns in the\n                     output table. Specify a list of all column IDs in the order\n                     in which you want the table created.\n                     Note that you must list all column IDs in this parameter,\n                     if you use it.\n      order_by: Optional. Specifies the name of the column(s) to sort by.\n                Passed as is to _PreparedData.\n\n    Returns:\n      An HTML table code string.\n      Example result (the result is without the newlines):\n       <html><body><table border=\'1\'>\n        <thead><tr><th>a</th><th>b</th><th>c</th></tr></thead>\n        <tbody>\n         <tr><td>1</td><td>"z"</td><td>2</td></tr>\n         <tr><td>"3$"</td><td>"w"</td><td></td></tr>\n        </tbody>\n       </table></body></html>\n\n    Raises:\n      DataTableException: The data does not match the type.\n    '),
                                                                                            ('ToCsv',
                                                                                             ['columns_order=None',
                                                                                              'order_by=()',
                                                                                              "separator=', '"],
                                                                                             "Writes the data table as a CSV string.\n\n    Args:\n      columns_order: Optional. Specifies the order of columns in the\n                     output table. Specify a list of all column IDs in the order\n                     in which you want the table created.\n                     Note that you must list all column IDs in this parameter,\n                     if you use it.\n      order_by: Optional. Specifies the name of the column(s) to sort by.\n                Passed as is to _PreparedData.\n      separator: Optional. The separator to use between the values.\n\n    Returns:\n      A CSV string representing the table.\n      Example result:\n       'a', 'b', 'c'\n       1, 'z', 2\n       3, 'w', ''\n\n    Raises:\n      DataTableException: The data does not match the type.\n    "),
                                                                                            ('ToTsvExcel',
                                                                                             ['columns_order=None',
                                                                                              'order_by=()'],
                                                                                             'Returns a file in tab-separated-format readable by MS Excel.\n\n    Returns a file in UTF-16 little endian encoding, with tabs separating the\n    values.\n\n    Args:\n      columns_order: Delegated to ToCsv.\n      order_by: Delegated to ToCsv.\n\n    Returns:\n      A tab-separated little endian UTF16 file representing the table.\n    '),
                                                                                            ('ToJSon',
                                                                                             ['columns_order=None',
                                                                                              'order_by=()'],
                                                                                             "Writes a JSON string that can be used in a JS DataTable constructor.\n\n    This method writes a JSON string that can be passed directly into a Google\n    Visualization API DataTable constructor. Use this output if you are\n    hosting the visualization HTML on your site, and want to code the data\n    table in Python. Pass this string into the\n    google.visualization.DataTable constructor, e.g,:\n      ... on my page that hosts my visualization ...\n      google.setOnLoadCallback(drawTable);\n      function drawTable() {\n        var data = new google.visualization.DataTable(_my_JSon_string, 0.6);\n        myTable.draw(data);\n      }\n\n    Args:\n      columns_order: Optional. Specifies the order of columns in the\n                     output table. Specify a list of all column IDs in the order\n                     in which you want the table created.\n                     Note that you must list all column IDs in this parameter,\n                     if you use it.\n      order_by: Optional. Specifies the name of the column(s) to sort by.\n                Passed as is to _PreparedData().\n\n    Returns:\n      A JSon constructor string to generate a JS DataTable with the data\n      stored in the DataTable object.\n      Example result (the result is without the newlines):\n       {cols: [{id:'a',label:'a',type:'number'},\n               {id:'b',label:'b',type:'string'},\n              {id:'c',label:'c',type:'number'}],\n        rows: [{c:[{v:1},{v:'z'},{v:2}]}, c:{[{v:3,f:'3$'},{v:'w'},{v:null}]}],\n        p:    {'foo': 'bar'}}\n\n    Raises:\n      DataTableException: The data does not match the type.\n    "),
                                                                                            ('ToJSonResponse',
                                                                                             ['columns_order=None',
                                                                                              'order_by=()',
                                                                                              'req_id=0',
                                                                                              "response_handler='google.visualization.Query.setResponse'"],
                                                                                             "Writes a table as a JSON response that can be returned as-is to a client.\n\n    This method writes a JSON response to return to a client in response to a\n    Google Visualization API query. This string can be processed by the calling\n    page, and is used to deliver a data table to a visualization hosted on\n    a different page.\n\n    Args:\n      columns_order: Optional. Passed straight to self.ToJSon().\n      order_by: Optional. Passed straight to self.ToJSon().\n      req_id: Optional. The response id, as retrieved by the request.\n      response_handler: Optional. The response handler, as retrieved by the\n          request.\n\n    Returns:\n      A JSON response string to be received by JS the visualization Query\n      object. This response would be translated into a DataTable on the\n      client side.\n      Example result (newlines added for readability):\n       google.visualization.Query.setResponse({\n          'version':'0.6', 'reqId':'0', 'status':'OK',\n          'table': {cols: [...], rows: [...]}});\n\n    Note: The URL returning this string can be used as a data source by Google\n          Visualization Gadgets or from JS code.\n    "),
                                                                                            ('ToResponse',
                                                                                             ['columns_order=None',
                                                                                              'order_by=()',
                                                                                              "tqx=''"],
                                                                                             'Writes the right response according to the request string passed in tqx.\n\n    This method parses the tqx request string (format of which is defined in\n    the documentation for implementing a data source of Google Visualization),\n    and returns the right response according to the request.\n    It parses out the "out" parameter of tqx, calls the relevant response\n    (ToJSonResponse() for "json", ToCsv() for "csv", ToHtml() for "html",\n    ToTsvExcel() for "tsv-excel") and passes the response function the rest of\n    the relevant request keys.\n\n    Args:\n      columns_order: Optional. Passed as is to the relevant response function.\n      order_by: Optional. Passed as is to the relevant response function.\n      tqx: Optional. The request string as received by HTTP GET. Should be in\n           the format "key1:value1;key2:value2...". All keys have a default\n           value, so an empty string will just do the default (which is calling\n           ToJSonResponse() with no extra parameters).\n\n    Returns:\n      A response string, as returned by the relevant response function.\n\n    Raises:\n      DataTableException: One of the parameters passed in tqx is not supported.\n    ')],
                                                                                'properties': ['__columns',
                                                                                               '__data',
                                                                                               'custom_properties',
                                                                                               'columns']},
             'mtrack_project.rapidsms_logistics.logistics.gviz_api.DataTableException': {'bases': ['Exception'],
                                                                                         'constructor': [],
                                                                                         'docstring': 'The general exception object thrown by DataTable.',
                                                                                         'methods': [],
                                                                                         'properties': []},
             'mtrack_project.rapidsms_logistics.logistics.handlers.help.Help': {'bases': ['rapidsms.contrib.handlers.handlers.keyword.KeywordHandler'],
                                                                                'constructor': [],
                                                                                'docstring': '',
                                                                                'methods': [('help',
                                                                                             [],
                                                                                             ''),
                                                                                            ('handle',
                                                                                             ['text'],
                                                                                             '')],
                                                                                'properties': ['keyword']},
             'mtrack_project.rapidsms_logistics.logistics.handlers.receipts.ReceiptHandler': {'bases': ['rapidsms.contrib.handlers.handlers.keyword.KeywordHandler'],
                                                                                              'constructor': [],
                                                                                              'docstring': '\n    Allows SMS reporters to send in "rec jd 10 mc 30" to report 10 jadelle and 30 male condoms received\n    ',
                                                                                              'methods': [('help',
                                                                                                           [],
                                                                                                           ''),
                                                                                                          ('handle',
                                                                                                           ['text'],
                                                                                                           '')],
                                                                                              'properties': ['keyword']},
             'mtrack_project.rapidsms_logistics.logistics.handlers.status.Stop': {'bases': ['rapidsms.contrib.handlers.handlers.keyword.KeywordHandler'],
                                                                                  'constructor': [],
                                                                                  'docstring': '\n    Stop handler for when a user wants to stop receiving reminders\n    ',
                                                                                  'methods': [('help',
                                                                                               [],
                                                                                               ''),
                                                                                              ('handle',
                                                                                               ['text'],
                                                                                               '')],
                                                                                  'properties': ['keyword']},
             'mtrack_project.rapidsms_logistics.logistics.handlers.stop.Stop': {'bases': ['rapidsms.contrib.handlers.handlers.keyword.KeywordHandler'],
                                                                                'constructor': [],
                                                                                'docstring': '\n    Stop handler for when a user wants to stop receiving reminders\n    ',
                                                                                'methods': [('help',
                                                                                             [],
                                                                                             ''),
                                                                                            ('handle',
                                                                                             ['text'],
                                                                                             '')],
                                                                                'properties': ['keyword']},
             'mtrack_project.rapidsms_logistics.logistics.models.ContactRole': {'bases': ['django.db.models.Model'],
                                                                                'constructor': [],
                                                                                'docstring': ' e.g. pharmacist, family planning nurse ',
                                                                                'methods': [('__unicode__',
                                                                                             [],
                                                                                             '')],
                                                                                'properties': ['code',
                                                                                               'name',
                                                                                               'responsibilities']},
             'mtrack_project.rapidsms_logistics.logistics.models.LogisticsProfile': {'bases': ['django.db.models.Model'],
                                                                                     'constructor': [],
                                                                                     'docstring': '',
                                                                                     'methods': [('__unicode__',
                                                                                                  [],
                                                                                                  '')],
                                                                                     'properties': ['user',
                                                                                                    'location',
                                                                                                    'supply_point']},
             'mtrack_project.rapidsms_logistics.logistics.models.NagRecord': {'bases': ['django.db.models.Model'],
                                                                              'constructor': [],
                                                                              'docstring': '',
                                                                              'methods': [],
                                                                              'properties': ['supply_point',
                                                                                             'report_date',
                                                                                             'warning',
                                                                                             'nag_type']},
             'mtrack_project.rapidsms_logistics.logistics.models.Product': {'bases': ['django.db.models.Model'],
                                                                            'constructor': [],
                                                                            'docstring': ' e.g. oral quinine ',
                                                                            'methods': [('__unicode__',
                                                                                         [],
                                                                                         ''),
                                                                                        ('by_code',
                                                                                         ['code'],
                                                                                         '')],
                                                                            'properties': ['name',
                                                                                           'units',
                                                                                           'sms_code',
                                                                                           'description',
                                                                                           'product_code',
                                                                                           'average_monthly_consumption',
                                                                                           'emergency_order_level',
                                                                                           'type',
                                                                                           'equivalents',
                                                                                           'code']},
             'mtrack_project.rapidsms_logistics.logistics.models.ProductReport': {'bases': ['django.db.models.Model'],
                                                                                  'constructor': [],
                                                                                  'docstring': '\n     each stock on hand report or receipt submitted by a pharmacist results \n     in a unique report in the database. You can consider these as\n     observations or data points.\n    ',
                                                                                  'methods': [('__unicode__',
                                                                                               [],
                                                                                               '')],
                                                                                  'properties': ['product',
                                                                                                 'supply_point',
                                                                                                 'report_type',
                                                                                                 'quantity',
                                                                                                 'report_date',
                                                                                                 'message']},
             'mtrack_project.rapidsms_logistics.logistics.models.ProductReportType': {'bases': ['django.db.models.Model'],
                                                                                      'constructor': [],
                                                                                      'docstring': " e.g. a 'stock on hand' report, or a losses&adjustments reports, or a receipt report",
                                                                                      'methods': [('__unicode__',
                                                                                                   [],
                                                                                                   '')],
                                                                                      'properties': ['name',
                                                                                                     'code']},
             'mtrack_project.rapidsms_logistics.logistics.models.ProductReportsHelper': {'bases': ['object'],
                                                                                         'constructor': ['sdp',
                                                                                                         'report_type',
                                                                                                         'message=None'],
                                                                                         'docstring': "\n    The following is a helper class (doesn't touch the db) which takes in aggregate\n    sets of reports and handles things like string parsing, aggregate validation,\n    lazy UPDATE-ing, error reporting etc.\n    ",
                                                                                         'methods': [('_clean_string',
                                                                                                      ['string'],
                                                                                                      ''),
                                                                                                     ('_getTokens',
                                                                                                      ['string'],
                                                                                                      ''),
                                                                                                     ('parse',
                                                                                                      ['string'],
                                                                                                      ''),
                                                                                                     ('save',
                                                                                                      [],
                                                                                                      ''),
                                                                                                     ('add_product_consumption',
                                                                                                      ['product',
                                                                                                       'consumption'],
                                                                                                      ''),
                                                                                                     ('get_product',
                                                                                                      ['product_code'],
                                                                                                      "\n        Gets a product by code, or raises an UnknownCommodityCodeError \n        if the product can't be found.\n        "),
                                                                                                     ('add_product_stock',
                                                                                                      ['product_code',
                                                                                                       'stock',
                                                                                                       'save=False',
                                                                                                       'consumption=None'],
                                                                                                      ''),
                                                                                                     ('_record_product_report',
                                                                                                      ['product',
                                                                                                       'quantity',
                                                                                                       'report_type'],
                                                                                                      ''),
                                                                                                     ('_record_product_stock',
                                                                                                      ['product_code',
                                                                                                       'quantity'],
                                                                                                      ''),
                                                                                                     ('_record_product_receipt',
                                                                                                      ['product',
                                                                                                       'quantity'],
                                                                                                      ''),
                                                                                                     ('add_product_receipt',
                                                                                                      ['product_code',
                                                                                                       'quantity',
                                                                                                       'save=False'],
                                                                                                      ''),
                                                                                                     ('reported_products',
                                                                                                      [],
                                                                                                      ''),
                                                                                                     ('received_products',
                                                                                                      [],
                                                                                                      ''),
                                                                                                     ('all',
                                                                                                      [],
                                                                                                      ''),
                                                                                                     ('received',
                                                                                                      [],
                                                                                                      ''),
                                                                                                     ('nonzero_received',
                                                                                                      [],
                                                                                                      ''),
                                                                                                     ('stockouts',
                                                                                                      [],
                                                                                                      ''),
                                                                                                     ('low_supply',
                                                                                                      [],
                                                                                                      ''),
                                                                                                     ('over_supply',
                                                                                                      [],
                                                                                                      ''),
                                                                                                     ('missing_products',
                                                                                                      [],
                                                                                                      "\n        check for active products that haven't yet been added\n        to this stockreport helper\n        ")],
                                                                                         'properties': ['REC_SEPARATOR',
                                                                                                        'product_stock',
                                                                                                        'consumption',
                                                                                                        'product_received',
                                                                                                        'supply_point',
                                                                                                        'message',
                                                                                                        'report_type',
                                                                                                        'errors']},
             'mtrack_project.rapidsms_logistics.logistics.models.ProductStock': {'bases': ['django.db.models.Model'],
                                                                                 'constructor': [],
                                                                                 'docstring': '\n    Indicates supply point-specific information about a product (such as monthly consumption rates)\n    A ProductStock should exist for each product for each supply point\n    ',
                                                                                 'methods': [('__unicode__',
                                                                                              [],
                                                                                              ''),
                                                                                             ('monthly_consumption',
                                                                                              ['value'],
                                                                                              ''),
                                                                                             ('is_stocked_out',
                                                                                              [],
                                                                                              ''),
                                                                                             ('is_below_emergency_level',
                                                                                              [],
                                                                                              '\n        Returns False if a) below emergency levels, or\n        b) emergency levels not yet defined\n        '),
                                                                                             ('is_below_low_supply_but_above_emergency_level',
                                                                                              [],
                                                                                              ''),
                                                                                             ('is_below_low_supply',
                                                                                              [],
                                                                                              ''),
                                                                                             ('is_above_low_supply',
                                                                                              [],
                                                                                              ''),
                                                                                             ('is_in_good_supply',
                                                                                              [],
                                                                                              ''),
                                                                                             ('is_in_adequate_supply',
                                                                                              [],
                                                                                              ''),
                                                                                             ('is_overstocked',
                                                                                              [],
                                                                                              '')],
                                                                                 'properties': ['is_active',
                                                                                                'supply_point',
                                                                                                'quantity',
                                                                                                'product',
                                                                                                'days_stocked_out',
                                                                                                'last_modified',
                                                                                                'manual_monthly_consumption',
                                                                                                'auto_monthly_consumption',
                                                                                                'use_auto_consumption',
                                                                                                'monthly_consumption',
                                                                                                'daily_consumption',
                                                                                                'emergency_reorder_level',
                                                                                                'reorder_level',
                                                                                                'maximum_level',
                                                                                                'months_remaining']},
             'mtrack_project.rapidsms_logistics.logistics.models.ProductType': {'bases': ['django.db.models.Model'],
                                                                                'constructor': [],
                                                                                'docstring': ' e.g. malaria, hiv, family planning ',
                                                                                'methods': [('__unicode__',
                                                                                             [],
                                                                                             '')],
                                                                                'properties': ['name',
                                                                                               'code']},
             'mtrack_project.rapidsms_logistics.logistics.models.RequisitionReport': {'bases': ['django.db.models.Model'],
                                                                                      'constructor': [],
                                                                                      'docstring': '',
                                                                                      'methods': [],
                                                                                      'properties': ['supply_point',
                                                                                                     'submitted',
                                                                                                     'report_date',
                                                                                                     'message']},
             'mtrack_project.rapidsms_logistics.logistics.models.Responsibility': {'bases': ['django.db.models.Model'],
                                                                                   'constructor': [],
                                                                                   'docstring': " e.g. 'reports stock on hand', 'orders new stock' ",
                                                                                   'methods': [('__unicode__',
                                                                                                [],
                                                                                                '')],
                                                                                   'properties': ['code',
                                                                                                  'name']},
             'mtrack_project.rapidsms_logistics.logistics.models.StockRequest': {'bases': ['django.db.models.Model'],
                                                                                 'constructor': [],
                                                                                 'docstring': "\n    In some deployments, you make a stock request, but it's not filled\n    immediately. This object keeps track of those requests. It's sort\n    of like a special type of ProductReport with a status flag.\n    ",
                                                                                 'methods': [('is_pending',
                                                                                              [],
                                                                                              ''),
                                                                                             ('is_closed',
                                                                                              [],
                                                                                              ''),
                                                                                             ('approve',
                                                                                              ['by',
                                                                                               'on',
                                                                                               'amt'],
                                                                                              ''),
                                                                                             ('mark_partial',
                                                                                              ['by',
                                                                                               'on'],
                                                                                              ''),
                                                                                             ('mark_stockout',
                                                                                              ['by',
                                                                                               'on'],
                                                                                              ''),
                                                                                             ('respond',
                                                                                              ['status',
                                                                                               'by',
                                                                                               'on',
                                                                                               'amt=None'],
                                                                                              ''),
                                                                                             ('receive',
                                                                                              ['by',
                                                                                               'amt',
                                                                                               'on'],
                                                                                              ''),
                                                                                             ('cancel',
                                                                                              ['canceled_for'],
                                                                                              '\n        Cancel a supply request, in lieu of a newer one\n        '),
                                                                                             ('sms_format',
                                                                                              [],
                                                                                              ''),
                                                                                             ('pending_requests',
                                                                                              [],
                                                                                              ''),
                                                                                             ('create_from_report',
                                                                                              ['stock_report',
                                                                                               'contact'],
                                                                                              '\n        From a stock report helper object, create any pending stock requests.\n        '),
                                                                                             ('close_pending_from_receipt_report',
                                                                                              ['stock_report',
                                                                                               'contact'],
                                                                                              '\n        From a stock report helper object, close any pending stock requests.\n        ')],
                                                                                 'properties': ['product',
                                                                                                'supply_point',
                                                                                                'status',
                                                                                                'response_status',
                                                                                                'is_emergency',
                                                                                                'requested_on',
                                                                                                'responded_on',
                                                                                                'received_on',
                                                                                                'requested_by',
                                                                                                'responded_by',
                                                                                                'received_by',
                                                                                                'amount_requested',
                                                                                                'amount_approved',
                                                                                                'amount_received',
                                                                                                'canceled_for']},
             'mtrack_project.rapidsms_logistics.logistics.models.StockRequestStatus': {'bases': ['object'],
                                                                                       'constructor': [],
                                                                                       'docstring': 'Basically a const for our choices',
                                                                                       'methods': [],
                                                                                       'properties': ['REQUESTED',
                                                                                                      'APPROVED',
                                                                                                      'STOCKED_OUT',
                                                                                                      'PARTIALLY_STOCKED',
                                                                                                      'RECEIVED',
                                                                                                      'CANCELED',
                                                                                                      'CHOICES',
                                                                                                      'CHOICES_PENDING',
                                                                                                      'CHOICES_CLOSED',
                                                                                                      'CHOICES_RESPONSE',
                                                                                                      'STATUS_CHOICES',
                                                                                                      'val',
                                                                                                      'RESPONSE_STATUS_CHOICES']},
             'mtrack_project.rapidsms_logistics.logistics.models.StockTransaction': {'bases': ['django.db.models.Model'],
                                                                                     'constructor': [],
                                                                                     'docstring': '\n     StockTransactions exist to track atomic changes to the ProductStock per facility\n     This may look deceptively like the ProductReport. The utility of having a separate\n     model is that some ProductReports may be duplicates, invalid, or false reports\n     from the field, so how we decide to map reports to transactions may vary \n    ',
                                                                                     'methods': [('__unicode__',
                                                                                                  [],
                                                                                                  ''),
                                                                                                 ('from_product_report',
                                                                                                  ['pr',
                                                                                                   'beginning_balance'],
                                                                                                  ''),
                                                                                                 ('get_consumption',
                                                                                                  [],
                                                                                                  '')],
                                                                                     'properties': ['product',
                                                                                                    'supply_point',
                                                                                                    'quantity',
                                                                                                    'beginning_balance',
                                                                                                    'ending_balance',
                                                                                                    'date',
                                                                                                    'product_report']},
             'mtrack_project.rapidsms_logistics.logistics.models.StockTransfer': {'bases': ['django.db.models.Model'],
                                                                                  'constructor': [],
                                                                                  'docstring': '\n    Transfers can be made between supply points. \n    \n    This model keeps track of them.\n    ',
                                                                                  'methods': [('sms_format',
                                                                                               [],
                                                                                               ''),
                                                                                              ('is_pending',
                                                                                               [],
                                                                                               ''),
                                                                                              ('is_closed',
                                                                                               [],
                                                                                               ''),
                                                                                              ('cancel',
                                                                                               ['date'],
                                                                                               ''),
                                                                                              ('confirm',
                                                                                               ['date'],
                                                                                               ''),
                                                                                              ('pending_transfers',
                                                                                               [],
                                                                                               ''),
                                                                                              ('create_from_transfer_report',
                                                                                               ['stock_report',
                                                                                                'receiver'],
                                                                                               '\n        Creates stock transfers from a transfer report\n        '),
                                                                                              ('create_from_receipt_report',
                                                                                               ['stock_report',
                                                                                                'supplier'],
                                                                                               '\n        Creates stock transfers from a receipt report\n        ')],
                                                                                  'properties': ['giver',
                                                                                                 'giver_unknown',
                                                                                                 'receiver',
                                                                                                 'product',
                                                                                                 'amount',
                                                                                                 'status',
                                                                                                 'initiated_on',
                                                                                                 'closed_on',
                                                                                                 'giver_display']},
             'mtrack_project.rapidsms_logistics.logistics.models.StockTransferStatus': {'bases': ['object'],
                                                                                        'constructor': [],
                                                                                        'docstring': 'Basically a const for our choices',
                                                                                        'methods': [],
                                                                                        'properties': ['INITIATED',
                                                                                                       'CONFIRMED',
                                                                                                       'CANCELED',
                                                                                                       'CHOICES',
                                                                                                       'STATUS_CHOICES',
                                                                                                       'val']},
             'mtrack_project.rapidsms_logistics.logistics.models.SupplyPoint': {'bases': ['mtrack_project.rapidsms_logistics.logistics.models.SupplyPointBase'],
                                                                                'constructor': [],
                                                                                'docstring': '',
                                                                                'methods': [],
                                                                                'properties': ['__metaclass__']},
             'mtrack_project.rapidsms_logistics.logistics.models.SupplyPointBase': {'bases': ['django.db.models.Model'],
                                                                                    'constructor': [],
                                                                                    'docstring': "\n    Somewhere that maintains and distributes products. \n    e.g. health centers, hsa's, or regional warehouses.\n    ",
                                                                                    'methods': [('__unicode__',
                                                                                                 [],
                                                                                                 ''),
                                                                                                ('are_consumptions_set',
                                                                                                 [],
                                                                                                 ''),
                                                                                                ('commodities_stocked',
                                                                                                 [],
                                                                                                 ''),
                                                                                                ('product_stocks',
                                                                                                 [],
                                                                                                 ''),
                                                                                                ('contacts',
                                                                                                 [],
                                                                                                 ''),
                                                                                                ('deprecate',
                                                                                                 ['new_code=None'],
                                                                                                 '\n        Deprecates this supply point, by changing the id and location id,\n        and deactivating it.\n        '),
                                                                                                ('update_stock',
                                                                                                 ['product',
                                                                                                  'quantity'],
                                                                                                 ''),
                                                                                                ('stock',
                                                                                                 ['product'],
                                                                                                 ''),
                                                                                                ('record_consumption_by_code',
                                                                                                 ['product_code',
                                                                                                  'rate'],
                                                                                                 ''),
                                                                                                ('stockout_count',
                                                                                                 ['product=None',
                                                                                                  'producttype=None'],
                                                                                                 ''),
                                                                                                ('emergency_stock_count',
                                                                                                 ['product=None',
                                                                                                  'producttype=None'],
                                                                                                 ' This indicates all stock below reorder levels,\n            including all stock below emergency supply levels\n        '),
                                                                                                ('low_stock_count',
                                                                                                 ['product=None',
                                                                                                  'producttype=None'],
                                                                                                 ' This indicates all stock below reorder levels,\n            including all stock below emergency supply levels\n        '),
                                                                                                ('emergency_plus_low',
                                                                                                 ['product=None',
                                                                                                  'producttype=None'],
                                                                                                 ' This indicates all stock below reorder levels,\n            including all stock below emergency supply levels\n        '),
                                                                                                ('good_supply_count',
                                                                                                 ['product=None',
                                                                                                  'producttype=None'],
                                                                                                 ' This indicates all stock below reorder levels,\n            including all stock below emergency supply levels\n        '),
                                                                                                ('adequate_supply_count',
                                                                                                 ['product=None',
                                                                                                  'producttype=None'],
                                                                                                 ''),
                                                                                                ('overstocked_count',
                                                                                                 ['product=None',
                                                                                                  'producttype=None'],
                                                                                                 ''),
                                                                                                ('consumption',
                                                                                                 ['product=None',
                                                                                                  'producttype=None'],
                                                                                                 ''),
                                                                                                ('report',
                                                                                                 ['product',
                                                                                                  'report_type',
                                                                                                  'quantity',
                                                                                                  'message=None',
                                                                                                  'date=None'],
                                                                                                 ''),
                                                                                                ('report_stock',
                                                                                                 ['product',
                                                                                                  'quantity',
                                                                                                  'message=None'],
                                                                                                 ''),
                                                                                                ('reporters',
                                                                                                 [],
                                                                                                 ''),
                                                                                                ('reportees',
                                                                                                 [],
                                                                                                 ''),
                                                                                                ('children',
                                                                                                 [],
                                                                                                 "\n        For all intents and purses, at this time, the 'children' of a facility wrt site navigation\n        are the same as the 'children' with respect to stock supply\n        "),
                                                                                                ('report_to_supervisor',
                                                                                                 ['report',
                                                                                                  'kwargs',
                                                                                                  'exclude=None'],
                                                                                                 ''),
                                                                                                ('supplies_product',
                                                                                                 ['product'],
                                                                                                 ''),
                                                                                                ('activate_product',
                                                                                                 ['product'],
                                                                                                 ''),
                                                                                                ('deactivate_product',
                                                                                                 ['product'],
                                                                                                 ''),
                                                                                                ('notify_suppliees_of_stockouts_resolved',
                                                                                                 ['stockouts_resolved',
                                                                                                  'exclude=None'],
                                                                                                 ' stockouts_resolved is a dictionary of code to product '),
                                                                                                ('data_unavailable',
                                                                                                 [],
                                                                                                 '')],
                                                                                    'properties': ['name',
                                                                                                   'active',
                                                                                                   'type',
                                                                                                   'created_at',
                                                                                                   'code',
                                                                                                   'last_reported',
                                                                                                   'location',
                                                                                                   'supplied_by',
                                                                                                   'active_contact_set',
                                                                                                   'active_objects',
                                                                                                   'products_stocked_out',
                                                                                                   'products_with_stock',
                                                                                                   'label',
                                                                                                   'is_active']},
             'mtrack_project.rapidsms_logistics.logistics.models.SupplyPointType': {'bases': ['django.db.models.Model'],
                                                                                    'constructor': [],
                                                                                    'docstring': "\n    e.g. medical stores, district hospitals, clinics, community health centers, hsa's\n    ",
                                                                                    'methods': [('__unicode__',
                                                                                                 [],
                                                                                                 '')],
                                                                                    'properties': ['name',
                                                                                                   'code']},
             'mtrack_project.rapidsms_logistics.logistics.reports.Colors': {'bases': ['object'],
                                                                            'constructor': [],
                                                                            'docstring': '',
                                                                            'methods': [],
                                                                            'properties': ['RED',
                                                                                           'GREEN',
                                                                                           'PURPLE',
                                                                                           'LIGHT_RED',
                                                                                           'LIGHT_GREEN',
                                                                                           'LIGHT_PURPLE',
                                                                                           'LIGHT_YELLOW',
                                                                                           'MEDIUM_GREEN',
                                                                                           'MEDIUM_PURPLE',
                                                                                           'MEDIUM_YELLOW',
                                                                                           'DARK_RED',
                                                                                           'WHITE',
                                                                                           'BLACK']},
             'mtrack_project.rapidsms_logistics.logistics.reports.FacilitySupplyPointRow': {'bases': ['logistics.models.SupplyPointRow'],
                                                                                            'constructor': [],
                                                                                            'docstring': '',
                                                                                            'methods': [],
                                                                                            'properties': ['url',
                                                                                                           'facility_list']},
             'mtrack_project.rapidsms_logistics.logistics.reports.HSASupplyPointRow': {'bases': ['logistics.models.SupplyPointRow'],
                                                                                       'constructor': [],
                                                                                       'docstring': '',
                                                                                       'methods': [],
                                                                                       'properties': ['url',
                                                                                                      'facility_list']},
             'mtrack_project.rapidsms_logistics.logistics.reports.PieChartData': {'bases': ['object'],
                                                                                  'constructor': ['title',
                                                                                                  'data'],
                                                                                  'docstring': '',
                                                                                  'methods': [],
                                                                                  'properties': ['title',
                                                                                                 'data']},
             'mtrack_project.rapidsms_logistics.logistics.reports.ProductAvailabilitySummary': {'bases': ['object'],
                                                                                                'constructor': ['contacts',
                                                                                                                'width=900',
                                                                                                                'height=300'],
                                                                                                'docstring': '',
                                                                                                'methods': [],
                                                                                                'properties': ['_width',
                                                                                                               '_height',
                                                                                                               'data',
                                                                                                               'max_value',
                                                                                                               'width',
                                                                                                               'height',
                                                                                                               'yaxistitle',
                                                                                                               'xaxistitle',
                                                                                                               'div',
                                                                                                               'legenddiv',
                                                                                                               '_flot_data',
                                                                                                               'flot_data']},
             'mtrack_project.rapidsms_logistics.logistics.reports.ProductAvailabilitySummaryByFacility': {'bases': ['logistics.models.ProductAvailabilitySummary'],
                                                                                                          'constructor': ['facilities',
                                                                                                                          'width=900',
                                                                                                                          'height=300'],
                                                                                                          'docstring': '',
                                                                                                          'methods': [],
                                                                                                          'properties': ['_width',
                                                                                                                         '_height',
                                                                                                                         'data']},
             'mtrack_project.rapidsms_logistics.logistics.reports.ReportingBreakdown': {'bases': ['object'],
                                                                                        'constructor': ['supply_points',
                                                                                                        'datespan=None',
                                                                                                        'include_late=False',
                                                                                                        'days_for_late=5',
                                                                                                        'MNE=False'],
                                                                                        'docstring': '\n    Given a query set of supply points, get an object for displaying reporting\n    information.\n    ',
                                                                                        'methods': [('breakdown_chart',
                                                                                                     [],
                                                                                                     ''),
                                                                                                    ('breakdown_groups',
                                                                                                     [],
                                                                                                     ''),
                                                                                                    ('on_time_chart',
                                                                                                     [],
                                                                                                     ''),
                                                                                                    ('on_time_groups',
                                                                                                     [],
                                                                                                     '')],
                                                                                        'properties': ['supply_points',
                                                                                                       'datespan',
                                                                                                       'include_late',
                                                                                                       'days_for_late',
                                                                                                       'discrepancies_p',
                                                                                                       'discrepancies_tot_p',
                                                                                                       'discrepancies_pct_p',
                                                                                                       'discrepancies_avg_p',
                                                                                                       'filled_orders_p',
                                                                                                       'avg_req_time',
                                                                                                       'req_times',
                                                                                                       'stockouts',
                                                                                                       'emergency',
                                                                                                       'stockouts_emergency',
                                                                                                       'stockouts_p',
                                                                                                       'no_stockouts_pct_p',
                                                                                                       'no_stockouts_p',
                                                                                                       'totals_p',
                                                                                                       'full',
                                                                                                       'partial',
                                                                                                       'unconfigured',
                                                                                                       'non_reporting',
                                                                                                       'reported',
                                                                                                       'reported_on_time',
                                                                                                       'reported_late',
                                                                                                       'on_time',
                                                                                                       '_breakdown_chart',
                                                                                                       '_on_time_chart']},
             'mtrack_project.rapidsms_logistics.logistics.reports.SupplyPointRow': {'bases': [],
                                                                                    'constructor': ['supply_point',
                                                                                                    'commodity_filter',
                                                                                                    'commoditytype_filter'],
                                                                                    'docstring': '',
                                                                                    'methods': [('_call_stock_count',
                                                                                                 ['name'],
                                                                                                 ''),
                                                                                                ('stockout_count',
                                                                                                 [],
                                                                                                 ''),
                                                                                                ('emergency_stock_count',
                                                                                                 [],
                                                                                                 ''),
                                                                                                ('adequate_supply_count',
                                                                                                 [],
                                                                                                 ''),
                                                                                                ('overstocked_count',
                                                                                                 [],
                                                                                                 '')],
                                                                                    'properties': ['supply_point',
                                                                                                   'commodity_filter',
                                                                                                   'commoditytype_filter',
                                                                                                   '_cached_stock',
                                                                                                   'is_active',
                                                                                                   'name',
                                                                                                   'code',
                                                                                                   'url',
                                                                                                   'facility_list',
                                                                                                   'consumption']},
             'mtrack_project.rapidsms_logistics.logistics.reports.TableData': {'bases': ['object'],
                                                                               'constructor': ['title',
                                                                                               'table'],
                                                                               'docstring': '',
                                                                               'methods': [],
                                                                               'properties': ['title',
                                                                                              'table']},
             'mtrack_project.rapidsms_logistics.logistics.tables.CommodityTable': {'bases': ['djtables.Table'],
                                                                                   'constructor': [],
                                                                                   'docstring': '',
                                                                                   'methods': [],
                                                                                   'properties': ['name',
                                                                                                  'sms_code',
                                                                                                  'type']},
             'mtrack_project.rapidsms_logistics.logistics.tables.FacilityTable': {'bases': ['djtables.Table'],
                                                                                  'constructor': [],
                                                                                  'docstring': '',
                                                                                  'methods': [],
                                                                                  'properties': ['name',
                                                                                                 'location']},
             'mtrack_project.rapidsms_logistics.logistics.tables.ReportingTable': {'bases': ['djtables.Table'],
                                                                                   'constructor': [],
                                                                                   'docstring': '',
                                                                                   'methods': [],
                                                                                   'properties': ['name',
                                                                                                  'last_reported']},
             'mtrack_project.rapidsms_logistics.logistics.tables.ShortMessageTable': {'bases': ['djtables.Table'],
                                                                                      'constructor': [],
                                                                                      'docstring': '',
                                                                                      'methods': [],
                                                                                      'properties': ['date',
                                                                                                     'text']},
             'mtrack_project.rapidsms_logistics.logistics.tests.consumption.TestConsumption': {'bases': ['rapidsms.tests.scripted.TestScript'],
                                                                                               'constructor': [],
                                                                                               'docstring': '',
                                                                                               'methods': [('setUp',
                                                                                                            [],
                                                                                                            ''),
                                                                                                           ('testConsumption',
                                                                                                            [],
                                                                                                            '')],
                                                                                               'properties': []},
             'mtrack_project.rapidsms_logistics.logistics.views.JSONDateEncoder': {'bases': ['json.JSONEncoder'],
                                                                                   'constructor': [],
                                                                                   'docstring': '',
                                                                                   'methods': [('default',
                                                                                                ['obj'],
                                                                                                '')],
                                                                                   'properties': []},
             'mtrack_project.rapidsms_mtrack.mtrack.app.App': {'bases': ['rapidsms.apps.base.AppBase'],
                                                               'constructor': [],
                                                               'docstring': '',
                                                               'methods': [('handle',
                                                                            ['message'],
                                                                            '')],
                                                               'properties': []},
             'mtrack_project.rapidsms_mtrack.mtrack.extensions.healthmodels.healthfacility.FacilityWithDrugs': {'bases': ['django.db.models.Model'],
                                                                                                                'constructor': [],
                                                                                                                'docstring': '',
                                                                                                                'methods': [],
                                                                                                                'properties': ['supply_point']},
             'mtrack_project.rapidsms_mtrack.mtrack.forms.AnonymousEditReportForm': {'bases': ['django.forms.ModelForm'],
                                                                                     'constructor': [],
                                                                                     'docstring': '\n\tWe can now edit any reports that come in anonymously\n\t',
                                                                                     'methods': [],
                                                                                     'properties': []},
             'mtrack_project.rapidsms_mtrack.mtrack.forms.DistrictResponseForm': {'bases': ['django.forms.Form'],
                                                                                  'constructor': ['data=None',
                                                                                                  '**kwargs'],
                                                                                  'docstring': '',
                                                                                  'methods': [],
                                                                                  'properties': ['value']},
             'mtrack_project.rapidsms_mtrack.mtrack.forms.FacilityForm': {'bases': ['django.forms.Form'],
                                                                          'constructor': ['*args',
                                                                                          '**kwargs'],
                                                                          'docstring': '\n    How we handle an anonymous "complaint" or "report"\n    ',
                                                                          'methods': [('save',
                                                                                       [],
                                                                                       '')],
                                                                          'properties': ['name',
                                                                                         'code',
                                                                                         'type',
                                                                                         'catchment_areas',
                                                                                         'facility_district',
                                                                                         'facility']},
             'mtrack_project.rapidsms_mtrack.mtrack.forms.FacilityResponseForm': {'bases': ['django.forms.Form'],
                                                                                  'constructor': ['data=None',
                                                                                                  '**kwargs'],
                                                                                  'docstring': '',
                                                                                  'methods': [],
                                                                                  'properties': ['value']},
             'mtrack_project.rapidsms_mtrack.mtrack.management.commands.create_autoreg_script.Command': {'bases': ['django.core.management.base.BaseCommand'],
                                                                                                         'constructor': [],
                                                                                                         'docstring': '',
                                                                                                         'methods': [('handle',
                                                                                                                      ['**options'],
                                                                                                                      '')],
                                                                                                         'properties': []},
             'mtrack_project.rapidsms_mtrack.mtrack.management.commands.export_reports.Command': {'bases': ['django.core.management.base.BaseCommand'],
                                                                                                  'constructor': [],
                                                                                                  'docstring': '',
                                                                                                  'methods': [('handle',
                                                                                                               ['**options'],
                                                                                                               '')],
                                                                                                  'properties': []},
             'mtrack_project.rapidsms_mtrack.mtrack.management.commands.mtrack_init.Command': {'bases': ['django.core.management.base.BaseCommand'],
                                                                                               'constructor': [],
                                                                                               'docstring': '',
                                                                                               'methods': [('handle',
                                                                                                            ['*args',
                                                                                                             '**options'],
                                                                                                            '')],
                                                                                               'properties': ['help']},
             'mtrack_project.rapidsms_mtrack.mtrack.management.commands.mtrack_init_demo.Command': {'bases': ['django.core.management.base.BaseCommand'],
                                                                                                    'constructor': [],
                                                                                                    'docstring': '',
                                                                                                    'methods': [('handle',
                                                                                                                 ['*args',
                                                                                                                  '**options'],
                                                                                                                 '')],
                                                                                                    'properties': ['help']},
             'mtrack_project.rapidsms_mtrack.mtrack.management.commands.upload_hcs.Command': {'bases': ['django.core.management.base.BaseCommand'],
                                                                                              'constructor': [],
                                                                                              'docstring': '',
                                                                                              'methods': [('create_location_safe',
                                                                                                           ['name',
                                                                                                            'type',
                                                                                                            'tree_parent'],
                                                                                                           ''),
                                                                                                          ('handle',
                                                                                                           ['*args',
                                                                                                            '**options'],
                                                                                                           '')],
                                                                                              'properties': ['help']},
             'mtrack_project.rapidsms_mtrack.mtrack.models.AnonymousReport': {'bases': ['django.db.models.Model'],
                                                                              'constructor': [],
                                                                              'docstring': '',
                                                                              'methods': [('__unicode__',
                                                                                           [],
                                                                                           '')],
                                                                              'properties': ['connection',
                                                                                             'messages',
                                                                                             'date',
                                                                                             'district',
                                                                                             'comments',
                                                                                             'health_facility',
                                                                                             'action']},
             'mtrack_project.rapidsms_mtrack.mtrack.reports.AlertReportsColumn': {'bases': ['generic.reporting.reports.Column'],
                                                                                  'constructor': ['type=ALERTS_TOTAL',
                                                                                                  'period=1',
                                                                                                  '**kwargs'],
                                                                                  'docstring': '',
                                                                                  'methods': [('add_to_report',
                                                                                               ['report',
                                                                                                'key',
                                                                                                'dictionary'],
                                                                                               '')],
                                                                                  'properties': ['type',
                                                                                                 'date_range']},
             'mtrack_project.rapidsms_mtrack.mtrack.reports.ManagementReport': {'bases': ['uganda_common.views.XFormReport'],
                                                                                'constructor': [],
                                                                                'docstring': '',
                                                                                'methods': [('get_top_columns',
                                                                                             [],
                                                                                             '')],
                                                                                'properties': ['has_chart',
                                                                                               'new_alerts',
                                                                                               'alerts_actioned',
                                                                                               'percentage_change',
                                                                                               'total_outstanding',
                                                                                               'registered_vhts',
                                                                                               'active_vhts',
                                                                                               'percent_change_vhts',
                                                                                               'registered_hcs',
                                                                                               'active_hcs',
                                                                                               'percent_change_hcs']},
             'mtrack_project.rapidsms_mtrack.mtrack.tests.MTrackTests': {'bases': ['django.test.TestCase'],
                                                                         'constructor': [],
                                                                         'docstring': '',
                                                                         'methods': [('setUp',
                                                                                      [],
                                                                                      ''),
                                                                                     ('testNoFacility',
                                                                                      [],
                                                                                      ''),
                                                                                     ('testBasicSubmission',
                                                                                      [],
                                                                                      ''),
                                                                                     ('testAutoGenerateSupplyPoint',
                                                                                      [],
                                                                                      '')],
                                                                         'properties': ['contact']},
             'mtrack_project.rapidsms_tracking.tracking.middleware.UserTrackingMiddleware': {'bases': [],
                                                                                             'constructor': [],
                                                                                             'docstring': "\n    Keeps track of loggedin active users.  Anytime a visitor accesses a valid URL,\n    their unique record will be updated with the page they're on and the last\n    time they requested a page.\n\n    ",
                                                                                             'methods': [('process_request',
                                                                                                          ['request'],
                                                                                                          '')],
                                                                                             'properties': []},
             'mtrack_project.rapidsms_tracking.tracking.migrations.0001_initial.Migration': {'bases': ['south.v2.SchemaMigration'],
                                                                                             'constructor': [],
                                                                                             'docstring': '',
                                                                                             'methods': [('forwards',
                                                                                                          ['orm'],
                                                                                                          ''),
                                                                                                         ('backwards',
                                                                                                          ['orm'],
                                                                                                          '')],
                                                                                             'properties': ['models',
                                                                                                            'complete_apps']},
             'mtrack_project.rapidsms_tracking.tracking.models.UserLog': {'bases': ['django.db.models.Model'],
                                                                          'constructor': [],
                                                                          'docstring': '',
                                                                          'methods': [],
                                                                          'properties': ['user',
                                                                                         'user_agent',
                                                                                         'page_views',
                                                                                         'url',
                                                                                         'session_start',
                                                                                         'last_update',
                                                                                         'session_key',
                                                                                         'ip_address',
                                                                                         'referrer']},
             'mtrack_project.rapidsms_uganda_ussd.ussd.forms.YoForm': {'bases': ['django.forms.Form'],
                                                                       'constructor': [],
                                                                       'docstring': '',
                                                                       'methods': [('clean_msisdn',
                                                                                    [],
                                                                                    ''),
                                                                                   ('clean_transactionTime',
                                                                                    [],
                                                                                    ''),
                                                                                   ('clean',
                                                                                    [],
                                                                                    '')],
                                                                       'properties': ['transactionId',
                                                                                      'transactionTime',
                                                                                      'msisdn',
                                                                                      'ussdServiceCode',
                                                                                      'ussdRequestString',
                                                                                      'response']},
             'mtrack_project.rapidsms_uganda_ussd.ussd.models.BackNavigation': {'bases': ['Exception'],
                                                                                'constructor': [],
                                                                                'docstring': '\n    Can be thrown by screens based on particular input, or by \n    signal handlers, causing a back navigation.  This will pop the navigation stack and\n    allow users to move to the previous navigation without storing any\n    additional records in the session.\n    ',
                                                                                'methods': [],
                                                                                'properties': []},
             'mtrack_project.rapidsms_uganda_ussd.ussd.models.Field': {'bases': ['mtrack_project.rapidsms_uganda_ussd.ussd.models.Question',
                                                                                 'uganda_common.models.PolymorphicMixin'],
                                                                       'constructor': [],
                                                                       'docstring': '\n    Fields are questions whose answers map to an XFormField.  As this is an\n    integral part of what our USSD sessions are about, the XFormSubmissions that\n    are created from these fields are stored on the USSD session object itself.\n    ',
                                                                       'methods': [('get_question',
                                                                                    [],
                                                                                    ''),
                                                                                   ('accept_input',
                                                                                    ['input',
                                                                                     'session=None'],
                                                                                    '')],
                                                                       'properties': ['objects',
                                                                                      'field',
                                                                                      'error_text',
                                                                                      'has_errors']},
             'mtrack_project.rapidsms_uganda_ussd.ussd.models.Menu': {'bases': ['mtrack_project.rapidsms_uganda_ussd.ussd.models.Screen',
                                                                                'uganda_common.models.PolymorphicMixin'],
                                                                      'constructor': [],
                                                                      'docstring': "\n    Menus are basic navigational screens, allow the user to move from this screen\n    to one of the menu's children by selecting a number, or '#' to move backwards\n    to the previous menu (if one exists).\n    ",
                                                                      'methods': [('__unicode__',
                                                                                   [],
                                                                                   '\n        This renders a standard menu, based on the children of the \n        current menu item.  An example might be:\n\n        1. Apples\n        2. Fruit\n        3. MEAT\n        #. Back\n        '),
                                                                                  ('get_submenu_labels',
                                                                                   [],
                                                                                   "\n        returns the labels of the children of the current MenuItem, as an iterable,\n        for rendering to a display\n        \n        example return value:\n        [('meat',1),('vegetables',2),('fruits', 4)]\n        "),
                                                                                  ('is_terminal',
                                                                                   [],
                                                                                   ''),
                                                                                  ('accept_input',
                                                                                   ['input',
                                                                                    'session=None'],
                                                                                   '')],
                                                                      'properties': ['objects',
                                                                                     'has_errors',
                                                                                     'error_text',
                                                                                     'error_label']},
             'mtrack_project.rapidsms_uganda_ussd.ussd.models.Navigation': {'bases': ['django.db.models.Model'],
                                                                            'constructor': [],
                                                                            'docstring': "\n    A Navigation is a record of a single screen that the user viewed, and together\n    these comprise a stack of navigations the user has made within a session.  Because\n    the text rendered to screen may be state-driven (i.e., based on erroneous input, etc.)\n    The actual text sent is stored, along with the Screen that generated it.  In this way,\n    when a user navigates backwards, they'll receive the previous text sent, not the stateless\n    screen text from an initial navigation.\n    ",
                                                                            'methods': [],
                                                                            'properties': ['screen',
                                                                                           'text',
                                                                                           'response',
                                                                                           'date',
                                                                                           'session']},
             'mtrack_project.rapidsms_uganda_ussd.ussd.models.Question': {'bases': ['mtrack_project.rapidsms_uganda_ussd.ussd.models.Screen',
                                                                                    'uganda_common.models.PolymorphicMixin'],
                                                                          'constructor': [],
                                                                          'docstring': "\n    Question is a generic class for gathering questions that aren't necessarily\n    tied to actual data to be gathered.  Should be subclassed for custom branching\n    logic (see Field).\n    ",
                                                                          'methods': [('get_question',
                                                                                       [],
                                                                                       ''),
                                                                                      ('is_terminal',
                                                                                       [],
                                                                                       ''),
                                                                                      ('accept_input',
                                                                                       ['input',
                                                                                        'session=None'],
                                                                                       '\n        Simply advance to the next screen. Subclasses will likely override\n        this default behavior.\n        '),
                                                                                      ('__unicode__',
                                                                                       [],
                                                                                       '')],
                                                                          'properties': ['objects',
                                                                                         'has_errors',
                                                                                         'error_text',
                                                                                         'question_text',
                                                                                         'next']},
             'mtrack_project.rapidsms_uganda_ussd.ussd.models.Screen': {'bases': ['mptt.models.MPTTModel',
                                                                                  'uganda_common.models.PolymorphicMixin'],
                                                                        'constructor': [],
                                                                        'docstring': "\n    This is the parent class for all Screen Types.  Subclasses must implement, at\n    a minimum, the following:\n    * __unicode()__ : This is what is displayed to the user's mobile when they navigate\n     to this screen\n    * accept_input : After this screen is displayed to their user, this screen gets a chance\n    to react based on the input, using the functionality in this method.\n    Optionally, the subclass can override\n    get_label() and is_terminal() to add custom behavior\n    ",
                                                                        'methods': [('__unicode__',
                                                                                     [],
                                                                                     ''),
                                                                                    ('accept_input',
                                                                                     ['input',
                                                                                      'session=None'],
                                                                                     ''),
                                                                                    ('is_terminal',
                                                                                     [],
                                                                                     ''),
                                                                                    ('get_label',
                                                                                     [],
                                                                                     '\n        In the case of menus, it is the label of the children that are displayed\n        as menu options.\n        ')],
                                                                        'properties': ['objects',
                                                                                       'slug',
                                                                                       'label',
                                                                                       'order',
                                                                                       'parent']},
             'mtrack_project.rapidsms_uganda_ussd.ussd.models.Session': {'bases': ['django.db.models.Model'],
                                                                         'constructor': [],
                                                                         'docstring': '',
                                                                         'methods': [('get_initial_screen',
                                                                                      [],
                                                                                      ''),
                                                                                     ('last_screen',
                                                                                      [],
                                                                                      ''),
                                                                                     ('back',
                                                                                      [],
                                                                                      '\n        Return to the previous menu in navigation (i.e., the second-to-last screen\n        in navigations).\n        '),
                                                                                     ('advance_progress',
                                                                                      ['input'],
                                                                                      '\n        Navigate down the tree, based on the number the user has input.\n        '),
                                                                                     ('complete',
                                                                                      [],
                                                                                      '')],
                                                                         'properties': ['transaction_id',
                                                                                        'connection',
                                                                                        'submissions']},
             'mtrack_project.rapidsms_uganda_ussd.ussd.models.StubScreen': {'bases': ['mtrack_project.rapidsms_uganda_ussd.ussd.models.Screen',
                                                                                      'uganda_common.models.PolymorphicMixin'],
                                                                            'constructor': [],
                                                                            'docstring': '',
                                                                            'methods': [('__unicode__',
                                                                                         [],
                                                                                         ''),
                                                                                        ('is_terminal',
                                                                                         [],
                                                                                         '')],
                                                                            'properties': ['objects',
                                                                                           'terminal',
                                                                                           'text']},
             'mtrack_project.rapidsms_uganda_ussd.ussd.models.TransitionException': {'bases': ['Exception'],
                                                                                     'constructor': ['screen',
                                                                                                     '**kwargs'],
                                                                                     'docstring': '\n    Fired by pre_transition signal handlers to interrupt the normal\n    flow of the USSD session.  These handlers will specify the screen\n    that the session should jump to by raising this exception, with\n    the appropriate screen set.\n    ',
                                                                                     'methods': [],
                                                                                     'properties': ['screen']},
             'mtrack_project.rapidsms_uganda_ussd.ussd.tests.models_tests.UssdTestCase': {'bases': ['django.test.TestCase'],
                                                                                          'constructor': [],
                                                                                          'docstring': '',
                                                                                          'methods': [('setUp',
                                                                                                       [],
                                                                                                       ''),
                                                                                                      ('testContacts',
                                                                                                       [],
                                                                                                       '')],
                                                                                          'properties': []},
             'mtrack_project.rapidsms_uganda_ussd.ussd.tests.views_tests.ViewTest': {'bases': ['django.test.TestCase'],
                                                                                     'constructor': [],
                                                                                     'docstring': '',
                                                                                     'methods': [('setUp',
                                                                                                  [],
                                                                                                  ''),
                                                                                                 ('assertSessionNavigation',
                                                                                                  ['transaction_id',
                                                                                                   'request',
                                                                                                   'expected_response',
                                                                                                   "action='request'"],
                                                                                                  ''),
                                                                                                 ('testMenu',
                                                                                                  [],
                                                                                                  ''),
                                                                                                 ('testBadMenuSelect',
                                                                                                  [],
                                                                                                  ''),
                                                                                                 ('testField',
                                                                                                  [],
                                                                                                  ''),
                                                                                                 ('testBack',
                                                                                                  [],
                                                                                                  ''),
                                                                                                 ('testMultiSubmission',
                                                                                                  [],
                                                                                                  ''),
                                                                                                 ('testTransitionException',
                                                                                                  [],
                                                                                                  ''),
                                                                                                 ('testErrorInput',
                                                                                                  [],
                                                                                                  '')],
                                                                                     'properties': ['factory',
                                                                                                    'url']},
             'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.app.App': {'bases': ['rapidsms.apps.base.AppBase'],
                                                                            'constructor': [],
                                                                            'docstring': '',
                                                                            'methods': [('handle',
                                                                                         ['message'],
                                                                                         '')],
                                                                            'properties': []},
             'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.management.commands.loadmessages.Command': {'bases': ['django.core.management.base.BaseCommand'],
                                                                                                             'constructor': [],
                                                                                                             'docstring': '',
                                                                                                             'methods': [('handle',
                                                                                                                          ['*files',
                                                                                                                           '**options'],
                                                                                                                          '')],
                                                                                                             'properties': ['help',
                                                                                                                            'args',
                                                                                                                            'style']},
             'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.management.commands.loadmessages.CommentedFile': {'bases': [],
                                                                                                                   'constructor': ['f',
                                                                                                                                   "commentstring='#'"],
                                                                                                                   'docstring': '',
                                                                                                                   'methods': [('next',
                                                                                                                                [],
                                                                                                                                ''),
                                                                                                                               ('__iter__',
                                                                                                                                [],
                                                                                                                                '')],
                                                                                                                   'properties': ['f',
                                                                                                                                  'commentstring']},
             'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.migrations.0001_initial.Migration': {'bases': ['south.v2.SchemaMigration'],
                                                                                                      'constructor': [],
                                                                                                      'docstring': '',
                                                                                                      'methods': [('forwards',
                                                                                                                   ['orm'],
                                                                                                                   ''),
                                                                                                                  ('backwards',
                                                                                                                   ['orm'],
                                                                                                                   '')],
                                                                                                      'properties': ['models',
                                                                                                                     'complete_apps']},
             'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.models.BinaryValue': {'bases': ['django.db.models.Model'],
                                                                                       'constructor': [],
                                                                                       'docstring': '\n    Simple holder for values that are submitted and which represent binary files.\n    ',
                                                                                       'methods': [('url',
                                                                                                    [],
                                                                                                    ''),
                                                                                                   ('__unicode__',
                                                                                                    [],
                                                                                                    '')],
                                                                                       'properties': ['binary']},
             'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.models.XForm': {'bases': ['django.db.models.Model'],
                                                                                 'constructor': ['*args',
                                                                                                 '**kwargs'],
                                                                                 'docstring': '\n    An XForm, which is just a collection of fields.\n\n    XForms also define their keyword which will be used when submitting via SMS.\n    ',
                                                                                 'methods': [('find_form',
                                                                                              ['message'],
                                                                                              "\n        This method is responsible for find a matching XForm on this site given the passed in message.\n\n        We do a few things to be agressive in matching the keyword, specifically:\n            - if no exact matches are found for the keyword, we tests for levenshtein distance of <= 1\n            - we also take into account each form's keyword prefix parameter\n\n        The return value is the matched form, as well as the remainder of the message apart from the keyword\n        "),
                                                                                             ('parse_keyword',
                                                                                              ['message',
                                                                                               'fuzzy=True'],
                                                                                              "\n        Given a message, tries to parse the keyword for the form.  If it matches, then we return\n        the remainder of the message, otherwise if the message doesn't start with our keyword then\n        we return None\n        "),
                                                                                             ('update_submission_from_dict',
                                                                                              ['submission',
                                                                                               'values'],
                                                                                              "\n        Sets the values for the passed in submission to the passed in dictionary.  The dict\n        is expected to have keys corresponding to the commands of the fields.\n\n        Note that the submission will set itself as no longer having any errors and trigger\n        the xform_submitted signal\n\n        TODO: I'm kind of putting all real logic in XForm as a base, but maybe this really\n        belongs in XFormSubmission where I first had it.\n        "),
                                                                                             ('process_odk_submission',
                                                                                              ['xml',
                                                                                               'values',
                                                                                               'binaries'],
                                                                                              '\n        Given the raw XML content and a map of values, processes a new ODK submission, returning the newly\n        created submission.\n\n        This mostly just coerces the 4 parameter ODK geo locations to our two parameter ones.\n        '),
                                                                                             ('process_import_submission',
                                                                                              ['raw',
                                                                                               'connection',
                                                                                               'values'],
                                                                                              '\n        Given a dict of values and the original row, import the data\n        as a submission. Validates against contraints including checking\n        for required fields.  Raises ValidationError if supplied could\n        not be processed.\n        '),
                                                                                             ('is_command',
                                                                                              ['segment',
                                                                                               'commands'],
                                                                                              "\n        Given a segment and commands dict, it checks if segment contains a command\n        the we return that command if it's true, otherwise None\n        "),
                                                                                             ('parse_sms_submission',
                                                                                              ['message_obj'],
                                                                                              "\n        sms submissions can have two formats, either explicitely marking each field:\n            <keyword> +field_command1 [values] +field_command2 [values]\n        \n        or ommitting the 'command' for all required fields:\n            <keyword> [first required field] [second required field] +field_command3 [first optional field]\n        \n        Note that if you are using the no-delimeter form, then all string fields are 'assumed' to be\n        a single word.  TODO: this could probably be made to be smarter\n        "),
                                                                                             ('build_template_vars',
                                                                                              ['submission',
                                                                                               'sub_dict'],
                                                                                              '\n        Given a submission builds the dict of values that will be available in the template.\n        '),
                                                                                             ('render_response',
                                                                                              ['response',
                                                                                               'template_vars'],
                                                                                              '\n        Given a template string a dictionary of values, tries to compile the template and evaluate it.\n        '),
                                                                                             ('process_sms_submission',
                                                                                              ['message_obj'],
                                                                                              '\n        Given an incoming SMS message, will create a new submission.  If there is an error\n        we will throw with the appropriate error message.\n        \n        The newly created submission object will be returned.\n        '),
                                                                                             ('does_user_have_permission',
                                                                                              ['user'],
                                                                                              '\n        Does the passed in user have permission to submit / view this form?\n        '),
                                                                                             ('check_template',
                                                                                              ['template'],
                                                                                              '\n        Tries to compile and render our template to make sure it passes.\n        '),
                                                                                             ('full_clean',
                                                                                              ['exclude=None'],
                                                                                              ''),
                                                                                             ('save',
                                                                                              ['force_insert=False',
                                                                                               'force_update=False',
                                                                                               'using=None'],
                                                                                              '\n        On saves we check to see if the keyword has changed, if so loading all our fields\n        and resaving them to update their slugs.\n        '),
                                                                                             ('__unicode__',
                                                                                              [],
                                                                                              '')],
                                                                                 'properties': ['PREFIX_CHOICES',
                                                                                                'SEPARATOR_CHOICES',
                                                                                                'name',
                                                                                                'keyword',
                                                                                                'description',
                                                                                                'response',
                                                                                                'active',
                                                                                                'command_prefix',
                                                                                                'keyword_prefix',
                                                                                                'separator',
                                                                                                'restrict_to',
                                                                                                'restrict_message',
                                                                                                'owner',
                                                                                                'created',
                                                                                                'modified',
                                                                                                'site',
                                                                                                'objects',
                                                                                                'on_site',
                                                                                                'unique_together',
                                                                                                '_original_keyword',
                                                                                                '__original_keyword']},
             'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.models.XFormField': {'bases': ['eav.models.Attribute'],
                                                                                      'constructor': [],
                                                                                      'docstring': "\n    A field within an XForm.  Fields can be one of the types:\n        int: An integer\n        dec: A decimal or float value\n        str: A string\n        gps: A lat and long pairing\n\n    Note that when defining a field you must also define it's ``command`` which will\n    be used to 'tag' the field in an SMS message.  ie: ``+age 10``\n\n    ",
                                                                                      'methods': [('register_field_type',
                                                                                                   ['field_type',
                                                                                                    'label',
                                                                                                    'parserFunc',
                                                                                                    'db_type=TYPE_TEXT',
                                                                                                    "xforms_type='string'",
                                                                                                    'puller=None',
                                                                                                    'xform_only=False'],
                                                                                                   "\n        Used to register a new field type for XForms.  You can use this method to build new field types that are\n        available when building XForms.  These types may just do custom parsing of the SMS text sent in, then stuff\n        those results in a normal core datatype, or they may lookup and reference completely custom attributes.\n\n        Refer to GeoPoint implementation to see an example of the latter.\n\n        Arguments are:\n           label:       The label used for this field type in the user interface\n           field_type:  A slug to identify this field type, must be unique across all field types\n           parser:      The function called to turn the raw string into the appropriate type, should take two arguments.\n                        Takes two arguments, 'command', which is the command of the field, and 'value' the string value submitted.\n           db_type:     How the value will be stored in the database, can be one of: TYPE_INT, TYPE_FLOAT, TYPE_TEXT or TYPE_OBJECT\n           xforms_type: The type as defined in an XML xforms specification, likely one of: 'integer', 'decimal' or 'string'\n           puller:      A method that can be used to 'pull' the value from an SMS submission.  This can be useful when the value of\n                        the field is actually derived from attributes in the message itself.  Note that the string value returned will\n                        then be passed off to the parser.\n        "),
                                                                                                  ('lookup_type',
                                                                                                   ['otype'],
                                                                                                   ''),
                                                                                                  ('derive_datatype',
                                                                                                   [],
                                                                                                   '\n        We map our field_type to the appropriate data_type here.\n        '),
                                                                                                  ('full_clean',
                                                                                                   ['exclude=None'],
                                                                                                   ''),
                                                                                                  ('save',
                                                                                                   ['force_insert=False',
                                                                                                    'force_update=False',
                                                                                                    'using=None'],
                                                                                                   ''),
                                                                                                  ('clean_submission',
                                                                                                   ['value',
                                                                                                    'submission_type'],
                                                                                                   '\n        Takes the passed in string value and does two steps:\n\n        1) tries to coerce the value into the appropriate type for the field.  This means changing\n        a string to an integer or decimal, or splitting it into two for a gps location.\n\n        2) if the coercion into the appropriate type succeeds, then validates then validates the\n        value against any constraints on this field.  \n\n        If either of these steps fails, a ValidationError is raised.  If both are successful\n        then the cleaned, Python typed value is returned.\n        '),
                                                                                                  ('xform_type',
                                                                                                   [],
                                                                                                   '\n        Returns the XForms type for the field type.\n        '),
                                                                                                  ('constraints_as_xform',
                                                                                                   [],
                                                                                                   '\n        Returns the attributes for an xform bind element that corresponds to the\n        constraints that are present on this field.\n\n        See: http://www.w3.org/TR/xforms11/\n        '),
                                                                                                  ('__unicode__',
                                                                                                   [],
                                                                                                   '')],
                                                                                      'properties': ['TYPE_INT',
                                                                                                     'TYPE_FLOAT',
                                                                                                     'TYPE_TEXT',
                                                                                                     'TYPE_OBJECT',
                                                                                                     'TYPE_GEOPOINT',
                                                                                                     'TYPE_IMAGE',
                                                                                                     'TYPE_AUDIO',
                                                                                                     'TYPE_VIDEO',
                                                                                                     'TYPE_CHOICES',
                                                                                                     'xform',
                                                                                                     'field_type',
                                                                                                     'command',
                                                                                                     'order',
                                                                                                     'question',
                                                                                                     'objects',
                                                                                                     'on_site',
                                                                                                     'slug',
                                                                                                     'datatype']},
             'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.models.XFormFieldConstraint': {'bases': ['django.db.models.Model'],
                                                                                                'constructor': [],
                                                                                                'docstring': '\n    Constraint on a field.  A field can have 0..n constraints.  Constraints can be of\n    the types:\n        req_val: A value is required in every submission, though it can be an empty string\n        min_val: The numerical value must be at least n\n        max_val: The numerical value must be at most n\n        min_len: The length of the value must be at least n\n        max_len: The length of the value must be at most n\n        regex: The value must match the regular expression\n\n    All constraints also define an error message which will be returned if the constraint fails.\n\n    Constraints are evaluated in order, the first constraint to fail shortcuts all subsequent \n    constraints.\n    ',
                                                                                                'methods': [('validate',
                                                                                                             ['value',
                                                                                                              'field_type',
                                                                                                              'submission_type'],
                                                                                                             "\n        Follows a similar pattern to Django's Form validation.  Validate takes a value and checks\n        it against the constraints passed in.\n\n        Throws a ValidationError if it doesn't meet the constraint.\n        "),
                                                                                                            ('__unicode__',
                                                                                                             [],
                                                                                                             '')],
                                                                                                'properties': ['field',
                                                                                                               'type',
                                                                                                               'test',
                                                                                                               'message',
                                                                                                               'order']},
             'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.models.XFormSubmission': {'bases': ['django.db.models.Model'],
                                                                                           'constructor': [],
                                                                                           'docstring': '\n    Represents an XForm submission.  This acts as an aggregator for the values and a way of \n    storing where the submission came form.\n    ',
                                                                                           'methods': [('submission_values',
                                                                                                        [],
                                                                                                        ''),
                                                                                                       ('save',
                                                                                                        ['force_insert=False',
                                                                                                         'force_update=False',
                                                                                                         'using=None'],
                                                                                                        "\n        Assigns our confirmation id.  We increment our confirmation id's for each form \n        for every submission.  \n        "),
                                                                                                       ('__unicode__',
                                                                                                        [],
                                                                                                        '')],
                                                                                           'properties': ['xform',
                                                                                                          'type',
                                                                                                          'connection',
                                                                                                          'raw',
                                                                                                          'has_errors',
                                                                                                          'created',
                                                                                                          'confirmation_id',
                                                                                                          'message',
                                                                                                          'confirmation_lock',
                                                                                                          'errors',
                                                                                                          '_values']},
             'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.models.XFormSubmissionValue': {'bases': ['eav.models.Value'],
                                                                                                'constructor': [],
                                                                                                'docstring': "\n    Stores a value for a field that was submitted.  Note that this is a rather inelegant\n    representation of the data, in that nothing is typed.  This is by design.  It isn't\n    the job of XForms to store your cannonical version of the data, only to allow easy\n    collection and validation.\n    ",
                                                                                                'methods': [('cleaned',
                                                                                                             [],
                                                                                                             ''),
                                                                                                            ('value_formatted',
                                                                                                             [],
                                                                                                             '\n        Returns a nicer version of our value, mostly just shortening decimals to be more sane.\n        '),
                                                                                                            ('__unicode__',
                                                                                                             [],
                                                                                                             '')],
                                                                                                'properties': ['submission']},
             'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.tests.ModelTest': {'bases': ['django.test.TestCase'],
                                                                                    'constructor': [],
                                                                                    'docstring': '',
                                                                                    'methods': [('setUp',
                                                                                                 [],
                                                                                                 ''),
                                                                                                ('failIfValid',
                                                                                                 ['constraint',
                                                                                                  'value',
                                                                                                  'type'],
                                                                                                 ''),
                                                                                                ('failUnlessValid',
                                                                                                 ['constraint',
                                                                                                  'value',
                                                                                                  'type'],
                                                                                                 ''),
                                                                                                ('failIfClean',
                                                                                                 ['field',
                                                                                                  'value',
                                                                                                  'type'],
                                                                                                 ''),
                                                                                                ('failUnlessClean',
                                                                                                 ['field',
                                                                                                  'value',
                                                                                                  'type'],
                                                                                                 ''),
                                                                                                ('testMinValConstraint',
                                                                                                 [],
                                                                                                 ''),
                                                                                                ('testMaxValConstraint',
                                                                                                 [],
                                                                                                 ''),
                                                                                                ('testMinLenConstraint',
                                                                                                 [],
                                                                                                 ''),
                                                                                                ('testMaxLenConstraint',
                                                                                                 [],
                                                                                                 ''),
                                                                                                ('testReqValConstraint',
                                                                                                 [],
                                                                                                 ''),
                                                                                                ('testRegexConstraint',
                                                                                                 [],
                                                                                                 ''),
                                                                                                ('testIntField',
                                                                                                 [],
                                                                                                 ''),
                                                                                                ('testDecField',
                                                                                                 [],
                                                                                                 ''),
                                                                                                ('testStrField',
                                                                                                 [],
                                                                                                 ''),
                                                                                                ('testGPSField',
                                                                                                 [],
                                                                                                 ''),
                                                                                                ('testFieldConstraints',
                                                                                                 [],
                                                                                                 '')],
                                                                                    'properties': ['user',
                                                                                                   'xform']},
             'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.tests.SubmissionTest': {'bases': ['django.test.TestCase'],
                                                                                         'constructor': [],
                                                                                         'docstring': '',
                                                                                         'methods': [('setUp',
                                                                                                      [],
                                                                                                      ''),
                                                                                                     ('testDataTypes',
                                                                                                      [],
                                                                                                      ''),
                                                                                                     ('testOrdering',
                                                                                                      [],
                                                                                                      ''),
                                                                                                     ('testSlugs',
                                                                                                      [],
                                                                                                      ''),
                                                                                                     ('testSMSSubmission',
                                                                                                      [],
                                                                                                      ''),
                                                                                                     ('testSingleFieldSpecialCase',
                                                                                                      [],
                                                                                                      ''),
                                                                                                     ('testSignal',
                                                                                                      [],
                                                                                                      ''),
                                                                                                     ('testUpdateFromDict',
                                                                                                      [],
                                                                                                      ''),
                                                                                                     ('testCustomField',
                                                                                                      [],
                                                                                                      ''),
                                                                                                     ('testConfirmationId',
                                                                                                      [],
                                                                                                      ''),
                                                                                                     ('testTemplateResponse',
                                                                                                      [],
                                                                                                      ''),
                                                                                                     ('testCommandPrefixes',
                                                                                                      [],
                                                                                                      ''),
                                                                                                     ('testSeparators',
                                                                                                      [],
                                                                                                      ''),
                                                                                                     ('testCustomKeywordPrefix',
                                                                                                      [],
                                                                                                      ''),
                                                                                                     ('testCustomResponse',
                                                                                                      [],
                                                                                                      ''),
                                                                                                     ('testFindForm',
                                                                                                      [],
                                                                                                      '\n        Tests how we find which form a particular message matches.\n        '),
                                                                                                     ('testApp',
                                                                                                      [],
                                                                                                      '\n        Tests that our main app.py handles messages correctly.  More detailed testing is done at a unit\n        level, this just makes sure that the main routing works.\n        '),
                                                                                                     ('testEpi',
                                                                                                      [],
                                                                                                      ''),
                                                                                                     ('testPullerCustomerField',
                                                                                                      [],
                                                                                                      ''),
                                                                                                     ('testAgeCustomField',
                                                                                                      [],
                                                                                                      ''),
                                                                                                     ('testImportSubmissions',
                                                                                                      [],
                                                                                                      ''),
                                                                                                     ('testMultimediaOptionalOnSMS',
                                                                                                      [],
                                                                                                      ''),
                                                                                                     ('testODKDefinition',
                                                                                                      [],
                                                                                                      ''),
                                                                                                     ('testODKSubmission',
                                                                                                      [],
                                                                                                      ''),
                                                                                                     ('testRestrictMessage',
                                                                                                      [],
                                                                                                      ''),
                                                                                                     ('testODKAuth',
                                                                                                      [],
                                                                                                      ''),
                                                                                                     ('testODKFiltering',
                                                                                                      [],
                                                                                                      ''),
                                                                                                     ('testODKGetSecurity',
                                                                                                      [],
                                                                                                      ''),
                                                                                                     ('testUserLookup',
                                                                                                      [],
                                                                                                      '\n        Tests that we can look up a user by a connection if a model with a\n        connection_set is used as the Django Profile object\n        '),
                                                                                                     ('testSMSSecurity',
                                                                                                      [],
                                                                                                      '\n        Tests that forms with restrict_to set will only accept submissions that are valid.\n        ')],
                                                                                         'properties': ['user',
                                                                                                        'xform',
                                                                                                        'gender_field',
                                                                                                        'field',
                                                                                                        'name_field',
                                                                                                        'xform2',
                                                                                                        'group']},
             'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.tests.TestProfile': {'bases': ['django.db.models.Model'],
                                                                                      'constructor': [],
                                                                                      'docstring': '',
                                                                                      'methods': [('lookup_by_connection',
                                                                                                   ['connection'],
                                                                                                   '')],
                                                                                      'properties': ['user',
                                                                                                     'connection']},
             'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.views.ConstraintForm': {'bases': ['django.forms.ModelForm'],
                                                                                         'constructor': [],
                                                                                         'docstring': '',
                                                                                         'methods': [],
                                                                                         'properties': []},
             'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.views.FieldForm': {'bases': ['django.forms.ModelForm'],
                                                                                    'constructor': [],
                                                                                    'docstring': '',
                                                                                    'methods': [('updateTypes',
                                                                                                 [],
                                                                                                 ''),
                                                                                                ('clean_field_type',
                                                                                                 [],
                                                                                                 '')],
                                                                                    'properties': []},
             'mtrack_project.static.uganda.config.Groups': {'bases': ['object'],
                                                            'constructor': [],
                                                            'docstring': '',
                                                            'methods': [],
                                                            'properties': ['EPT',
                                                                           'EM',
                                                                           'GROUPS']},
             'mtrack_project.static.uganda.config.LocationCodes': {'bases': ['object'],
                                                                   'constructor': [],
                                                                   'docstring': '\n    These correspond to LocationType.code\n    ',
                                                                   'methods': [],
                                                                   'properties': ['COUNTRY',
                                                                                  'REGION',
                                                                                  'DISTRICT',
                                                                                  'COUNTY',
                                                                                  'SUB_COUNTY',
                                                                                  'PARISH',
                                                                                  'VILLAGE',
                                                                                  'SUB_VILLAGE',
                                                                                  'FACILITY',
                                                                                  'OFFICE']},
             'mtrack_project.static.uganda.config.Messages': {'bases': ['object'],
                                                              'constructor': [],
                                                              'docstring': '',
                                                              'methods': [],
                                                              'properties': ['HSA_HELP',
                                                                             'MANAGER_HELP',
                                                                             'LEAVE_NOT_REGISTERED',
                                                                             'LEAVE_CONFIRM',
                                                                             'SOH_HELP_MESSAGE',
                                                                             'SUPERVISOR_SOH_NOTIFICATION',
                                                                             'SOH_ORDER_CONFIRM',
                                                                             'RECEIPT_CONFIRM',
                                                                             'RECEIPT_FROM_CONFIRM',
                                                                             'ORDERREADY_HELP_MESSAGE',
                                                                             'APPROVAL_RESPONSE',
                                                                             'APPROVAL_NOTICE',
                                                                             'STOCKOUT_HELP',
                                                                             'STOCKOUT_RESPONSE',
                                                                             'STOCKOUT_NOTICE',
                                                                             'SUPERVISOR_STOCKOUT_NOTIFICATION',
                                                                             'EMERGENCY_HELP',
                                                                             'SUPERVISOR_EMERGENCY_SOH_NOTIFICATION',
                                                                             'TRANSFER_HELP_MESSAGE',
                                                                             'TRANSFER_RESPONSE',
                                                                             'TRANSFER_CONFIRM',
                                                                             'NO_PENDING_TRANSFERS',
                                                                             'CONFIRM_RESPONSE',
                                                                             'REPORT_HELP',
                                                                             'BAD_REPORT_KEYWORD',
                                                                             'REPORT_SOH_RESPONSE',
                                                                             'REPORT_RECEIPT_RESPONSE',
                                                                             'ALREADY_REGISTERED',
                                                                             'UNKNOWN_LOCATION',
                                                                             'REGISTRATION_REQUIRED_MESSAGE',
                                                                             'UNSUPPORTED_OPERATION',
                                                                             'UNKNOWN_HSA',
                                                                             'UNKNOWN_ROLE',
                                                                             'NO_SUPPLY_POINT_MESSAGE',
                                                                             'GENERIC_ERROR',
                                                                             'NO_IN_CHARGE',
                                                                             'REGISTRATION_CONFIRM',
                                                                             'ADD_HELP_MESSAGE',
                                                                             'REMOVE_HELP_MESSAGE',
                                                                             'ADD_FAILURE_MESSAGE',
                                                                             'REMOVE_FAILURE_MESSAGE',
                                                                             'ADD_SUCCESS_MESSAGE',
                                                                             'REMOVE_SUCCESS_MESSAGE',
                                                                             'UNKNOWN_CODE',
                                                                             'HSA_NAG_FIRST',
                                                                             'HSA_NAG_SECOND',
                                                                             'HSA_NAG_THIRD',
                                                                             'HSA_SUPERVISOR_NAG',
                                                                             'PARTIAL_FILL_HELP',
                                                                             'PARTIAL_FILL_RESPONSE',
                                                                             'PARTIAL_FILL_NOTICE',
                                                                             'SUPERVISOR_TITLE',
                                                                             'GET_HELP_MESSAGE',
                                                                             'NO_CODE_ERROR',
                                                                             'NO_QUANTITY_ERROR',
                                                                             'REGISTER_MESSAGE']},
             'mtrack_project.static.uganda.config.Operations': {'bases': ['object'],
                                                                'constructor': [],
                                                                'docstring': '',
                                                                'methods': [],
                                                                'properties': ['FILL_ORDER',
                                                                               'MAKE_TRANSFER',
                                                                               'CONFIRM_TRANSFER',
                                                                               'REPORT_FOR_OTHERS',
                                                                               'REPORT_STOCK',
                                                                               'REPORT_RECEIPT',
                                                                               'ADD_PRODUCT',
                                                                               'REMOVE_PRODUCT']},
             'mtrack_project.static.uganda.config.ProductTypes': {'bases': ['object'],
                                                                  'constructor': [],
                                                                  'docstring': '',
                                                                  'methods': [],
                                                                  'properties': ['MALARIA',
                                                                                 'ALL']},
             'mtrack_project.static.uganda.config.Products': {'bases': ['object'],
                                                              'constructor': [],
                                                              'docstring': '',
                                                              'methods': [],
                                                              'properties': ['RAPID_DIAGNOSTIC_TEST',
                                                                             'SIX_PACK',
                                                                             'TWELVE_PACK',
                                                                             'EIGHTEEN_PACK',
                                                                             'TWENTY_FOUR_PACK',
                                                                             'OTHER_ACT_STOCK',
                                                                             'QUININE',
                                                                             'ALL']},
             'mtrack_project.static.uganda.config.Responsibilities': {'bases': ['object'],
                                                                      'constructor': [],
                                                                      'docstring': '\n    Responsibilities go here\n    ',
                                                                      'methods': [],
                                                                      'properties': ['STOCK_ON_HAND_RESPONSIBILITY',
                                                                                     'REPORTEE',
                                                                                     'ALL']},
             'mtrack_project.static.uganda.config.Roles': {'bases': ['object'],
                                                           'constructor': [],
                                                           'docstring': '\n    Roles go here\n    ',
                                                           'methods': [],
                                                           'properties': ['HSA',
                                                                          'SENIOR_HSA',
                                                                          'IN_CHARGE',
                                                                          'CLUSTER_SUPERVISOR',
                                                                          'DISTRICT_SUPERVISOR',
                                                                          'DISTRICT_PHARMACIST',
                                                                          'IMCI_COORDINATOR',
                                                                          'ALL_ROLES']},
             'mtrack_project.static.uganda.config.SupplyPointCodes': {'bases': ['object'],
                                                                      'constructor': [],
                                                                      'docstring': '\n    These correspond to SupplyPointType.code\n    ',
                                                                      'methods': [],
                                                                      'properties': ['REGIONAL_HOSPITAL',
                                                                                     'HOSPITAL',
                                                                                     'HEALTH_CENTER',
                                                                                     'CLINIC',
                                                                                     'ALL']},
             'poll.app.App': {'bases': ['rapidsms.apps.base.AppBase'],
                              'constructor': [],
                              'docstring': '',
                              'methods': [('handle', ['message'], '')],
                              'properties': []},
             'poll.extensions.rapidsms.contact.LocatedContact': {'bases': ['django.db.models.Model'],
                                                                 'constructor': [],
                                                                 'docstring': "\n    This extension for Contacts allows developers to tie a Contact to\n    the Area object they're reporting from.  This extension\n    depends on the simple_locations app.\n    ",
                                                                 'methods': [],
                                                                 'properties': ['reporting_location']},
             'poll.forms.CategoryForm': {'bases': ['django.forms.ModelForm'],
                                         'constructor': [],
                                         'docstring': '',
                                         'methods': [('clean', [], '')],
                                         'properties': ['name',
                                                        'default',
                                                        'response',
                                                        'priority',
                                                        'i',
                                                        'color']},
             'poll.forms.EditPollForm': {'bases': ['django.forms.ModelForm'],
                                         'constructor': ['data=None', '**kwargs'],
                                         'docstring': '',
                                         'methods': [('clean', [], '')],
                                         'properties': []},
             'poll.forms.NewPollForm': {'bases': ['django.forms.Form'],
                                        'constructor': ['data=None', '**kwargs'],
                                        'docstring': '',
                                        'methods': [('updateTypes', [], ''), ('clean', [], '')],
                                        'properties': ['TYPE_YES_NO',
                                                       'type',
                                                       'response_type',
                                                       'name',
                                                       'question',
                                                       'default_response',
                                                       'start_immediately',
                                                       'contacts']},
             'poll.forms.RuleForm': {'bases': ['django.forms.ModelForm'],
                                     'constructor': [],
                                     'docstring': '',
                                     'methods': [('clean', [], '')],
                                     'properties': ['rule_string', 'rule_type']},
             'poll.migrations.0001_initial.Migration': {'bases': ['south.v2.SchemaMigration'],
                                                        'constructor': [],
                                                        'docstring': '',
                                                        'methods': [('forwards', ['orm'], ''),
                                                                    ('backwards', ['orm'], '')],
                                                        'properties': ['models',
                                                                       'complete_apps']},
             'poll.migrations.0003_auto__add_field_poll_response_type.Migration': {'bases': ['south.v2.SchemaMigration'],
                                                                                   'constructor': [],
                                                                                   'docstring': '',
                                                                                   'methods': [('forwards',
                                                                                                ['orm'],
                                                                                                ''),
                                                                                               ('backwards',
                                                                                                ['orm'],
                                                                                                '')],
                                                                                   'properties': ['models',
                                                                                                  'complete_apps']},
             'poll.models.Category': {'bases': ['django.db.models.Model'],
                                      'constructor': [],
                                      'docstring': "\n    A category is a 'bucket' that an incoming poll response is placed into.\n    \n    Categories have rules, which are regular expressions that a message must\n    satisfy to belong to a particular category (otherwise a response will have\n    None for its category). FIXME does this make sense, or should all polls\n    have a default 'unknown' category?\n    ",
                                      'methods': [('clear_defaults', ['poll'], ''),
                                                  ('__unicode__', [], '')],
                                      'properties': ['name',
                                                     'poll',
                                                     'priority',
                                                     'color',
                                                     'default',
                                                     'response',
                                                     'error_category']},
             'poll.models.LocationResponseForm': {'bases': ['poll.models.ResponseForm'],
                                                  'constructor': [],
                                                  'docstring': '',
                                                  'methods': [],
                                                  'properties': ['value']},
             'poll.models.NameResponseForm': {'bases': ['poll.models.ResponseForm'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [],
                                              'properties': ['value']},
             'poll.models.NumericResponseForm': {'bases': ['poll.models.ResponseForm'],
                                                 'constructor': [],
                                                 'docstring': '',
                                                 'methods': [],
                                                 'properties': ['value']},
             'poll.models.Poll': {'bases': ['django.db.models.Model'],
                                  'constructor': [],
                                  'docstring': '\n    Polls represent a simple-question, simple-response communication modality\n    via SMS.  They can be thought of as a similar to a single datum in an XForm,\n    although for now the only data types available are yes/no, free-form text, and\n    numeric response.  Fairly simple idea, a poll is created, containing a question \n    (the outgoing messages), a list of contacts (those to poll) and an expected\n    *type* of response.  The poll can be edited, contact lists modified, etc. via\n    the web (the "user"), until it is eventually *started.*  When a poll is started,\n    the outgoing question will be sent to all contacts, and any subsequent messages\n    coming in from the contacts associated with this poll (until they are polled again)\n    will be parsed (or attempted to be parsed) by this poll, and bucketed into a \n    particular category.\n    \n    FIXME: contact groups, if implemented in core or contrib, should be used here,\n           instead of a many-to-many field\n    ',
                                  'methods': [('register_poll_type',
                                               ['field_type',
                                                'label',
                                                'parserFunc',
                                                'db_type=TYPE_TEXT',
                                                'view_template=None',
                                                'edit_template=None',
                                                'report_columns=None',
                                                'edit_form=None'],
                                               "\n        Used to register a new question type for Polls.  You can use this method to build new question types that are\n        available when building Polls.  These types may just do custom parsing of the SMS text sent in, then stuff\n        those results in a normal core datatype, or they may lookup and reference completely custom attributes.\n\n        Arguments are:\n           label:       The label used for this field type in the user interface\n           field_type:  A slug to identify this field type, must be unique across all field types\n           parser:      The function called to turn the raw string into the appropriate type, should take one argument:\n                        'value' the string value submitted.\n           db_type:     How the value will be stored in the database, can be one of: TYPE_FLOAT, TYPE_TEXT or TYPE_OBJECT\n                        (defaults to TYPE_TEXT)\n           [view_template]: A template that renders an individual row in a table displaying responses\n           [edit_template]: A template that renders an individual row for editing a response\n           [report_columns]: the column labels for a table of responses for a poll of a particular type\n           [edit_form]: A custom edit form for editing responses\n        "),
                                              ('create_with_bulk',
                                               ['name',
                                                'type',
                                                'question',
                                                'default_response',
                                                'contacts',
                                                'user'],
                                               ''),
                                              ('add_yesno_categories',
                                               [],
                                               '\n        This creates a generic yes/no poll categories for a particular poll\n        '),
                                              ('is_yesno_poll', [], ''),
                                              ('start',
                                               [],
                                               '\n        This starts the poll: outgoing messages are sent to all the contacts\n        registered with this poll, and the start date is updated accordingly.\n        All incoming messages from these users will be considered as\n        potentially a response to this poll.\n        '),
                                              ('end', [], ''),
                                              ('reprocess_responses', [], ''),
                                              ('process_response', ['message'], ''),
                                              ('get_numeric_detailed_data', [], ''),
                                              ('get_numeric_report_data',
                                               ['location=None', 'for_map=None'],
                                               ''),
                                              ('responses_by_category',
                                               ['location=None', 'for_map=True'],
                                               ''),
                                              ('__unicode__', [], '')],
                                  'properties': ['TYPE_TEXT',
                                                 'TYPE_NUMERIC',
                                                 'TYPE_LOCATION',
                                                 'TYPE_REGISTRATION',
                                                 'RESPONSE_TYPE_ALL',
                                                 'RESPONSE_TYPE_ONE',
                                                 'RESPONSE_TYPE_NO_DUPS',
                                                 'RESPONSE_TYPE_CHOICES',
                                                 'TYPE_CHOICES',
                                                 'name',
                                                 'question',
                                                 'messages',
                                                 'contacts',
                                                 'user',
                                                 'start_date',
                                                 'end_date',
                                                 'type',
                                                 'default_response',
                                                 'sites',
                                                 'objects',
                                                 'on_site',
                                                 'bulk',
                                                 'response_type']},
             'poll.models.Response': {'bases': ['django.db.models.Model'],
                                      'constructor': [],
                                      'docstring': "\n    Responses tie incoming messages from poll participants to a particular\n    bucket that their response is associated with.  Web users may also be\n    able to override a particular response as belonging to a particular\n    category, which shouldn't be overridden by new rules.\n    ",
                                      'methods': [('update_categories',
                                                   ['categories', 'user'],
                                                   '')],
                                      'properties': ['message',
                                                     'poll',
                                                     'contact',
                                                     'date',
                                                     'has_errors']},
             'poll.models.ResponseCategory': {'bases': ['django.db.models.Model'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [],
                                              'properties': ['category',
                                                             'response',
                                                             'is_override',
                                                             'user']},
             'poll.models.ResponseForm': {'bases': ['django.forms.Form'],
                                          'constructor': ['data=None', '**kwargs'],
                                          'docstring': '',
                                          'methods': [],
                                          'properties': []},
             'poll.models.Rule': {'bases': ['django.db.models.Model'],
                                  'constructor': [],
                                  'docstring': '\n    A rule is a regular expression that an incoming message text might\n    satisfy to belong in a particular category.  A message must satisfy\n    one or more rules to belong to a category.\n    ',
                                  'methods': [('update_regex', [], '')],
                                  'properties': ['TYPE_STARTSWITH',
                                                 'TYPE_CONTAINS',
                                                 'TYPE_REGEX',
                                                 'RULE_CHOICES',
                                                 'RULE_DICTIONARY',
                                                 'regex',
                                                 'category',
                                                 'rule_type',
                                                 'rule_string',
                                                 'rule_type_friendly']},
             'poll.tests.BasicPatternTemplateTest': {'bases': ['django.test.TestCase'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [('test_basic_pattern_template',
                                                                  [],
                                                                  '')],
                                                     'properties': []},
             'poll.tests.ProcessingTests': {'bases': ['rapidsms.tests.scripted.TestScript'],
                                            'constructor': [],
                                            'docstring': '',
                                            'methods': [('setUp', [], ''),
                                                        ('test_simple_poll_responses', [], ''),
                                                        ('test_yes_no_polls', [], ''),
                                                        ('test_numeric_polls', [], ''),
                                                        ('test_recategorization', [], ''),
                                                        ('test_response_type_handling', [], '')],
                                            'properties': ['user',
                                                           'backend',
                                                           'contact1',
                                                           'connection1',
                                                           'contact2',
                                                           'connection2']},
             'poll.tests.TestScript': {'bases': ['django.test.TestCase'],
                                       'constructor': [],
                                       'docstring': '',
                                       'methods': [('fake_incoming',
                                                    ['connection', 'incoming_message'],
                                                    ''),
                                                   ('assertInteraction',
                                                    ['connection',
                                                     'incoming_message',
                                                     'expected_response'],
                                                    '')],
                                       'properties': []},
             'rapidsms.admin.ConnectionInline': {'bases': ['django.contrib.admin.TabularInline'],
                                                 'constructor': [],
                                                 'docstring': '',
                                                 'methods': [],
                                                 'properties': ['model', 'extra']},
             'rapidsms.admin.ContactAdmin': {'bases': ['django.contrib.admin.ModelAdmin'],
                                             'constructor': [],
                                             'docstring': '',
                                             'methods': [],
                                             'properties': ['inlines']},
             'rapidsms.apps.base.AppBase': {'bases': ['object', 'log.mixin.LoggerMixin'],
                                            'constructor': ['router'],
                                            'docstring': '\n    ',
                                            'methods': [('find',
                                                         ['app_name'],
                                                         '\n        Return the RapidSMS app class from *app_name* (a standard Django\n        app name), or None if it does not exist. Import errors raised\n        *within* the module are allowed to propagate.\n        '),
                                                        ('_logger_name', [], ''),
                                                        ('__unicode__', [], ''),
                                                        ('__repr__', [], ''),
                                                        ('start', [], ''),
                                                        ('stop', [], ''),
                                                        ('filter', ['msg'], ''),
                                                        ('parse', ['msg'], ''),
                                                        ('handle', ['msg'], ''),
                                                        ('default', ['msg'], ''),
                                                        ('catch', ['msg'], ''),
                                                        ('cleanup', ['msg'], ''),
                                                        ('outgoing', ['msg'], '')],
                                            'properties': ['router', 'name']},
             'rapidsms.backends.base.BackendBase': {'bases': ['object', 'log.mixin.LoggerMixin'],
                                                    'constructor': ['router',
                                                                    'name',
                                                                    '**kwargs'],
                                                    'docstring': '\n    ',
                                                    'methods': [('find', ['module_name'], ''),
                                                                ('_logger_name', [], ''),
                                                                ('__unicode__', [], ''),
                                                                ('__repr__', [], ''),
                                                                ('start', [], ''),
                                                                ('run', [], ''),
                                                                ('stop', [], ''),
                                                                ('message',
                                                                 ['identity',
                                                                  'text',
                                                                  'received_at=None'],
                                                                 ''),
                                                                ('route', ['msg'], ''),
                                                                ('next_message',
                                                                 [],
                                                                 '\n        Returns the next incoming message waiting to be processed, or\n        None if there are none pending.\n        ')],
                                                    'properties': ['_queue',
                                                                   '_running',
                                                                   'router',
                                                                   'name',
                                                                   '_config',
                                                                   'running',
                                                                   'model']},
             'rapidsms.backends.bucket.BucketBackend': {'bases': ['base.BackendBase'],
                                                        'constructor': [],
                                                        'docstring': '',
                                                        'methods': [('start', [], ''),
                                                                    ('receive',
                                                                     ['identity', 'text'],
                                                                     ''),
                                                                    ('send', ['msg'], '')],
                                                        'properties': ['bucket']},
             'rapidsms.backends.email.Backend': {'bases': ['base.BackendBase'],
                                                 'constructor': [],
                                                 'docstring': 'Backend to interact with email.  Link this to an smtp and imap account.\n       The account will be polled and every unread message will be sent (the \n       body) to the router as if it was an SMS.  As soon as messages are found\n       they are marked read.  \n       \n       This backend creates EmailMessage messages, which are an extension of \n       messages that include a subject and mime_type.  Currently we do not\n       do anything smart with attachments.\n    ',
                                                 'methods': [('configure',
                                                              ["smtp_host='localhost'",
                                                               'smtp_port=25',
                                                               "imap_host='localhost'",
                                                               'imap_port=143',
                                                               "username='demo-user@domain.com'",
                                                               "password='secret'",
                                                               'use_tls=True',
                                                               'poll_interval=60'],
                                                              ''),
                                                             ('send', ['email_message'], ''),
                                                             ('run', [], ''),
                                                             ('_get_new_messages', [], ''),
                                                             ('message_from_imap',
                                                              ['imap_mail'],
                                                              'From an IMAP message object, get a rapidsms message object')],
                                                 'properties': ['_title',
                                                                'smtp_host',
                                                                'smtp_port',
                                                                'imap_host',
                                                                'imap_port',
                                                                'username',
                                                                'password',
                                                                'use_tls',
                                                                'poll_interval']},
             'rapidsms.backends.gsm.Backend': {'bases': ['base.BackendBase'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [('configure', ['**kwargs'], ''),
                                                           ('__str__', [], ''),
                                                           ('_wait_for_modem',
                                                            [],
                                                            '\n        Blocks until this backend has connected to and initialized the modem,\n        waiting for a maximum of self.MAX_CONNECT_TIME (default=10) seconds.\n        Returns true when modem is ready, or false if it times out.\n        '),
                                                           ('send', ['message'], ''),
                                                           ('gsm_log',
                                                            ['modem', 'str', 'level'],
                                                            ''),
                                                           ('status', [], ''),
                                                           ('run', [], ''),
                                                           ('start', [], ''),
                                                           ('stop', [], '')],
                                               'properties': ['_title',
                                                              'POLL_INTERVAL',
                                                              'MAX_CONNECT_TIME',
                                                              'modem_kwargs',
                                                              'modem',
                                                              'sent_messages',
                                                              'failed_messages',
                                                              'received_messages']},
             'rapidsms.backends.http.RapidHttpBacked': {'bases': ['rapidsms.backends.base.BackendBase'],
                                                        'constructor': [],
                                                        'docstring': ' RapidSMS backend that creates and handles an HTTP server ',
                                                        'methods': [('configure',
                                                                     ["host='localhost'",
                                                                      'port=8080',
                                                                      "gateway_url='http://smsgateway.com'",
                                                                      "params_outgoing='user=my_username&password=my_password&id=%(phone_number)s&text=%(message)s'",
                                                                      "params_incoming='id=%(phone_number)s&text=%(message)s'"],
                                                                     ''),
                                                                    ('run', [], ''),
                                                                    ('handle_request',
                                                                     ['request'],
                                                                     ''),
                                                                    ('send', ['message'], '')],
                                                        'properties': ['_title',
                                                                       'host',
                                                                       'port',
                                                                       'handler',
                                                                       'gateway_url',
                                                                       'http_params_outgoing',
                                                                       'incoming_phone_number_param',
                                                                       'incoming_message_param',
                                                                       'server']},
             'rapidsms.backends.http.RapidHttpServer': {'bases': ['django.core.servers.basehttp.WSGIServer'],
                                                        'constructor': [],
                                                        'docstring': " WSGIServer that doesn't block on handle_request ",
                                                        'methods': [('handle_request',
                                                                     ['timeout=1.0'],
                                                                     '')],
                                                        'properties': []},
             'rapidsms.backends.http.RapidWSGIHandler': {'bases': ['django.core.handlers.wsgi.WSGIHandler',
                                                                   'rapidsms.log.mixin.LoggerMixin'],
                                                         'constructor': [],
                                                         'docstring': ' WSGIHandler without Django middleware and signal calls ',
                                                         'methods': [('_logger_name', [], ''),
                                                                     ('__call__',
                                                                      ['environ',
                                                                       'start_response'],
                                                                      '')],
                                                         'properties': []},
             'rapidsms.backends.irc.Backend': {'bases': ['base.BackendBase'],
                                               'constructor': ['*args', '**kwargs'],
                                               'docstring': '',
                                               'methods': [('configure',
                                                            ["host='irc.freenode.net'",
                                                             'port=6667',
                                                             'nick=None',
                                                             "channels=['#rapidsms']",
                                                             '*kwargs'],
                                                            ''),
                                                           ('run', [], ''),
                                                           ('outgoing', ['msg'], ''),
                                                           ('pubmsg',
                                                            ['connection', 'event'],
                                                            ''),
                                                           ('privmsg',
                                                            ['connection', 'event'],
                                                            '')],
                                               'properties': ['host',
                                                              'port',
                                                              'nick',
                                                              'channels',
                                                              'irc',
                                                              'server']},
             'rapidsms.backends.kannel.KannelBackend': {'bases': ['rapidsms.backends.http.RapidHttpBackend'],
                                                        'constructor': [],
                                                        'docstring': '\n    Backend for use with the Kannel SMS Gateway.\n    ',
                                                        'methods': [('configure',
                                                                     ["sendsms_url='http://127.0.0.1:13013/cgi-bin/sendsms'",
                                                                      'sendsms_params=None',
                                                                      'charset=None',
                                                                      'coding=None',
                                                                      'encode_errors=None',
                                                                      '**kwargs'],
                                                                     ''),
                                                                    ('handle_request',
                                                                     ['request'],
                                                                     ''),
                                                                    ('send', ['message'], '')],
                                                        'properties': ['sendsms_url',
                                                                       'sendsms_params',
                                                                       'charset',
                                                                       'coding',
                                                                       'encode_errors']},
             'rapidsms.backends.smpp.Backend': {'bases': ['base.BackendBase'],
                                                'constructor': ['*args', '**kwargs'],
                                                'docstring': '',
                                                'methods': [('configure', ['**args'], ''),
                                                            ('run', [], ''),
                                                            ('outgoing', ['msg'], ''),
                                                            ('recv_handler', ['**args'], '')],
                                                'properties': ['host',
                                                               'port',
                                                               'user',
                                                               'pwd',
                                                               'sender',
                                                               'system_type',
                                                               'address_range',
                                                               'source_addr_ton',
                                                               'dest_addr_ton',
                                                               'smppClient',
                                                               'justConnected']},
             'rapidsms.backends.smpp.Client': {'bases': ['rapidsms.backends.smpp.smpplib.client.Client'],
                                               'constructor': ['host', 'port', 'debug=False'],
                                               'docstring': "I needed to override certain functionality that's the reason \n        for this",
                                               'methods': [('disconnect', [], ''),
                                                           ('connect',
                                                            [],
                                                            "This method continues to attempt to connect to the server\n            until it's either successful or there's an interrupt"),
                                                           ('connectAndBind',
                                                            ['**args'],
                                                            'Connects and binds to the server as a transceiver'),
                                                           ('listen',
                                                            [],
                                                            'Listen for PDUs and act')],
                                               'properties': ['isConnected',
                                                              'isBinded',
                                                              'justConnected',
                                                              'failedToConnect',
                                                              '_socket']},
             'rapidsms.contrib.ajax.app.App': {'bases': ['rapidsms.apps.base.AppBase'],
                                               'constructor': [],
                                               'docstring': '\n    This App does nothing by itself. It exists only to serve other Apps,\n    by providing an easy (and standard) way for them to communicate\n    between their WebUI and RapidSMS App object.\n\n    When RapidSMS starts, this app starts an HTTPServer (port 8001 as\n    default, but configurable via settings.py) in a worker thread, and\n    watches for any incoming HTTP requests matching */app/method*. These\n    requests, along with their GET parameters and POST data, are passed\n    on to the named app.\n\n    Examples::\n\n    method  URL             app   method             args\n    ======  ===             ===   ======             ====\n    GET     /food/toast     food  ajax_GET_toast     { }\n    POST    /food/waffles   food  ajax_POST_waffles  { }, { }\n    POST    /food/eggs?x=1  food  ajax_POST_eggs     { "x": [1] }, { }\n\n    Any data that is returned by the handler method is JSON encoded, and\n    sent back to the WebUI in response. Since RapidSMS includes jQuery\n    with every view, this makes it very easy for apps to query their\n    running App object for state. See the _httptester_ for an example.\n\n    But wait! AJAX can\'t cross domains, so a request to port 8001 from\n    the WebUI won\'t work! This is handled by the WebUI bundled with this\n    app, that proxies all requests to /ajax/(.+) to the right place, on\n    the server side. I cannot conceive of a situation where this would\n    be a problem - but keep it in mind, and don\'t forget to prepend\n    "/ajax/" to your AJAX URLs.\n    ',
                                               'methods': [('start', [], '')],
                                               'properties': ['server', 'thread']},
             'rapidsms.contrib.ajax.exceptions.AjaxError': {'bases': ['Exception'],
                                                            'constructor': [],
                                                            'docstring': '',
                                                            'methods': [],
                                                            'properties': []},
             'rapidsms.contrib.ajax.exceptions.MalformedRouterResponse': {'bases': ['rapidsms.contrib.ajax.exceptions.AjaxError'],
                                                                          'constructor': [],
                                                                          'docstring': '\n    The router responded, but it could not be understood.\n    ',
                                                                          'methods': [],
                                                                          'properties': []},
             'rapidsms.contrib.ajax.exceptions.RouterError': {'bases': ['rapidsms.contrib.ajax.exceptions.AjaxError'],
                                                              'constructor': ['code',
                                                                              'content_type',
                                                                              'response'],
                                                              'docstring': '\n    The router responded with an HTTP 500 error, because an exception\n    was raised while processing the request.\n    ',
                                                              'methods': [('__unicode__',
                                                                           [],
                                                                           '')],
                                                              'properties': ['code',
                                                                             'content_type',
                                                                             'response']},
             'rapidsms.contrib.ajax.exceptions.RouterNotResponding': {'bases': ['rapidsms.contrib.ajax.exceptions.AjaxError'],
                                                                      'constructor': [],
                                                                      'docstring': "\n    The router did not respond. It's probably not running, or the AJAX\n    app isn't installed.\n    ",
                                                                      'methods': [],
                                                                      'properties': []},
             'rapidsms.contrib.default.app.App': {'bases': ['rapidsms.apps.base.AppBase'],
                                                  'constructor': [],
                                                  'docstring': '',
                                                  'methods': [('default', ['msg'], '')],
                                                  'properties': []},
             'rapidsms.contrib.echo.handlers.echo.EchoHandler': {'bases': ['rapidsms.contrib.handlers.handlers.keyword.KeywordHandler'],
                                                                 'constructor': [],
                                                                 'docstring': '\n    Handle any message prefixed ``echo``, responding with the remainder\n    of the text. Useful for remotely testing internationalization.\n    ',
                                                                 'methods': [('help', [], ''),
                                                                             ('handle',
                                                                              ['text'],
                                                                              '')],
                                                                 'properties': ['keyword']},
             'rapidsms.contrib.echo.handlers.ping.PingHandler': {'bases': ['rapidsms.contrib.handlers.handlers.base.BaseHandler'],
                                                                 'constructor': [],
                                                                 'docstring': '\n    Handle the (precise) message ``ping``, by responding with ``pong``.\n    Useful for remotely checking that the router is alive.\n    ',
                                                                 'methods': [('dispatch',
                                                                              ['router',
                                                                               'msg'],
                                                                              '')],
                                                                 'properties': []},
             'rapidsms.contrib.handlers.app.App': {'bases': ['rapidsms.apps.base.AppBase'],
                                                   'constructor': [],
                                                   'docstring': '',
                                                   'methods': [('start',
                                                                [],
                                                                '\n        Spiders all apps, and registers all available handlers.\n        '),
                                                               ('handle',
                                                                ['msg'],
                                                                "\n        Forwards the *msg* to every handler, and short-circuits the\n        phase if any of them accept it. The first to accept it will\n        block the others, and there's deliberately no way to predict\n        the order that they're called in. (This is intended to force\n        handlers to be as reluctant as possible.)\n        ")],
                                                   'properties': ['handlers']},
             'rapidsms.contrib.handlers.handlers.base.BaseHandler': {'bases': ['object',
                                                                               'rapidsms.log.mixin.LoggerMixin'],
                                                                     'constructor': ['router',
                                                                                     'msg'],
                                                                     'docstring': '',
                                                                     'methods': [('_logger_name',
                                                                                  [],
                                                                                  ''),
                                                                                 ('dispatch',
                                                                                  ['router',
                                                                                   'msg'],
                                                                                  ''),
                                                                                 ('respond',
                                                                                  ['template=None',
                                                                                   '**kwargs'],
                                                                                  ''),
                                                                                 ('respond_error',
                                                                                  ['template=None',
                                                                                   '**kwargs'],
                                                                                  ''),
                                                                                 ('test',
                                                                                  ['text',
                                                                                   'identity=None'],
                                                                                  '\n        Test this handler by dispatching an IncomingMessage containing\n        ``text``, as sent by ``identity`` via a mock backend. Return a\n        list containing the ``text`` property of each response, in the\n        order which they were sent.::\n\n            >>> class AlwaysHandler(BaseHandler):\n            ...\n            ...     @classmethod\n            ...     def dispatch(cls, router, msg):\n            ...         msg.respond("xxx")\n            ...         msg.respond("yyy")\n            ...         return True\n\n            >>> AlwaysHandler.test(\'anything\')\n            [\'xxx\', \'yyy\']\n\n        Return False if the handler ignored the message (ie, the\n        ``dispatch`` method returned False or None).\n\n            >>> class NeverHandler(BaseHandler):\n            ...     pass\n\n            >>> NeverHandler.test(\'anything\')\n            False\n\n        This is intended to test the handler in complete isolation. To\n        test the interaction between multiple apps and/or handlers, see\n        the rapidsms.tests.scripted module.\n        ')],
                                                                     'properties': ['router',
                                                                                    'msg']},
             'rapidsms.contrib.handlers.handlers.keyword.KeywordHandler': {'bases': ['base.BaseHandler'],
                                                                           'constructor': [],
                                                                           'docstring': '\n    This handler type can be subclassed to create simple keyword-based\n    handlers. When a message is received, it is checked against the\n    mandatory ``keyword`` attribute (a regular expression) for a prefix\n    match. For example::\n\n        >>> class AbcHandler(KeywordHandler):\n        ...    keyword = "abc"\n        ...\n        ...    def help(self):\n        ...        self.respond("Here is some help.")\n        ...\n        ...    def handle(self, text):\n        ...        self.respond("You said: %s." % text)\n\n    If the keyword is matched and followed by some text, the ``handle``\n    method is called::\n\n        >>> AbcHandler.test("abc")\n        [\'Here is some help.\']\n\n    If *just* the keyword is matched, the ``help`` method is called::\n\n        >>> AbcHandler.test("abc waffles")\n        [\'You said: waffles.\']\n\n    All other messages are silently ignored (as usual), to allow other\n    apps or handlers to catch them.\n    ',
                                                                           'methods': [('_keyword',
                                                                                        [],
                                                                                        ''),
                                                                                       ('dispatch',
                                                                                        ['router',
                                                                                         'msg'],
                                                                                        '')],
                                                                           'properties': []},
             'rapidsms.contrib.handlers.handlers.pattern.PatternHandler': {'bases': ['base.BaseHandler'],
                                                                           'constructor': [],
                                                                           'docstring': '\n    This handler type can be subclassed to create simple pattern-based\n    handlers. This isn\'t usually a good idea -- it\'s cumbersome to write\n    patterns with enough flexibility to be used in the real world -- but\n    it\'s very handy for prototyping, and can easily be upgraded later.\n\n    When a message is received, it is matched against the mandatory\n    ``pattern`` attribute (a regular expression). If the pattern is\n    matched, the ``handle`` method is called with the captures as\n    arguments. For example::\n\n        >>> class SumHandler(PatternHandler):\n        ...    pattern = r\'^(\\d+) plus (\\d+)$\'\n        ...\n        ...    def handle(self, a, b):\n        ...        a, b = int(a), int(b)\n        ...        total = a + b\n        ...\n        ...        self.respond(\n        ...            "%d+%d = %d" %\n        ...            (a, b, total))\n\n        >>> SumHandler.test("1 plus 2")\n        [\'1+2 = 3\']\n\n    Note that the pattern is not mangled for flexibility (as it was in\n    previous versions of RapidSMS), so if you choose to deploy pattern\n    handlers, your incoming messages must match *precisely*. Perhaps\n    obviously, this won\'t work because of the trailing whitespace::\n\n        >>> SumHandler.test("1 plus 2 ")\n        False\n\n    All non-matching messages are silently ignored (as usual), to allow\n    other apps or handlers to catch them.\n    ',
                                                                           'methods': [('_pattern',
                                                                                        [],
                                                                                        ''),
                                                                                       ('dispatch',
                                                                                        ['router',
                                                                                         'msg'],
                                                                                        '')],
                                                                           'properties': []},
             'rapidsms.contrib.handlers.migrations.0001_initial.Migration': {'bases': ['south.v2.SchemaMigration'],
                                                                             'constructor': [],
                                                                             'docstring': '',
                                                                             'methods': [('forwards',
                                                                                          ['orm'],
                                                                                          ''),
                                                                                         ('backwards',
                                                                                          ['orm'],
                                                                                          '')],
                                                                             'properties': ['models',
                                                                                            'complete_apps']},
             'rapidsms.contrib.httptester.app.App': {'bases': ['rapidsms.apps.base.AppBase'],
                                                     'constructor': [],
                                                     'docstring': '\n    What\n    ',
                                                     'methods': [('_wait_for_message',
                                                                  ['msg'],
                                                                  ''),
                                                                 ('start', [], ''),
                                                                 ('ajax_POST_send',
                                                                  ['get', 'post'],
                                                                  ''),
                                                                 ('ajax_GET_log', ['get'], '')],
                                                     'properties': ['backend']},
             'rapidsms.contrib.httptester.backend.MessageTestBackend': {'bases': ['rapidsms.backends.base.BackendBase'],
                                                                        'constructor': [],
                                                                        'docstring': '\n    Mock backend, for dispatching incoming messages from the WebUI.\n    ',
                                                                        'methods': [],
                                                                        'properties': []},
             'rapidsms.contrib.httptester.forms.MessageForm': {'bases': ['django.forms.Form'],
                                                               'constructor': [],
                                                               'docstring': '',
                                                               'methods': [],
                                                               'properties': ['identity',
                                                                              'text',
                                                                              'bulk']},
             'rapidsms.contrib.httptester.forms.SmallFileField': {'bases': ['django.forms.FileField'],
                                                                  'constructor': [],
                                                                  'docstring': '',
                                                                  'methods': [('widget_attrs',
                                                                               ['widget'],
                                                                               '')],
                                                                  'properties': []},
             'rapidsms.contrib.locations.admin.LocationAdmin': {'bases': ['django.contrib.admin.ModelAdmin'],
                                                                'constructor': [],
                                                                'docstring': '',
                                                                'methods': [],
                                                                'properties': ['model']},
             'rapidsms.contrib.locations.admin.LocationTypeAdmin': {'bases': ['django.contrib.admin.ModelAdmin'],
                                                                    'constructor': [],
                                                                    'docstring': '',
                                                                    'methods': [],
                                                                    'properties': ['model']},
             'rapidsms.contrib.locations.app.App': {'bases': ['rapidsms.apps.base.AppBase'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [('__find_location',
                                                                 ['text'],
                                                                 ''),
                                                                ('parse', ['msg'], '')],
                                                    'properties': ['PATTERN']},
             'rapidsms.contrib.locations.forms.LocationForm': {'bases': ['django.forms.ModelForm'],
                                                               'constructor': [],
                                                               'docstring': '',
                                                               'methods': [],
                                                               'properties': ['point']},
             'rapidsms.contrib.locations.forms.PointField': {'bases': ['django.forms.fields.MultiValueField'],
                                                             'constructor': ['*args',
                                                                             '**kwargs'],
                                                             'docstring': '',
                                                             'methods': [('compress',
                                                                          ['data_list'],
                                                                          '')],
                                                             'properties': ['widget',
                                                                            'default_error_messages']},
             'rapidsms.contrib.locations.forms.PointWidget': {'bases': ['django.forms.widgets.MultiWidget'],
                                                              'constructor': ['attrs=None'],
                                                              'docstring': '',
                                                              'methods': [('decompress',
                                                                           ['value'],
                                                                           '')],
                                                              'properties': ['default_attrs']},
             'rapidsms.contrib.locations.migrations.0001_initial.Migration': {'bases': ['south.v2.SchemaMigration'],
                                                                              'constructor': [],
                                                                              'docstring': '',
                                                                              'methods': [('forwards',
                                                                                           ['orm'],
                                                                                           ''),
                                                                                          ('backwards',
                                                                                           ['orm'],
                                                                                           '')],
                                                                              'properties': ['models',
                                                                                             'complete_apps']},
             'rapidsms.contrib.locations.migrations.0002_initial.Migration': {'bases': ['south.v2.SchemaMigration'],
                                                                              'constructor': [],
                                                                              'docstring': '',
                                                                              'methods': [('forwards',
                                                                                           ['orm'],
                                                                                           ''),
                                                                                          ('backwards',
                                                                                           ['orm'],
                                                                                           '')],
                                                                              'properties': ['models',
                                                                                             'complete_apps']},
             'rapidsms.contrib.locations.models.Location': {'bases': ['django.db.models.Model'],
                                                            'constructor': [],
                                                            'docstring': '\n    This model represents a named point on the globe. It is deliberately\n    spartan, so more specific apps can extend it with their own fields\n    and relationships without clashing with built-in functionality.\n    ',
                                                            'methods': [('__unicode__',
                                                                         [],
                                                                         '\n        '),
                                                                        ('get_for_uid',
                                                                         [],
                                                                         '\n        Return the object (an instance of a subclass of Location) named\n        by ``uid``. The UID should be in the form ``model:id``, as\n        returned by the Location.uid property.\n        '),
                                                                        ('subclasses',
                                                                         [],
                                                                         '\n        Return a list of all known subclasses of Location.\n        '),
                                                                        ('as_html',
                                                                         [],
                                                                         '\n        Return the HTML fragment to be embedded in the map. This method\n        should be overridden by subclasses wishing to fully customize\n        the the rendering of their instance in the map.\n\n        The output of this method is not escaped before being included\n        in the template, so be careful to escape it yourself.\n        ')],
                                                            'properties': ['__metaclass__',
                                                                           'name',
                                                                           'point',
                                                                           'parent_type',
                                                                           'parent_id',
                                                                           'parent',
                                                                           'uid',
                                                                           'content_type',
                                                                           'path',
                                                                           'label',
                                                                           'css_class',
                                                                           'direction']},
             'rapidsms.contrib.locations.models.LocationType': {'bases': ['django.db.models.Model'],
                                                                'constructor': [],
                                                                'docstring': "\n    This model represents the 'type' of Location, as an option for a\n    simpler way of having a location heirarchy without having different\n    classes for each location type (as is supported by the generic \n    relation to parent).  \n    ",
                                                                'methods': [('__unicode__',
                                                                             [],
                                                                             '')],
                                                                'properties': ['name', 'slug']},
             'rapidsms.contrib.locations.models.Point': {'bases': ['django.db.models.Model'],
                                                         'constructor': [],
                                                         'docstring': "\n    This model represents an anonymous point on the globe. It should be\n    replaced with something from GeoDjango soon, but I can't seem to get\n    Spatialite to build right now...\n    ",
                                                         'methods': [('__unicode__', [], ''),
                                                                     ('__repr__', [], '')],
                                                         'properties': ['latitude', 'longitude']},
             'rapidsms.contrib.locations.nested.extensions.locations.location.NestedLocation': {'bases': ['django.db.models.Model'],
                                                                                                'constructor': [],
                                                                                                'docstring': '\n    rapidsms.contrib.locations.nested makes the following assumptions about the\n    needs of a deployment for its locations models:\n        * They are concrete, heirarchical, and follow the same structure at every\n          level (e.g. districts, subcounties, parishes, and towns are all\n          more-or-less the same and serve solely as administrative boundaries.\n        * They must be used for aggregation, and querying a subtree must be fast.\n    This abstract class allows the default Location class in\n    rapidsms.contrib.locations to inherit two additional fields:\n     * type :\n           As NestedLocations are concrete, they will have instances that\n           may need to be differentiated by type.\n     * tree_parent :\n           As NestedLocations are uniformely typed, the need to have\n           a non-generic relation to their parents.\n    The MetaOverride attribute makes the base Location model concrete.\n    ',
                                                                                                'methods': [],
                                                                                                'properties': ['tree_parent',
                                                                                                               'type']},
             'rapidsms.contrib.locations.tables.LocationTable': {'bases': ['djtables.Table'],
                                                                 'constructor': [],
                                                                 'docstring': '',
                                                                 'methods': [],
                                                                 'properties': ['name']},
             'rapidsms.contrib.locations.views.LocationTypeStub': {'bases': ['object'],
                                                                   'constructor': ['type',
                                                                                   'req',
                                                                                   'loc'],
                                                                   'docstring': "\n    This is a shim class, to encapsulate the nested type/location\n    structure, and keep the code out of the template. It's not useful\n    anywhere else, so I haven't moved it into a template tag.\n    ",
                                                                   'methods': [('singular',
                                                                                [],
                                                                                ''),
                                                                               ('plural',
                                                                                [],
                                                                                ''),
                                                                               ('name', [], ''),
                                                                               ('content_type',
                                                                                [],
                                                                                ''),
                                                                               ('prefix',
                                                                                [],
                                                                                ''),
                                                                               ('table',
                                                                                [],
                                                                                ''),
                                                                               ('form', [], ''),
                                                                               ('locations',
                                                                                [],
                                                                                ''),
                                                                               ('is_empty',
                                                                                [],
                                                                                '')],
                                                                   'properties': ['_type',
                                                                                  '_req',
                                                                                  '_loc']},
             'rapidsms.contrib.messagelog.admin.MessageAdmin': {'bases': ['django.contrib.admin.ModelAdmin'],
                                                                'constructor': [],
                                                                'docstring': '',
                                                                'methods': [],
                                                                'properties': ['list_display',
                                                                               'list_filter']},
             'rapidsms.contrib.messagelog.app.App': {'bases': ['rapidsms.apps.base.AppBase'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [('_who', ['msg'], ''),
                                                                 ('_log',
                                                                  ['direction', 'who', 'text'],
                                                                  ''),
                                                                 ('parse', ['msg'], ''),
                                                                 ('outgoing', ['msg'], '')],
                                                     'properties': []},
             'rapidsms.contrib.messagelog.models.Message': {'bases': ['django.db.models.Model'],
                                                            'constructor': [],
                                                            'docstring': '',
                                                            'methods': [('save',
                                                                         ['*args', '**kwargs'],
                                                                         '\n        Verifies that one (not both) of the contact or connection fields\n        have been populated (raising ValidationError if not), and saves\n        the object as usual.\n        '),
                                                                        ('__unicode__', [], '')],
                                                            'properties': ['contact',
                                                                           'connection',
                                                                           'direction',
                                                                           'date',
                                                                           'text',
                                                                           'who']},
             'rapidsms.contrib.messagelog.tables.MessageTable': {'bases': ['djtables.Table'],
                                                                 'constructor': [],
                                                                 'docstring': '',
                                                                 'methods': [],
                                                                 'properties': ['contact',
                                                                                'connection',
                                                                                'direction',
                                                                                'date',
                                                                                'text']},
             'rapidsms.contrib.messaging.app.App': {'bases': ['rapidsms.apps.base.AppBase'],
                                                    'constructor': [],
                                                    'docstring': 'This app receives outgoing messages from the WebUI (via the\n       AJAX app), and relays them to the router.',
                                                    'methods': [('ajax_POST_send_message',
                                                                 ['params', 'form'],
                                                                 '\n        Sends a message to a connection.  You can call this method\n        via the ajax app by posting to the url:\n           \n            ajax/messaging/send_message\n           \n        You can also call this directly from a view by calling:\n        \n            messaging.utils.send_message(connection, text)\n        '),
                                                                ('_send_message',
                                                                 ['connection',
                                                                  'message_body'],
                                                                 'Attempts to send a message through a given connection')],
                                                    'properties': ['PRIORITY']},
             'rapidsms.contrib.registration.forms.BulkRegistrationForm': {'bases': ['django.forms.Form'],
                                                                          'constructor': [],
                                                                          'docstring': '',
                                                                          'methods': [],
                                                                          'properties': ['bulk']},
             'rapidsms.contrib.registration.forms.SmallFileField': {'bases': ['django.forms.FileField'],
                                                                    'constructor': [],
                                                                    'docstring': '',
                                                                    'methods': [('widget_attrs',
                                                                                 ['widget'],
                                                                                 '')],
                                                                    'properties': []},
             'rapidsms.contrib.registration.handlers.language.LanguageHandler': {'bases': ['rapidsms.contrib.handlers.handlers.keyword.KeywordHandler'],
                                                                                 'constructor': [],
                                                                                 'docstring': '\n    Allow remote users to set their preferred language, by updating the\n    ``language`` field of the Contact associated with their connection.\n    ',
                                                                                 'methods': [('help',
                                                                                              [],
                                                                                              ''),
                                                                                             ('handle',
                                                                                              ['text'],
                                                                                              '')],
                                                                                 'properties': ['keyword']},
             'rapidsms.contrib.registration.handlers.register.RegisterHandler': {'bases': ['rapidsms.contrib.handlers.handlers.keyword.KeywordHandler'],
                                                                                 'constructor': [],
                                                                                 'docstring': '\n    Allow remote users to register themselves, by creating a Contact\n    object and associating it with their Connection. For example::\n\n        >>> RegisterHandler.test(\'join Adam Mckaig\')\n        [\'Thank you for registering, Adam Mckaig!\']\n\n        >>> Contact.objects.filter(name="Adam Mckaig")\n        [<Contact: Adam Mckaig>]\n\n    Note that the ``name`` field of the Contact model is not constrained\n    to be unique, so this handler does not reject duplicate names. If\n    you wish to enforce unique usernames or aliases, you must extend\n    Contact, disable this handler, and write your own.\n    ',
                                                                                 'methods': [('help',
                                                                                              [],
                                                                                              ''),
                                                                                             ('handle',
                                                                                              ['text'],
                                                                                              '')],
                                                                                 'properties': ['keyword']},
             'rapidsms.contrib.registration.tables.ContactTable': {'bases': ['djtables.Table'],
                                                                   'constructor': [],
                                                                   'docstring': '',
                                                                   'methods': [],
                                                                   'properties': ['name',
                                                                                  'identity']},
             'rapidsms.contrib.registration.tests.TestRegister': {'bases': ['rapidsms.tests.scripted.TestScript'],
                                                                  'constructor': [],
                                                                  'docstring': '',
                                                                  'methods': [('testRegister',
                                                                               [],
                                                                               ''),
                                                                              ('testLang',
                                                                               [],
                                                                               ''),
                                                                              ('testHelp',
                                                                               [],
                                                                               '')],
                                                                  'properties': []},
             'rapidsms.contrib.scheduler.app.App': {'bases': ['rapidsms.apps.base.AppBase'],
                                                    'constructor': [],
                                                    'docstring': ' This app provides cron-like functionality for scheduled tasks,\n    as defined in the django model EventSchedule\n    \n    ',
                                                    'methods': [('start', [], ''),
                                                                ('stop', [], ''),
                                                                ('ajax_POST_run_schedule',
                                                                 ['params', 'form'],
                                                                 '\n        Triggers a schedule via the ajax app. You can call this method\n        via the ajax app by posting to the url:\n           \n            ajax/messaging/run_schedule\n           \n\\        ')],
                                                    'properties': ['bootstrapped',
                                                                   'schedule_thread']},
             'rapidsms.contrib.scheduler.app.SchedulerThread': {'bases': ['threading.Thread'],
                                                                'constructor': ['router',
                                                                                'schedule_interval'],
                                                                'docstring': '',
                                                                'methods': [('stop', [], ''),
                                                                            ('stopped', [], ''),
                                                                            ('_debug_speedup',
                                                                             ['minutes=0',
                                                                              'hours=0',
                                                                              'days=0'],
                                                                             ' This function is purely for the sake of debugging/unit-tests \n        It specifies a time interval in minutes by which the scheduler\n        loop jumps ahead. This makes it possible to test long-term intervals\n        quickly.\n        \n        Arguments: speedup - speedup interval in minutes\n        '),
                                                                            ('scheduler_loop',
                                                                             ['interval=60'],
                                                                             '')],
                                                                'properties': ['_speedup',
                                                                               'daemon',
                                                                               '_stop',
                                                                               '_router']},
             'rapidsms.contrib.scheduler.fields.PickledObject': {'bases': ['str'],
                                                                 'constructor': [],
                                                                 'docstring': 'A subclass of string so it can be told whether a string is\n       a pickled object or not (if the object is an instance of this class\n       then it must [well, should] be a pickled one).',
                                                                 'methods': [],
                                                                 'properties': []},
             'rapidsms.contrib.scheduler.fields.PickledObjectField': {'bases': ['django.db.models.TextField'],
                                                                      'constructor': [],
                                                                      'docstring': " An extension of django's model Field to support pickled Python objects ",
                                                                      'methods': [('to_python',
                                                                                   ['value'],
                                                                                   ''),
                                                                                  ('get_db_prep_save',
                                                                                   ['value'],
                                                                                   ''),
                                                                                  ('get_db_prep_lookup',
                                                                                   ['lookup_type',
                                                                                    'value'],
                                                                                   '')],
                                                                      'properties': ['__metaclass__']},
             'rapidsms.contrib.scheduler.forms.ScheduleForm': {'bases': ['django.forms.ModelForm'],
                                                               'constructor': [],
                                                               'docstring': ' This form is used to edit existing schedules ',
                                                               'methods': [('_format_set',
                                                                            ['value'],
                                                                            ''),
                                                                           ('clean_minutes',
                                                                            [],
                                                                            ''),
                                                                           ('clean_hours',
                                                                            [],
                                                                            ''),
                                                                           ('clean_days_of_week',
                                                                            [],
                                                                            ''),
                                                                           ('clean_days_of_month',
                                                                            [],
                                                                            ''),
                                                                           ('clean_months',
                                                                            [],
                                                                            ''),
                                                                           ('_format_set_and_check_bounds',
                                                                            ['value', 'name'],
                                                                            ''),
                                                                           ('clean', [], '')],
                                                               'properties': []},
             'rapidsms.contrib.scheduler.models.EventSchedule': {'bases': ['django.db.models.Model'],
                                                                 'constructor': ['*args',
                                                                                 '**kwargs'],
                                                                 'docstring': ' create a new EventSchedule and save it every time \n    you want to register a new event on a schedule\n    we can implement one_off future events by setting count to 1 \n    All timespans less than the specified one must be set\n    i.e. a weekly schedule must also specify which hour, minute, etc.\n    However, all timespans greater than the specified one\n    default to "all" (as long as one is specified).\n    i.e. a weekly schedule will fire every month\n    \n    callback - all callback function must take as the first \n        argument a reference to a \'router\' object\n    ',
                                                                 'methods': [('__str__',
                                                                              [],
                                                                              ''),
                                                                             ('__unicode__',
                                                                              [],
                                                                              ''),
                                                                             ('validate',
                                                                              ['days_of_month',
                                                                               'days_of_week',
                                                                               'hours',
                                                                               'minutes'],
                                                                              "\n        The following function doesn't touch data: it just checks \n        for valid boundaries\n        \n        when a timespan is set, all sub-timespans must also be set\n        i.e. when a weekly schedule is set, one must also specify day, hour, and minute.\n        "),
                                                                             ('validate_ranges',
                                                                              ['days_of_month',
                                                                               'days_of_week',
                                                                               'hours',
                                                                               'minutes'],
                                                                              ''),
                                                                             ('validate_subtimespans',
                                                                              ['days_of_month',
                                                                               'days_of_week',
                                                                               'hours',
                                                                               'minutes'],
                                                                              ''),
                                                                             ('check_minutes_bounds',
                                                                              [],
                                                                              ''),
                                                                             ('check_hours_bounds',
                                                                              [],
                                                                              ''),
                                                                             ('check_days_of_week_bounds',
                                                                              [],
                                                                              ''),
                                                                             ('check_days_of_month_bounds',
                                                                              [],
                                                                              ''),
                                                                             ('check_months_bounds',
                                                                              [],
                                                                              ''),
                                                                             ('save',
                                                                              ['*args',
                                                                               '**kwargs'],
                                                                              '\n        \n        TODO - still need to fix this so that creating a schedule\n        in the ui, saving it, editing it, saving it, editing it continues to work\n        with callback_args, kwargs, and different timespans\n        (currently fails because set([1,2]) -> a string)\n        '),
                                                                             ('should_fire',
                                                                              ['when'],
                                                                              'Return True if this event should trigger at the specified datetime '),
                                                                             ('activate',
                                                                              [],
                                                                              ''),
                                                                             ('deactivate',
                                                                              [],
                                                                              ''),
                                                                             ('_valid',
                                                                              ['timespan'],
                                                                              ''),
                                                                             ('run',
                                                                              ['router'],
                                                                              '')],
                                                                 'properties': ['callback',
                                                                                'description',
                                                                                'callback_args',
                                                                                'callback_kwargs',
                                                                                'months',
                                                                                'days_of_month',
                                                                                'days_of_week',
                                                                                'hours',
                                                                                'minutes',
                                                                                'start_time',
                                                                                'end_time',
                                                                                'count',
                                                                                'active',
                                                                                'allMatch']},
             'rapidsms.contrib.scheduler.tests.faketime.TestFakeTime': {'bases': ['rapidsms.tests.scripted.TestScript'],
                                                                        'constructor': [],
                                                                        'docstring': '',
                                                                        'methods': [('setUp',
                                                                                     [],
                                                                                     ''),
                                                                                    ('test_all',
                                                                                     [],
                                                                                     ''),
                                                                                    ('test_minutes',
                                                                                     [],
                                                                                     ''),
                                                                                    ('test_hours',
                                                                                     [],
                                                                                     ''),
                                                                                    ('test_days_of_week',
                                                                                     [],
                                                                                     " fire event monday, friday, and sunday, at 8:15 am and 5:15 pm\n        Note: days of week are indexed starting '0' \n        "),
                                                                                    ('test_days_of_month',
                                                                                     [],
                                                                                     " Fire event on the 1st, 15th, and 30th of the month at 10:00 am\n        Note: days of month are indexed starting '1' \n        "),
                                                                                    ('test_month',
                                                                                     [],
                                                                                     " Fire event every minute in February\n        Note: months are indexed from '1' \n        "),
                                                                                    ('tearDown',
                                                                                     [],
                                                                                     '')],
                                                                        'properties': ['apps']},
             'rapidsms.contrib.scheduler.tests.slow.TestSlow': {'bases': ['rapidsms.tests.scripted.TestScript'],
                                                                'constructor': [],
                                                                'docstring': '',
                                                                'methods': [('setUp', [], ''),
                                                                            ('test_one_shot',
                                                                             [],
                                                                             ' Test scheduler in real time')],
                                                                'properties': ['apps']},
             'rapidsms.contrib.scheduler.tests.speedup.TestSpeedup': {'bases': ['rapidsms.tests.scripted.TestScript'],
                                                                      'constructor': [],
                                                                      'docstring': '',
                                                                      'methods': [('setUp',
                                                                                   [],
                                                                                   ''),
                                                                                  ('test_one_shot',
                                                                                   [],
                                                                                   " Basically test 'count'"),
                                                                                  ('test_recurring',
                                                                                   [],
                                                                                   ' Test regular recurring schedules '),
                                                                                  ('test_timestart_timestop',
                                                                                   [],
                                                                                   ' Test timebound schedules ')],
                                                                      'properties': ['apps']},
             'rapidsms.errors.MessageSendingError': {'bases': ['StandardError'],
                                                     'constructor': [],
                                                     'docstring': '\n    This exception is raised when an outgoing message cannot be sent.\n    Where possible, a more specific exception should be raised, along\n    with a descriptive message.\n    ',
                                                     'methods': [],
                                                     'properties': []},
             'rapidsms.errors.NoConnectionError': {'bases': ['rapidsms.errors.MessageSendingError'],
                                                   'constructor': [],
                                                   'docstring': '\n    This execption is raised when a Contact cannot be messaged because\n    they do not have any Connections.\n    ',
                                                   'methods': [],
                                                   'properties': []},
             'rapidsms.errors.NoRouterError': {'bases': ['rapidsms.errors.MessageSendingError'],
                                               'constructor': [],
                                               'docstring': '\n    This exception is raised when no Router is available to send an\n    outgoing message. This usually means that it is being sent from the\n    webui process(es), which is not currently possible in RapidSMS.\n    ',
                                               'methods': [],
                                               'properties': []},
             'rapidsms.forms.ContactForm': {'bases': ['django.forms.ModelForm'],
                                            'constructor': [],
                                            'docstring': '',
                                            'methods': [],
                                            'properties': []},
             'rapidsms.log.mixin.LoggerMixin': {'bases': [],
                                                'constructor': [],
                                                'docstring': "\n    This mixin provides a quick way to log from classes within the\n    RapidSMS framework. It's mostly pasted from logging.LoggingAdaptor\n    (which isn't available in < Py2.6), with a couple of compatibility\n    tweaks.\n    ",
                                                'methods': [('_logger_name',
                                                             [],
                                                             '\n        Returns the name of the log which will receive messages emitted\n        by this object. This defaults to the class name (sanitized), but\n        should almost always be overloaded by subclasses to make the\n        hierarchy clear.\n        '),
                                                            ('log', ['*args', '**kwargs'], ''),
                                                            ('debug',
                                                             ['*args', '**kwargs'],
                                                             "Logs a 'msg % args' with severity DEBUG."),
                                                            ('info',
                                                             ['*args', '**kwargs'],
                                                             "Logs a 'msg % args' with severity INFO."),
                                                            ('warning',
                                                             ['*args', '**kwargs'],
                                                             "Logs a 'msg % args' with severity WARNING."),
                                                            ('error',
                                                             ['*args', '**kwargs'],
                                                             "Logs a 'msg % args' with severity ERROR."),
                                                            ('critical',
                                                             ['*args', '**kwargs'],
                                                             "Logs a 'msg % args' with severity CRITICAL."),
                                                            ('exception',
                                                             ['*args', '**kwargs'],
                                                             "\n        Log a 'msg % args' with severity ERROR, with the backtrace from\n        the last exception raised.\n        ")],
                                                'properties': ['_logger',
                                                               'warn',
                                                               'fatal',
                                                               'log_last_exception']},
             'rapidsms.management.commands.runrouter.Command': {'bases': ['django.core.management.base.NoArgsCommand'],
                                                                'constructor': [],
                                                                'docstring': '',
                                                                'methods': [('handle_noargs',
                                                                             ['**options'],
                                                                             '')],
                                                                'properties': ['help']},
             'rapidsms.management.commands.startproject.Command': {'bases': ['django.core.management.base.LabelCommand'],
                                                                   'constructor': [],
                                                                   'docstring': '',
                                                                   'methods': [('handle_label',
                                                                                ['project_name',
                                                                                 '**options'],
                                                                                '')],
                                                                   'properties': ['help',
                                                                                  'args',
                                                                                  'label',
                                                                                  'requires_model_validation',
                                                                                  'can_import_settings']},
             'rapidsms.management.commands.update_apps.Command': {'bases': ['django.core.management.base.NoArgsCommand'],
                                                                  'constructor': [],
                                                                  'docstring': '',
                                                                  'methods': [('handle_noargs',
                                                                               ['**options'],
                                                                               '')],
                                                                  'properties': ['help']},
             'rapidsms.management.commands.update_backends.Command': {'bases': ['django.core.management.base.NoArgsCommand'],
                                                                      'constructor': [],
                                                                      'docstring': '',
                                                                      'methods': [('handle_noargs',
                                                                                   ['**options'],
                                                                                   '')],
                                                                      'properties': ['help']},
             'rapidsms.messages.base.MessageBase': {'bases': ['object'],
                                                    'constructor': ['connection', 'text=None'],
                                                    'docstring': '',
                                                    'methods': [('__unicode__', [], '')],
                                                    'properties': ['_connection',
                                                                   'text',
                                                                   'connection',
                                                                   'contact',
                                                                   'peer']},
             'rapidsms.messages.error.ErrorMessage': {'bases': ['outgoing.OutgoingMessage'],
                                                      'constructor': [],
                                                      'docstring': '\n    ',
                                                      'methods': [],
                                                      'properties': []},
             'rapidsms.messages.incoming.IncomingMessage': {'bases': ['base.MessageBase'],
                                                            'constructor': ['connection',
                                                                            'text',
                                                                            'received_at=None',
                                                                            'sent_at=None'],
                                                            'docstring': '\n    This class represents, naturally, an incoming message. It is probably only\n    useful when instantiated by RapidSMS backends or test harnesses.\n    ',
                                                            'methods': [('__get_handled',
                                                                         [],
                                                                         '\n        Whether the message has been handled or responded to.\n        '),
                                                                        ('__set_handled',
                                                                         ['val'],
                                                                         ''),
                                                                        ('flush_responses',
                                                                         [],
                                                                         '\n        Immediately sends all responses added to this message (via the respond\n        method) in the order which they were added, and clears the queue.\n        '),
                                                                        ('respond',
                                                                         ['template=None',
                                                                          'cls=OutgoingMessage',
                                                                          '**kwargs'],
                                                                         "\n        Instantiates a new OutgoingMessage object bound to the same connection\n        as this object containing *template*, and queues it for delivery when\n        the flush method is called.\n\n        Optionally, the class (*cls*) of the outgoing message can be given, to\n        give a hint about the contents of the message, which can be introspected\n        by other apps during the outgoing phase(s).\n\n        Any additional keyword arguments given are passed along to the outgoing\n        message class initialize. See OutgoingMessage.__init__ for more on that.\n        You really should. It's rather exciting.\n        "),
                                                                        ('error',
                                                                         ['text', '**kwargs'],
                                                                         '\n        docs plz.\n        ')],
                                                            'properties': ['sent_at',
                                                                           'received_at',
                                                                           'responses',
                                                                           '_raw_text',
                                                                           'processed',
                                                                           '_handled',
                                                                           'raw_text',
                                                                           'date',
                                                                           'handled']},
             'rapidsms.messages.outgoing.OutgoingMessage': {'bases': ['base.MessageBase'],
                                                            'constructor': ['connection=None',
                                                                            'template=None',
                                                                            '**kwargs'],
                                                            'docstring': '\n    ',
                                                            'methods': [('append',
                                                                         ['template',
                                                                          '**kwargs'],
                                                                         ''),
                                                                        ('__repr__', [], ''),
                                                                        ('_render_part',
                                                                         ['template',
                                                                          '**kwargs'],
                                                                         ''),
                                                                        ('send',
                                                                         [],
                                                                         '\n        Send this message via the router, triggering the _outgoing_\n        phase (giving any app the opportunity to modify or cancel it).\n        Return True if the message was sent successfully.\n\n        If the router is not running (as is usually the case outside of\n        the ``runrouter`` process), NoRouterError is raised.\n\n        Warning: This method blocks the current thread until the backend\n        accepts or rejects the message, which takes as long as it takes.\n        There is currently no way to send messages asynchronously.\n        '),
                                                                        ('send_now',
                                                                         [],
                                                                         '\n        Send this message immediately via the physical backend. This\n        should probably only be called by the Router.\n        ')],
                                                            'properties': ['_parts',
                                                                           '_connection',
                                                                           'sent_at',
                                                                           'language',
                                                                           'text',
                                                                           'date',
                                                                           'sent']},
             'rapidsms.migrations.0001_initial.Migration': {'bases': ['south.v2.SchemaMigration'],
                                                            'constructor': [],
                                                            'docstring': '',
                                                            'methods': [('forwards',
                                                                         ['orm'],
                                                                         ''),
                                                                        ('backwards',
                                                                         ['orm'],
                                                                         '')],
                                                            'properties': ['models',
                                                                           'complete_apps']},
             'rapidsms.models.App': {'bases': ['django.db.models.Model'],
                                     'constructor': [],
                                     'docstring': "\n    This model isn't really a RapidSMS App. Like Backend, it's just a\n    stub model to provide a primary key for each app, so other models\n    can be linked to it.\n\n    The Django ContentType stuff doesn't quite work here, since not all\n    RapidSMS apps are valid Django apps. It would be nice to fill in the\n    gaps and inherit from it at some point in the future.\n\n    Instances of this model are generated by the update_apps management\n    command, (which is hooked on Router startup (TODO: webui startup)),\n    and probably shouldn't be messed with after that.\n    ",
                                     'methods': [('__unicode__', [], ''), ('__repr__', [], '')],
                                     'properties': ['module', 'active']},
             'rapidsms.models.Backend': {'bases': ['django.db.models.Model'],
                                         'constructor': [],
                                         'docstring': "\n    This model isn't really a backend. Those are regular Python classes,\n    in rapidsms/backends. This is just a stub model to provide a primary\n    key for each running backend, so other models can be linked to it\n    with ForeignKeys.\n    ",
                                         'methods': [('__unicode__', [], ''),
                                                     ('__repr__', [], '')],
                                         'properties': ['name']},
             'rapidsms.models.Connection': {'bases': ['rapidsms.models.ConnectionBase'],
                                            'constructor': [],
                                            'docstring': '\n    This model pairs a Backend object with an identity unique to it (eg.\n    a phone number, email address, or IRC nick), so RapidSMS developers\n    need not worry about which backend a messge originated from.\n    ',
                                            'methods': [],
                                            'properties': ['__metaclass__']},
             'rapidsms.models.ConnectionBase': {'bases': ['django.db.models.Model'],
                                                'constructor': [],
                                                'docstring': '',
                                                'methods': [('__unicode__', [], ''),
                                                            ('__repr__', [], ''),
                                                            ('message',
                                                             ['template', '**kwargs'],
                                                             '\n        Attempt to send a message to this connection. Like any outgoing\n        message, it may be aborted during the ``outgoing`` phase, or be\n        rejected by the backend. In these cases, MessageSendingError is\n        raised. (There is currently no way to know *why* the message was\n        not sent, so we raise a generic error.)\n\n        This method can only be called in the ``runrouter`` process,\n        since the router is currently not accessible from the webui\n        process(es). If no router is running, NoRouterError is raised\n        (by the ``OutgoingMessage.send`` method).\n        ')],
                                                'properties': ['backend', 'identity', 'contact']},
             'rapidsms.models.Contact': {'bases': ['rapidsms.models.ContactBase'],
                                         'constructor': [],
                                         'docstring': '',
                                         'methods': [],
                                         'properties': ['__metaclass__']},
             'rapidsms.models.ContactBase': {'bases': ['django.db.models.Model'],
                                             'constructor': [],
                                             'docstring': '',
                                             'methods': [('__unicode__', [], ''),
                                                         ('__repr__', [], ''),
                                                         ('message',
                                                          ['template', '**kwargs'],
                                                          '\n        Attempt to send a message to this contact via their default\n        connection. Like any outgoing message, it may be aborted during\n        the ``outgoing`` phase, or be rejected by the backend. In these\n        cases, MessageSendingError is raised. If no default connection\n        exists, NoConnectionError is raised.\n        ')],
                                             'properties': ['name',
                                                            'language',
                                                            'is_anonymous',
                                                            'default_connection']},
             'rapidsms.models.ExtensibleModelBase': {'bases': ['django.db.models.base.ModelBase'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [('__new__',
                                                                  ['name', 'bases', 'attrs'],
                                                                  '')],
                                                     'properties': []},
             'rapidsms.router.Router': {'bases': ['object', 'log.mixin.LoggerMixin'],
                                        'constructor': [],
                                        'docstring': '\n    ',
                                        'methods': [('add_app',
                                                     ['module_name'],
                                                     '\n        Find the app named *module_name*, instantiate it, and add it to\n        the list of apps to be notified of incoming messages. Return the\n        app instance.\n        '),
                                                    ('get_app',
                                                     ['module_name'],
                                                     'Get a handle to one of our apps by module name.'),
                                                    ('add_backend',
                                                     ['name', 'module_name', 'config=None'],
                                                     '\n        Find the backend named *module_name*, instantiate it, and add it\n        to the dict of backends to be polled for incoming messages, once\n        the router is started. Return the backend instance.\n        '),
                                                    ('_clean_backend_config',
                                                     [],
                                                     '\n        Return ``config`` (a dict) with the keys downcased. (This is\n        intended to make the backend configuration case insensitive.)\n        '),
                                                    ('_wait',
                                                     ['timeout'],
                                                     '\n        Keep calling *func* (a lambda function) until it returns True,\n        for a maximum of *timeout* seconds. Return True if *func* does,\n        or False if time runs out.\n        '),
                                                    ('_start_backend',
                                                     ['backend'],
                                                     '\n        Start *backend*, and return True when it terminates. If an\n        exception is raised, wait five seconds and restart it.\n        '),
                                                    ('_start_all_backends',
                                                     [],
                                                     '\n        Start all backends registed via Router.add_backend, by calling\n        self._start_backend in a new daemon thread for each.\n        '),
                                                    ('_stop_all_backends',
                                                     [],
                                                     '\n        Notify all backends registered via Router.add_backend that they\n        should stop. This method cannot guarantee that backends **will**\n        stop in a timely manner.\n        '),
                                                    ('_start_all_apps',
                                                     [],
                                                     '\n        Start all apps registered via Router.add_app.\n        '),
                                                    ('_stop_all_apps',
                                                     [],
                                                     '\n        Stop all apps registered via Router.add_app.\n        '),
                                                    ('start',
                                                     [],
                                                     '\n        Start polling the backends registered via Router.add_backend for\n        incoming messages, and keep doing so until a KeyboardInterrupt\n        or SystemExit is raised, or Router.stop is called.\n        '),
                                                    ('stop',
                                                     ['graceful=False'],
                                                     '\n        Stop the router, which unblocks the Router.start method as soon\n        as possible. This may leave unprocessed messages in the incoming\n        or outgoing queues.\n\n        If the optional *graceful* argument is True, the router does its\n        best to avoid discarding any messages, by refusing to accept new\n        incoming messages and blocking (by calling Router.join) until\n        all currently pending messages are processed.\n        '),
                                                    ('join',
                                                     [],
                                                     '\n        Block until the incoming message queue is empty. This method\n        can potentially block forever, if it is called while this Router\n        is accepting incoming messages.\n        '),
                                                    ('incoming_message',
                                                     ['msg'],
                                                     '\n        Add *msg* to the incoming message queue and return True, or\n        return False if this router is not currently accepting new\n        messages (either because the queue is full, or we are busy\n        shutting down).\n\n        Adding a message to the queue is no guarantee that it will be\n        processed any time soon (although the queue is regularly polled\n        while Router.start is blocking), or responded to at all.\n        '),
                                                    ('incoming',
                                                     ['msg'],
                                                     "\n        Incoming phases:\n\n        Filter:\n          The first phase, before any actual work is done. This is the\n          only phase that can entirely abort further processing of the\n          incoming message, which it does by returning True.\n\n        Parse:\n          Don't do INSERTs or UPDATEs in here!\n\n        Handle:\n          Respond to messages here.\n\n        Default:\n          Only called if no responses were sent during the Handle phase.\n\n        Cleanup:\n          An opportunity to clean up anything started during earlier phases.\n        "),
                                                    ('outgoing', ['msg'], '\n        ')],
                                        'properties': ['incoming_phases',
                                                       'outgoing_phases',
                                                       'pre_start',
                                                       'post_start',
                                                       'pre_stop',
                                                       'post_stop',
                                                       'apps',
                                                       'backends',
                                                       'logger',
                                                       'running',
                                                       'accepting',
                                                       '_queue',
                                                       '_starting_backends']},
             'rapidsms.templatetags.region_tags.RegionNode': {'bases': ['django.template.Node'],
                                                              'constructor': ['region_name'],
                                                              'docstring': '',
                                                              'methods': [('_render_to_string',
                                                                           ['template_name',
                                                                            'context'],
                                                                           ''),
                                                                          ('render',
                                                                           ['context'],
                                                                           '')],
                                                              'properties': ['region_name']},
             'rapidsms.templatetags.tabs_tags.Tab': {'bases': ['object'],
                                                     'constructor': ['view', 'caption=None'],
                                                     'docstring': '',
                                                     'methods': [('_auto_caption', [], '')],
                                                     'properties': ['_caption',
                                                                    '_view',
                                                                    'url',
                                                                    'caption',
                                                                    'caption_slug']},
             'rapidsms.templatetags.tabs_tags.TabsNode': {'bases': ['django.template.Node'],
                                                          'constructor': ['tabs', 'varname'],
                                                          'docstring': '',
                                                          'methods': [('render',
                                                                       ['context'],
                                                                       '')],
                                                          'properties': ['tabs', 'varname']},
             'rapidsms.tests.backend.test_base.BackendStub': {'bases': ['backends.base.BackendBase'],
                                                              'constructor': [],
                                                              'docstring': '',
                                                              'methods': [],
                                                              'properties': []},
             'rapidsms.tests.backend.test_http.NewBackend': {'bases': ['rapidsms.backends.http.RapidHttpBacked'],
                                                             'constructor': [],
                                                             'docstring': '',
                                                             'methods': [('configure',
                                                                          ['*args',
                                                                           '**kwargs'],
                                                                          '')],
                                                             'properties': ['username']},
             'rapidsms.tests.harness.EchoApp': {'bases': ['rapidsms.tests.harness.MockApp'],
                                                'constructor': [],
                                                'docstring': '',
                                                'methods': [('handle', ['message'], '')],
                                                'properties': []},
             'rapidsms.tests.harness.MockApp': {'bases': ['apps.base.AppBase'],
                                                'constructor': [],
                                                'docstring': '',
                                                'methods': [('configure', [], ''),
                                                            ('start', [], ''),
                                                            ('parse', ['message'], ''),
                                                            ('handle', ['message'], ''),
                                                            ('cleanup', ['message'], ''),
                                                            ('outgoing', ['message'], ''),
                                                            ('stop', [], '')],
                                                'properties': ['calls']},
             'rapidsms.tests.harness.MockBackend': {'bases': ['rapidsms.backends.base.BackendBase'],
                                                    'constructor': [],
                                                    'docstring': '\n    A simple mock backend, modeled after the BucketBackend\n    ',
                                                    'methods': [('start', [], ''),
                                                                ('receive',
                                                                 ['identity', 'text'],
                                                                 ''),
                                                                ('send', ['msg'], ''),
                                                                ('run', [], ''),
                                                                ('next_outgoing_message',
                                                                 [],
                                                                 '')],
                                                    'properties': ['bucket', 'outgoing_bucket']},
             'rapidsms.tests.harness.MockLogger': {'bases': ['list'],
                                                   'constructor': [],
                                                   'docstring': '',
                                                   'methods': [('write', ['*args'], '')],
                                                   'properties': ['to_console']},
             'rapidsms.tests.harness.MockRouter': {'bases': ['rapidsms.router.Router'],
                                                   'constructor': [],
                                                   'docstring': '',
                                                   'methods': [('start', [], ''),
                                                               ('stop', [], '')],
                                                   'properties': ['running']},
             'rapidsms.tests.scripted.MockTestScript': {'bases': ['rapidsms.tests.scripted.TestScript'],
                                                        'constructor': [],
                                                        'docstring': '',
                                                        'methods': [('testClosure', [], ''),
                                                                    ('testRunScript', [], '')],
                                                        'properties': ['apps',
                                                                       'testScript',
                                                                       'testScript2']},
             'rapidsms.tests.scripted.TestScript': {'bases': ['django.test.TransactionTestCase',
                                                              'rapidsms.log.mixin.LoggerMixin'],
                                                    'constructor': [],
                                                    'docstring': '\n    The scripted.TestScript class subclasses unittest.TestCase\n    and allows you to define unit tests for your RapidSMS apps\n    in the form of a \'conversational\' script:\n    \n        from myapp.app import App as MyApp\n        from rapidsms.tests.scripted import TestScript\n\n        class TestMyApp (TestScript):\n            apps = (MyApp,)\n            testRegister = """\n               8005551212 > register as someuser\n               8005551212 < Registered new user \'someuser\' for 8005551212!\n            """\n\n            testDirectMessage = """\n               8005551212 > tell anotheruser what\'s up??\n               8005550000 < someuser said "what\'s up??"\n            """\n\n    This TestMyApp class would then work exactly as any other\n    unittest.TestCase subclass (so you could, for example, call\n    unittest.main()).\n    ',
                                                    'methods': [('assertInteraction',
                                                                 ['script'],
                                                                 ''),
                                                                ('setUp', [], ''),
                                                                ('tearDown', [], ''),
                                                                ('_init_log', ['level'], ''),
                                                                ('parseScript', ['script'], ''),
                                                                ('startRouter', [], ''),
                                                                ('stopRouter', [], ''),
                                                                ('sendMessage',
                                                                 ['num', 'txt', 'date=None'],
                                                                 ''),
                                                                ('receiveMessage', [], ''),
                                                                ('receiveAllMessages', [], ''),
                                                                ('_checkAgainstMessage',
                                                                 ['num',
                                                                  'txt',
                                                                  'last_msg',
                                                                  'msg'],
                                                                 ''),
                                                                ('_checkAgainstMessages',
                                                                 ['num',
                                                                  'txt',
                                                                  'last_msg',
                                                                  'msgs'],
                                                                 ''),
                                                                ('runParsedScript',
                                                                 ['cmds'],
                                                                 ''),
                                                                ('runScript', ['script'], '')],
                                                    'properties': ['apps', 'router', 'backend']},
             'rapidsms.tests.test_app_base.AppStub': {'bases': ['apps.base.AppBase'],
                                                      'constructor': [],
                                                      'docstring': '',
                                                      'methods': [],
                                                      'properties': []},
             'rapidsms.tests.test_app_base.MockRouter': {'bases': ['object'],
                                                         'constructor': [],
                                                         'docstring': '',
                                                         'methods': [],
                                                         'properties': []},
             'rapidsms.tests.test_logger.LoggableStub': {'bases': ['object',
                                                                   'log.mixin.LoggerMixin'],
                                                         'constructor': [],
                                                         'docstring': '',
                                                         'methods': [],
                                                         'properties': []},
             'rapidsms_httprouter.admin.MessageAdmin': {'bases': ['django.contrib.admin.ModelAdmin'],
                                                        'constructor': [],
                                                        'docstring': '',
                                                        'methods': [('get_urls', [], ''),
                                                                    ('send', ['request'], ''),
                                                                    ('changelist_view',
                                                                     ['request',
                                                                      'extra_context=None'],
                                                                     ''),
                                                                    ('identity', ['obj'], ''),
                                                                    ('backend', ['obj'], ''),
                                                                    ('sms_dir', ['obj'], '')],
                                                        'properties': ['list_display',
                                                                       'list_filter',
                                                                       'list_display_links',
                                                                       'actions',
                                                                       'search_fields',
                                                                       'change_list_template']},
             'rapidsms_httprouter.management.commands.normalizeconnections.Command': {'bases': ['django.core.management.base.BaseCommand'],
                                                                                      'constructor': [],
                                                                                      'docstring': '',
                                                                                      'methods': [('handle',
                                                                                                   ['*files',
                                                                                                    '**options'],
                                                                                                   '')],
                                                                                      'properties': ['help']},
             'rapidsms_httprouter.management.commands.send_messages.Command': {'bases': ['django.core.management.base.BaseCommand',
                                                                                         'rapidsms.log.mixin.LoggerMixin'],
                                                                               'constructor': [],
                                                                               'docstring': '',
                                                                               'methods': [('fetch_url',
                                                                                            ['url'],
                                                                                            '\n        Wrapper around url open, mostly here so we can monkey patch over it in unit tests.\n        '),
                                                                                           ('build_send_url',
                                                                                            ['router_url',
                                                                                             'backend',
                                                                                             'recipients',
                                                                                             'text',
                                                                                             '**kwargs'],
                                                                                            '\n        Constructs an appropriate send url for the given message.\n        '),
                                                                                           ('send_backend_chunk',
                                                                                            ['router_url',
                                                                                             'pks',
                                                                                             'backend_name'],
                                                                                            ''),
                                                                                           ('send_all',
                                                                                            ['router_url',
                                                                                             'to_send'],
                                                                                            ''),
                                                                                           ('send_individual',
                                                                                            ['router_url'],
                                                                                            ''),
                                                                                           ('handle',
                                                                                            ['**options'],
                                                                                            '')],
                                                                               'properties': ['help',
                                                                                              'db']},
             'rapidsms_httprouter.managers.BulkInsertManager': {'bases': ['django.db.models.Manager'],
                                                                'constructor': [],
                                                                'docstring': ' BulkInsertManager Class\n        contact kgoudeaux@gmail.com\n        \n        Public Interface:\n        bulk_insert(self, now=None, raw=False, send_pre_save=True, **kwargs):\n        bulk_insert_commit(self, now=None, autoclobber=False, max_depth=5, send_post_save=True, **kwargs)\n        bulk_insert_now(self, now=None)\n        \n        Update 5-9-2008 Added support for self references for Foreign Keys, \n                        OneToOne Fields and Many to Many relations\n                        max_depth default changed to 5\n        \n        Tested on Django SVN 7519\n        Currently, only MySQL is supported although a crude framework is there to support others\n        \n        Bulk insert objects to a database including Foreign Key, One to One and Many to Many\n        relationships.\n        \n        You can also create self referential relationships of each type including (non)symmetrical\n        Many to Many relationships.\n        \n        Insert an object by calling bulk_insert(kwargs) where kwargs is what you would specify\n        to create an instance of the underlying model i.e. Model(kwargs).\n        \n        Field names in kwargs can also include any related names declared on other models.\n        \n        IMPORTANT: Internally, because no primary keys are known until the objects are inserted,\n        each object is identified by its "kwargs signature" which is a hash of the field names\n        and values given to bulk_insert combined with any pre_computed default values.\n        \n        If you want to insert the _exact_ same data in a bunch of rows, this won\'t help you.\n        Objects with the same signature will be treated as if they are the same\n        object.\n        \n        If you specify your own primary key values when the primary key is an AutoField,\n        your values will be ignored\n        \n        #####################\n        #      Example      #\n        #####################\n        Given these three classes:\n        \n        class Author(models.Model):\n            first_name = models.CharField(blank=True, max_length=100)\n            last_name = models.CharField(blank=True, max_length=100)\n\n        class Article(models.Model):\n            author = models.ForeignKey(Author, null=True)\n            text = models.CharField(blank=True, max_length=100, default=\'\')\n            objects = BulkInsert()\n        \n        class Note(models.Model):\n            article = models.ForeignKey(Article, related_name=\'notes\')\n            text = models.CharField(blank=True, max_length=100)\n\n        class Character(models.Model):\n            char = models.CharField(blank=True, max_length=1)\n            words = models.ManyToManyField(Article, related_name=\'characters\')\n        \n        1. Article.objects.bulk_insert( text="this is gibberish", \n                                        author={\'first_name\':\'John\', \'last_name\':\'Smith}\n                                        notes=[{\'text\':\'very long\'}, {\'text\':\'very short\'}],\n                                        characters=[{\'chars\':\'t\'}, {\'chars\':\'h\'}, {\'chars\':\'i\'}, {\'chars\':\'s\'},\n                                                    {\'chars\':\' \'}, {\'chars\':\'i\'}, {\'chars\':\'s\'}, {\'chars\':\' \'},\n                                                    {\'chars\':\'g\'}, {\'chars\':\'i\'}, {\'chars\':\'b\'}, {\'chars\':\'b\'},\n                                                    {\'chars\':\'e\'}, {\'chars\':\'r\'}, {\'chars\':\'i\'}, {\'chars\':\'s\'},\n                                                    {\'chars\':\'h\'}])\n        2. Article.objects.bulk_insert( text="this is gibberish",\n                                        author={\'first_name\':\'John\', \'last_name\':\'Smith})\n                                        \n        3. Article.objects.bulk_insert( text="this is gibberish",\n                                        author={\'first_name\':\'John\', \'last_name\':\'Smith},\n                                        notes=Note(text="just right"))\n                                        \n        Article.objects.bulk_insert_commit()\n        \n        On commit, the effect of the first call will be to first bulk insert an Author object and recover its primary key.\n        Then it will insert the Article object referencing the Author object and recover the Article\'s primary key\n        Next it will insert two notes and associate them with the Article\n        Finally it will bulk insert all of the characters and establish each character\'s many_to_many\n        relationship with the Article\n        \n        Note that there are duplicate Character objects being added, the duplicates will all be treated as\n        the same object as their "kwargs signatures" are identical\n        \n        Also note that the second call to bulk insert will NOT create another article object because its\n        kwargs signature matches the first call.  Only fields stored in the Article\'s table are used to compute\n        the signature\n        \n        The third call to bulk_insert will add an additional note. Notice that it\'s a Note object\n        with an unset primary key.  It will be converted into a set of kwargs and bulk inserted accordingly.\n        If its primary key were set, the key would be extracted to set the relationships but the object would\n        not be re-inserted\n        \n        For this example, the pre_save signal will be called *three* times for the Article object and post_save\n        will be called once\n        \n        #####################\n        #    Real Example   #\n        #####################\n        Saving related search terms from the Yahoo.jp API in a general\n        WebQuery table. A maximum of 100 related terms are retrieved at a time\n        \n        class WebQuery(models.Model):\n            query = models.CharField(blank=False, null=False, max_length=256)\n            query_type = models.IntegerField(blank=False, null=False, choices=QUERY_TYPES)\n            ...\n            class Meta:\n                unique_together = ("query", "query_type")\n            \n        class RelatedSearch(models.Model):\n            original = models.CharField(blank=True, max_length=100, unique=True)\n            queries = models.ManyToManyField(WebQuery, related_name=\'searches\')\n            ...\n\n            objects = BulkInsert()\n        \n        Without bulk insert\n        -------------------\n        queries = []\n        r = RelatedSearch.objects.get_or_create(original=original_query)\n        for q in get_related_searches(original_query):\n            webquery = WebQuery.objects.get_or_create(query=q, query_type=YAHOOJP_RELATED)\n            queries.append(webquery.id)\n        r.queries.add(*queries)\n            \n        Worst Case: 101 objects are inserted using 204 db queries       \n        \n        With Bulk Insert\n        ----------------\n        queries = []\n        for q in get_related_searches(original_query):\n            queries.append({\'query\': q, \'query_type\': YAHOOJP_RELATED})\n        RelatedSearch.objects.bulk_insert(original=original_query, queries=queries)\n        RelatedSearch.objects.bulk_insert_commit()\n        \n        Worst Case: 101 objects are inserted with 6 db queries\n\n        #####################\n        #       Notes       #\n        #####################\n        Arguments to bulk_insert can include the underlying models fields, of course, but also\n        any related name specified by a related class.  In other words you can treat relationships\n        defined on other models as "fields" on this model, similar to QuerySets.\n        \n        If the object you wish to specify a relationship with doesn\'t exist, simply provide a\n        dict of arguments or a model instance with an unset primary key and it will be queued and\n        bulk inserted accordingly.\n        \n        You don\'t need to add BulkInsert as a manager to each class you wish to perform bulk\n        inserts with - just the class you want to perform bulk inserts _relative to_.\n        \n        If, when bulk inserting a list of related objects, it cannot find a BulkInsert manager,\n        it will add one to that class and perform the insert\n        \n        To execute the actual insert call bulk_insert_commit. This will execute the insert using an INSERT statement.\n        \n        For the file insert to work, write permissions are needed in the current working directory\n        or settings.BULK_INSERT_DIR\n        \n        Also, the mysql user needs file priveleges i.e:\n          GRANT FILE ON *.* TO \'user\'@\'localhost\';\n        Note that for MySQL, File permissions can only be added globally\n        \n        Regardless of the number of objects and type of relationships, this will make\n        1 database call to perform the insert per table affected and N/100 calls per table\n        to recover primary keys where N is the number of rows to be inserted\n        \n        Generic Foreign Keys Partially Supported - Need a fix like Ticket #5826\n        Currently generic foreign keys can only be set by manually specifying the content_type and object_id\n        \n        Whereas on a model instance with a GFK, you can do something like: \n            instance.element = object\n        instead of:\n            instance.content_type = ContentType.objects.get_for_model(object.__class__)\n            instance.object_id = object.id\n            \n        There currently isn\'t a way to recover from the GFK object, the field names that it points to.\n        So the convenient form of:\n            Model.objects.bulk_insert(element={\'name\': \'Jim\'}) isn\'t possible\n        use:\n            Create and save Jim object and collect its id\n            Model.objects.bulk_insert(content_type=ctype, object_id=id)\n        \n        #####################\n        #      Gotchas      #\n        #####################\n        -- data types - For MySQL, TEXT and BLOB types cannot be inserted with LOAD DATA INSERT\n        \n        -- pre_save signal - It\'s very possible that pre_save will be called more than once\n        for the same object when inserting a lot of objects or adding a lot of relationships\n        \n        e.g.  If you are programmatically generating values and bulk_insert object A. Presave\n        will be called.  If you bulk insert A again with many_to_many relationship B. Presave \n        will be called again.\n        \n        If this is undesirable, specify send_pre_save = False when calling bulk_insert()\n        \n        --In a pre_save function, all changes to instance values will be recorded, however, be\n        careful with computations that produce different results based on time.  If pre_save is\n        called three times for what is nominally the same object and three different values are\n        set, they will be treated as 3 different objects.\n        \n        If this is undesirable, specify send_pre_save = False when calling bulk_insert()\n        \n        -- DateTime, Date, and Time fields - If using datetime.now as your default value,\n        one value for "now" is precomputed and used for all inserts i.e. every date or time\n        field that uses datetime.now or auto_now or auto_now_add will have the same value\n        \n        Think of them as all being inserted at the same instant\n        \n        -- Default values that call a function.  If you compute a dynamic default value, know\n        that it will be computed once and cached for all inserted objects\n        \n        #####################\n        #   Self Reference  #\n        #####################\n        Self References operate the same as any other reference but there are some powerful\n        gotchas if you get too creative.  This doesn\'t handle the *general* case of limitless\n        recursive relationships.  If you start seeing warnings and KeyErrors, simplify your inserts.\n        \n        Symmetrical is honored for self referencing m2m fields.  The direction of relationships can be\n        bulk inserted by specifiying the m2m field name or the related name.\n        \n        In the example below, this is done by setting \'friends\' or \'followers\'\n        \n        Given this class loaded with self references:\n        class Player(models.Model):\n            first_name = models.CharField(blank=True, max_length=100)\n            last_name = models.CharField(blank=True, max_length=100)\n\n            friends = models.ManyToManyField(\'self\', symmetrical=False, related_name=\'followers\', null=True)\n            favorite = models.ForeignKey(\'self\', related_name=\'fans\', null=True)\n            antiself = models.OneToOneField(\'self\', related_name=\'realme\', null=True)\n\n            objects = BulkInsert()\n\n        And this set of dicts representing players and their relationships:\n        other_players = [{\'first_name\':"Babe", \'last_name\':\'Ruth\', \n                                \'friends\': [{\'first_name\': \'Cal\', \'last_name\': \'Ripkin\'},\n                                            {\'first_name\': \'Willie\', \'last_name\': \'Mays\'}]}, \n                        {\'first_name\':"Hank", \'last_name\':\'Aaron\'}]\n        players = [ {\'first_name\':\'Mark\', \'last_name\':\'McGuire\', \'followers\':other_players},\n                                \'antiself\': {\'first_name\': \'Willie\', \'last_name\': \'Mays\'},\n                    {\'first_name\':\'Sammy\', \'last_name\':\'Sosa\', \'favorite\':{\'first_name\':\'Hank\', \'last_name\':\'Aaron\'}},\n                    {\'first_name\':\'Johnny\', \'last_name\':\'Bench\', \'antiself\':{\'first_name\':\'Hank\', \'last_name\':\'Aaron\'}},\n                    {\'first_name\': \'Mickey\', \'last_name\': \'Mantle\', \'friends\': other_players}]\n                    \n        for player in players:\n            GibberishAuthor.objects.bulk_insert(**player)\n        GibberishAuthor.objects.bulk_insert_commit()\n        \n        This is a contorted example that pushes the limits but in its unnecessary complexity, shows what can be done.\n        After commit, a total of *8* unique players will be added:\n        \n        Babe Ruth       favorite:None   antiself:None   friends:3 [Cal Ripkin, Willie Mays, Mark McGuire]\n        Cal Ripkin      favorite:None   antiself:None   friends:0 []\n        Willie Mays     favorite:None   antiself:None   friends:0 []\n        Hank Aaron      favorite:None   antiself:None   friends:1 [Mark McGuire]\n        Mark McGuire    favorite:None   antiself:Willie friends:0 []\n        Sammy Sosa      favorite:Hank   antiself:None   friends:0 []\n        Johnny Bench    favorite:None   antiself:Hank   friends:0 []\n        Mickey Mantle   favorite:None   antiself:None   friends:2 [Babe Ruth, Hank Aaron]\n        \n        The first thing to note is that even though some players are referenced more than once,\n        their kwargs signatures (hash of all non-m2m field values) are identical.\n        \n        Be careful with self referential fk and one2one relations that are nested below the first level.\n        Note that fk\'s and one2one\'s were set in \'players\' but not in \'other_players\'.  Inserting fk and\n        one2one self references breaks the one insert per table design of this manager because fk\'s and one2one\'s\n        must be inserted first.  To deeply nest self referential fk\'s and one2one\'s, use objects whose primary\n        key is already set or just provide the primary key value directly.\n        \n        To do this on the nested many to many relations above:\n        other_players = [{\'first_name\':"Babe", \'last_name\':\'Ruth\', \'friends\': [ \n                                {\'first_name\': \'Cal\', \'last_name\': \'Ripkin\'},\n                                {\'first_name\': \'Willie\', \'last_name\': \'Mays\'}],\n                ------->            \'favorite\': Player.objects.create(first_name=\'Bob\', last_name=\'Jones\'), \n                ------->            \'antiself\': 3},\n                        {\'first_name\':"Hank", \'last_name\':\'Aaron\'}]\n                        \n        If you can, avoid deeply nesting self references or provide model instances with primary keys.\n        Because the kwargs signature is the only unique identifier, you may unwittingly create two\n        versions of the same object or worse, it will error out on a KeyError because some distant\n        self reference changed the kwargs signature of the object.\n        \n        You\'ll probably never need to do something so twisted, but if you do, those are the caveats.\n        \n    ',
                                                                'methods': [('bulk_insert_now',
                                                                             ['now=None'],
                                                                             ''),
                                                                            ('bulk_insert',
                                                                             ['now=None',
                                                                              'raw=False',
                                                                              'clean_args=False',
                                                                              'send_pre_save=True',
                                                                              '_self_ref=False',
                                                                              '**kwargs'],
                                                                             "\n        Hold kwargs in queue until bulk_insert_commit\n        \n        All field preprocessing is done unless raw=True\n        Returns a hash for kwargs if clean_args=True\n          Primarily for internal use\n        Sends pre_save signal unless send_pre_save=False\n        \n        kwargs can include any field from the underlying model including any related_name's\n        specified by related models\n        \n        "),
                                                                            ('_clear_tempModel',
                                                                             [],
                                                                             ''),
                                                                            ('bulk_insert_commit',
                                                                             ['now=None',
                                                                              'autoclobber=False',
                                                                              'depth=0',
                                                                              'max_depth=5',
                                                                              'send_post_save=True',
                                                                              '_self_ref=False',
                                                                              '**kwargs'],
                                                                             '\n        Bulk inserts all queued objects and relations to the database with one insert per affected table\n        and N/100 selects to find the primary keys where N is the number of inserted rows\n        \n        If autoclobber is False, the default, the insert is performed with IGNORE.  Any object that duplicates one\n        already in the database is not reinserted but any new relationships will be\n        \n        if autoclobber is True, the insert is performed with REPLACE, clobbering any duplicates\n\n        If autoclobber is None, no checking is done and any duplicates will raise a Database Integrity Error\n        \n        If kwargs is specified, its values are used to overide any model defaults\n        '),
                                                                            ('reset',
                                                                             ['_self_ref=False'],
                                                                             '\n        Close and remove any temp files\n        Reset all queues and field maps\n        '),
                                                                            ('_related_init',
                                                                             [],
                                                                             '\n        Find all related forward and reverse Foreign Key, OneToOne,\n        ManyToMany and ManyToOne relationships and cache the relevant\n        fields and model classes\n        '),
                                                                            ('_collect_field_defaults',
                                                                             [],
                                                                             '\n        Collect default values for each field\n        '),
                                                                            ('_check_fields',
                                                                             ['no_related=False',
                                                                              'kwargs={}'],
                                                                             '\n        Check that all fields given to bulk_insert and bulk_insert_commit are valid\n        '),
                                                                            ('_fk_one2one_insert',
                                                                             ['depth',
                                                                              'max_depth',
                                                                              'autoclobber'],
                                                                             '\n        Commit any related fk or one2one objects to the database\n        Calls bulk_insert_commit on the related class\n        '),
                                                                            ('_many_to_one_insert',
                                                                             ['depth',
                                                                              'max_depth',
                                                                              'autoclobber'],
                                                                             '\n            Delayed bulk insert and commit of many to one relations\n        '),
                                                                            ('_many_to_many_insert',
                                                                             ['depth',
                                                                              'max_depth',
                                                                              'autoclobber'],
                                                                             '\n        Inserts all ManyToMany related objects and their relationships\n        '),
                                                                            ('_recover_pks',
                                                                             ['_self_ref=False'],
                                                                             '\n        Store the recovered primary keys in the local queue\n        Recover them 100 at a time\n        '),
                                                                            ('_find_bulk_manager',
                                                                             ['cls'],
                                                                             "\n        Locate a bulk manager on a related class\n        If there isn't one, add one\n        "),
                                                                            ('_m2one_enqueue',
                                                                             ['name',
                                                                              'value',
                                                                              'key'],
                                                                             "\n        Queue for the many side of ManyToOne relationships\n        Can't do anything with them until the primary key for\n        the root side is available\n        "),
                                                                            ('_generate_args',
                                                                             ['obj'],
                                                                             '\n        If we have been supplied a model object with no primary key,\n        convert it into a kwargs dictionary\n        '),
                                                                            ('_m2m_enqueue',
                                                                             ['name',
                                                                              'value',
                                                                              'key'],
                                                                             '\n        ManyToMany Queue\n        This handles dicts of args, integer ids, and model objects with or without primary keys\n        Or a list with any combination of the above\n        '),
                                                                            ('insert_m2m',
                                                                             ['table',
                                                                              'primary_key_name',
                                                                              'columns',
                                                                              'queue',
                                                                              'm2m_queue',
                                                                              'update_map',
                                                                              'autoclobber',
                                                                              'symmetrical'],
                                                                             ''),
                                                                            ('insert',
                                                                             ['table',
                                                                              'fields',
                                                                              'queue',
                                                                              'order',
                                                                              'autoclobber=False'],
                                                                             '\n        Bulk insert using INSERT\n        ***Limited by max packet size on mysql server***\n        ')],
                                                                'properties': ['queue',
                                                                               'order',
                                                                               'ref_queue',
                                                                               'ref_order',
                                                                               'ref_cache',
                                                                               'related_fields',
                                                                               'related_queue',
                                                                               'related_classes',
                                                                               'm2one_queue',
                                                                               'm2one_fields',
                                                                               'm2one_classes',
                                                                               'm2m_queue',
                                                                               'm2m_fields',
                                                                               'm2m_classes',
                                                                               'update_map',
                                                                               'defaults',
                                                                               'initialized',
                                                                               'now',
                                                                               '_inherited',
                                                                               'tempModel']},
             'rapidsms_httprouter.managers.ForUpdateManager': {'bases': ['django.db.models.Manager'],
                                                               'constructor': [],
                                                               'docstring': '',
                                                               'methods': [('get_query_set',
                                                                            [],
                                                                            '')],
                                                               'properties': []},
             'rapidsms_httprouter.managers.ForUpdateQuerySet': {'bases': ['django.db.models.query.QuerySet'],
                                                                'constructor': [],
                                                                'docstring': '',
                                                                'methods': [('for_single_update',
                                                                             [],
                                                                             '')],
                                                                'properties': []},
             'rapidsms_httprouter.migrations.0001_initial.Migration': {'bases': ['south.v2.SchemaMigration'],
                                                                       'constructor': [],
                                                                       'docstring': '',
                                                                       'methods': [('forwards',
                                                                                    ['orm'],
                                                                                    ''),
                                                                                   ('backwards',
                                                                                    ['orm'],
                                                                                    '')],
                                                                       'properties': ['models',
                                                                                      'complete_apps']},
             'rapidsms_httprouter.models.Message': {'bases': ['django.db.models.Model'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [('__unicode__', [], ''),
                                                                ('as_json', [], ''),
                                                                ('mass_text',
                                                                 ['text',
                                                                  'connections',
                                                                  "status='P'"],
                                                                 '')],
                                                    'properties': ['connection',
                                                                   'text',
                                                                   'direction',
                                                                   'status',
                                                                   'date',
                                                                   'priority',
                                                                   'in_response_to',
                                                                   'application',
                                                                   'batch',
                                                                   'objects',
                                                                   'bulk']},
             'rapidsms_httprouter.models.MessageBatch': {'bases': ['django.db.models.Model'],
                                                         'constructor': [],
                                                         'docstring': '',
                                                         'methods': [],
                                                         'properties': ['status']},
             'rapidsms_httprouter.router.HttpRouter': {'bases': ['object',
                                                                 'rapidsms.log.mixin.LoggerMixin'],
                                                       'constructor': [],
                                                       'docstring': '\n    This is a simplified version of the normal SMS router in that it has no threading.  Instead\n    it is expected that the handle_incoming and handle_outcoming calls are made in the HTTP\n    thread.\n    ',
                                                       'methods': [('normalize_number',
                                                                    ['number'],
                                                                    '\n        Normalizes the passed in number, they should be only digits, some backends prepend + and\n        maybe crazy users put in dashes or parentheses in the console.\n        '),
                                                                   ('add_message',
                                                                    ['backend',
                                                                     'contact',
                                                                     'text',
                                                                     'direction',
                                                                     'status'],
                                                                    '\n        Adds this message to the db.  This is both for logging, and we also keep state\n        tied to it.\n        '),
                                                                   ('mark_delivered',
                                                                    ['message_id'],
                                                                    '\n        Marks a message as delivered by the backend.\n        '),
                                                                   ('handle_incoming',
                                                                    ['backend',
                                                                     'sender',
                                                                     'text'],
                                                                    '\n        Handles an incoming message.\n        '),
                                                                   ('add_outgoing',
                                                                    ['connection',
                                                                     'text',
                                                                     'source=None',
                                                                     "status='Q'",
                                                                     'application=None'],
                                                                    '\n        Adds a message to our outgoing queue, this is a non-blocking action\n        '),
                                                                   ('check_workers', [], ''),
                                                                   ('handle_outgoing',
                                                                    ['msg',
                                                                     'source=None',
                                                                     'application=None'],
                                                                    '\n        Sends the passed in RapidSMS message off.  Optionally ties the outgoing message to the incoming\n        message which triggered it.\n        '),
                                                                   ('process_outgoing_phases',
                                                                    ['outgoing'],
                                                                    '\n        Passes the passed in message through the outgoing phase for all our configured SMS apps.\n\n        Apps have the opportunity to cancel messages in this phase by returning False when\n        called with the message.  In that case this method will also return False\n        '),
                                                                   ('add_app',
                                                                    ['module_name'],
                                                                    '\n        Find the app named *module_name*, instantiate it, and add it to\n        the list of apps to be notified of incoming messages. Return the\n        app instance.\n        '),
                                                                   ('start',
                                                                    ['start_workers=False'],
                                                                    '\n        Initializes our router.\n        TODO: this happens in the HTTP thread on the first call, that could be bad.\n        ')],
                                                       'properties': ['incoming_phases',
                                                                      'outgoing_phases',
                                                                      'apps',
                                                                      'started',
                                                                      'outgoing']},
             'rapidsms_httprouter.router.HttpRouterThread': {'bases': ['threading.Thread',
                                                                       'rapidsms.log.mixin.LoggerMixin'],
                                                             'constructor': ['**kwargs'],
                                                             'docstring': '\n    This thread is just a worker thread for messages.  The run() method pops off a message to work on\n    and continues appropriately.\n    ',
                                                             'methods': [('is_busy', [], ''),
                                                                         ('run', [], '')],
                                                             'properties': ['_isbusy']},
             'rapidsms_httprouter.tests.BackendTest': {'bases': ['django.test.TransactionTestCase'],
                                                       'constructor': [],
                                                       'docstring': '',
                                                       'methods': [('setUp', [], ''),
                                                                   ('tearDown', [], ''),
                                                                   ('testNoRouterURL', [], ''),
                                                                   ('testSimpleRouterURL',
                                                                    [],
                                                                    ''),
                                                                   ('testRouterDictURL',
                                                                    [],
                                                                    '')],
                                                       'properties': ['backend',
                                                                      'connection',
                                                                      'backend2',
                                                                      'connection2']},
             'rapidsms_httprouter.tests.RouterTest': {'bases': ['django.test.TestCase'],
                                                      'constructor': [],
                                                      'docstring': '',
                                                      'methods': [('setUp', [], ''),
                                                                  ('testAddMessage', [], ''),
                                                                  ('testAddBulk', [], ''),
                                                                  ('testRouter', [], ''),
                                                                  ('testAppCancel', [], ''),
                                                                  ('testAppReply', [], '')],
                                                      'properties': ['backend', 'connection']},
             'rapidsms_httprouter.tests.ViewTest': {'bases': ['django.test.TestCase'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [('setUp', [], ''),
                                                                ('tearDown', [], ''),
                                                                ('testViews', [], ''),
                                                                ('testSecurity', [], '')],
                                                    'properties': ['backend', 'connection']},
             'rapidsms_httprouter.views.DeliveredForm': {'bases': ['rapidsms_httprouter.views.SecureForm'],
                                                         'constructor': [],
                                                         'docstring': '',
                                                         'methods': [],
                                                         'properties': ['message_id']},
             'rapidsms_httprouter.views.MessageForm': {'bases': ['rapidsms_httprouter.views.SecureForm'],
                                                       'constructor': [],
                                                       'docstring': '',
                                                       'methods': [],
                                                       'properties': ['backend',
                                                                      'sender',
                                                                      'message',
                                                                      'echo']},
             'rapidsms_httprouter.views.MessageTable': {'bases': ['djtables.Table'],
                                                        'constructor': [],
                                                        'docstring': '',
                                                        'methods': [],
                                                        'properties': ['text',
                                                                       'direction',
                                                                       'connection',
                                                                       'status',
                                                                       'date']},
             'rapidsms_httprouter.views.ReplyForm': {'bases': ['django.forms.Form'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [],
                                                     'properties': ['recipient', 'message']},
             'rapidsms_httprouter.views.SearchForm': {'bases': ['django.forms.Form'],
                                                      'constructor': [],
                                                      'docstring': '',
                                                      'methods': [],
                                                      'properties': ['search']},
             'rapidsms_httprouter.views.SecureForm': {'bases': ['django.forms.Form'],
                                                      'constructor': [],
                                                      'docstring': '\n    Abstracts out requirement of a password.  If you have a password set\n    in settings.py, then this will make sure it is included in all outbox,\n    receive and delivered calls.\n    ',
                                                      'methods': [('clean', [], '')],
                                                      'properties': ['password']},
             'rapidsms_httprouter.views.SendForm': {'bases': ['django.forms.Form'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [],
                                                    'properties': ['sender', 'text']},
             'script.admin.ScriptAdmin': {'bases': ['django.contrib.admin.ModelAdmin'],
                                          'constructor': [],
                                          'docstring': 'script admin ',
                                          'methods': [],
                                          'properties': []},
             'script.admin.ScriptProgressAdmin': {'bases': ['django.contrib.admin.ModelAdmin'],
                                                  'constructor': [],
                                                  'docstring': 'script progress admin ',
                                                  'methods': [],
                                                  'properties': []},
             'script.admin.ScriptStepAdmin': {'bases': ['django.contrib.admin.ModelAdmin'],
                                              'constructor': [],
                                              'docstring': 'script progress admin ',
                                              'methods': [],
                                              'properties': []},
             'script.app.App': {'bases': ['rapidsms.apps.base.AppBase'],
                                'constructor': [],
                                'docstring': '',
                                'methods': [('handle', ['message'], '')],
                                'properties': []},
             'script.management.commands.check_script_progress.Command': {'bases': ['django.core.management.base.BaseCommand'],
                                                                          'constructor': [],
                                                                          'docstring': '',
                                                                          'methods': [('handle',
                                                                                       ['**options'],
                                                                                       '')],
                                                                          'properties': ['option_list']},
             'script.management.commands.check_script_progress.NullHandler': {'bases': ['logging.Handler'],
                                                                              'constructor': [],
                                                                              'docstring': '',
                                                                              'methods': [('emit',
                                                                                           ['record'],
                                                                                           '')],
                                                                              'properties': []},
             'script.migrations.0001_initial.Migration': {'bases': ['south.v2.SchemaMigration'],
                                                          'constructor': [],
                                                          'docstring': '',
                                                          'methods': [('forwards', ['orm'], ''),
                                                                      ('backwards',
                                                                       ['orm'],
                                                                       '')],
                                                          'properties': ['models',
                                                                         'complete_apps']},
             'script.models.Email': {'bases': ['django.db.models.Model'],
                                     'constructor': [],
                                     'docstring': '',
                                     'methods': [('send', ['context={}'], '')],
                                     'properties': ['subject',
                                                    'sender',
                                                    'message',
                                                    'recipients']},
             'script.models.Script': {'bases': ['django.db.models.Model'],
                                      'constructor': [],
                                      'docstring': '',
                                      'methods': [('__unicode__', [], '')],
                                      'properties': ['slug',
                                                     'name',
                                                     'sites',
                                                     'objects',
                                                     'on_site',
                                                     'enabled']},
             'script.models.ScriptProgress': {'bases': ['django.db.models.Model'],
                                              'constructor': [],
                                              'docstring': '\n    This model keeps track of any Connections actively involved in a\n    script currently, including the last time there was an interaction,\n    the current step the user has progressed to, and the\n    number of times a message has been resent (if any).  This only keeps\n    actively-running script participants and their current progress,\n    the full list of responses sent by a user is tracked elsewhere,\n    and upon script completion the Connection is deleted from this table.\n    ',
                                              'methods': [('__unicode__', [], ''),
                                                          ('expired',
                                                           ['curtime'],
                                                           '\n        Check if the wait time for this step is completed.  This applies to all\n        rules except LENIENT and STRICT, which only take action when a user\n        responds.  For WAIT_* rules, only the giveup time is checked,\n        for RESEND_* rules, the number of resends must be reached, and then\n        the giveup time exceeded.\n\n        Returns True if it the time for this step has elapsed, False otherwise\n        '),
                                                          ('time_to_start',
                                                           ['curtime'],
                                                           "\n        Check if the current script progress needs to be started.  This applies when\n        a ScriptProgress object has None for step (user hasn't even progressed to step\n        0), and the start_offset for the first step has elapsed.\n\n        Returns True if the above case applies, False otherwise\n        "),
                                                          ('time_to_resend',
                                                           ['curtime'],
                                                           '\n        Check to see if the time to resend a message/poll has elapsed, based on the\n        step, rules, status, num_tries, and retry_offset.\n\n        Returns True if the step has the appropriate rule, and the proper amount of time\n        has passed, False otherwise.\n        '),
                                                          ('last_step',
                                                           [],
                                                           '\n        Returns true if the current step is the last step, False otherwise.\n        '),
                                                          ('time_to_transition',
                                                           ['curtime'],
                                                           '\n        For steps that are complete, check the start time of the\n        next step (or check if the current step is the last one).\n\n        If the start_offset of the next step has elapsed, returns\n        True, False otherwise.\n        '),
                                                          ('giveup',
                                                           [],
                                                           '\n        Remove this ScriptProgress from the table, update ScriptSession, and\n        fire the appropriate signal.\n        '),
                                                          ('get_next_step', [], ''),
                                                          ('moveon',
                                                           [],
                                                           '\n        Move the step to the next in order (if one exists, otherwise end the script),\n        sending the appropriate signals.\n        '),
                                                          ('start',
                                                           [],
                                                           '\n        start the ScriptProgress, by advancing to the zeroeth step.\n        '),
                                                          ('outgoing_message',
                                                           [],
                                                           '\n        Return the appropriate outgoing message for this step, either the poll question\n        or the message.\n        '),
                                                          ('accepts_incoming',
                                                           ['curtime'],
                                                           '\n        Check to see if the current progress within the ScriptProgress is waiting\n        for an incoming message: the script should be started, the current step\n        should have a poll, the status should be pending and the step should not\n        be past its expiry time.  Returns True if this is the case, False otherwise.\n        '),
                                                          ('log',
                                                           ['response'],
                                                           '\n        Log the response in the current ScriptSession for this connection.\n        '),
                                                          ('set_time',
                                                           ['newtime'],
                                                           "\n        The time attribute is normally auto_now, for convenience (it's supposed to store\n        the last time that something happened in the script).  However, for scheduling\n        purposes, it's sometimes convenient to change it to something else manually. \n        ")],
                                              'properties': ['connection',
                                                             'script',
                                                             'step',
                                                             'COMPLETE',
                                                             'PENDING',
                                                             'status',
                                                             'time',
                                                             'num_tries']},
             'script.models.ScriptResponse': {'bases': ['django.db.models.Model'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [],
                                              'properties': ['session', 'response']},
             'script.models.ScriptSession': {'bases': ['django.db.models.Model'],
                                             'constructor': [],
                                             'docstring': '\n    This model provides a full audit trail of all the responses during a particular\n    progression through a script.\n    ',
                                             'methods': [],
                                             'properties': ['connection',
                                                            'script',
                                                            'start_time',
                                                            'end_time']},
             'script.models.ScriptStep': {'bases': ['django.db.models.Model'],
                                          'constructor': [],
                                          'docstring': "\n    Scripts are a dialogue between a user and the system, involving\n    timed messages, some of which expect a response (Polls), and some\n    of which don't (basic messages).  Progression through a set of script\n    steps follows a set of rules, governed by the actions taken by the user\n    and the time elapsed since the previous step or action.\n    ",
                                          'methods': [('__unicode__', [], '')],
                                          'properties': ['script',
                                                         'poll',
                                                         'message',
                                                         'email',
                                                         'order',
                                                         'LENIENT',
                                                         'STRICT',
                                                         'STRICT_MOVEON',
                                                         'STRICT_GIVEUP',
                                                         'WAIT_MOVEON',
                                                         'WAIT_GIVEUP',
                                                         'RESEND_MOVEON',
                                                         'RESEND_GIVEUP',
                                                         'rule',
                                                         'start_offset',
                                                         'retry_offset',
                                                         'giveup_offset',
                                                         'num_tries']},
             'script.tests.ModelTest': {'bases': ['django.test.TestCase'],
                                        'constructor': [],
                                        'docstring': '',
                                        'methods': [('setUp',
                                                     [],
                                                     '\n        Create a default script for all test cases\n        '),
                                                    ('elapseTime',
                                                     ['progress', 'seconds'],
                                                     "\n        This hack mimics the progression of time, from the perspective of a linear test case,\n        by actually *subtracting* from the value that's currently stored (usually datetime.datetime.now())\n        "),
                                                    ('fakeIncoming',
                                                     ['message', 'connection=None'],
                                                     ''),
                                                    ('testCheckProgress', [], ''),
                                                    ('testIncomingProgress', [], ''),
                                                    ('testLenient', [], ''),
                                                    ('testStrictRules', [], ''),
                                                    ('waitFlow', ['giveup=False'], ''),
                                                    ('resendFlow', ['giveup=False'], ''),
                                                    ('testWaitMoveon', [], ''),
                                                    ('testResendMoveon', [], ''),
                                                    ('testWaitGiveup', [], ''),
                                                    ('testResendGiveup', [], ''),
                                                    ('testScriptSignals', [], ''),
                                                    ('assertProgress',
                                                     ['connection',
                                                      'step_num',
                                                      'step_status',
                                                      'session_count',
                                                      'response_count'],
                                                     ''),
                                                    ('testFullScriptFlow', [], '')],
                                        'properties': []},
             'uganda_common.cache_manager.CachingManager': {'bases': ['django.db.models.query.QuerySet'],
                                                            'constructor': [],
                                                            'docstring': '',
                                                            'methods': [('get_query_set',
                                                                         [],
                                                                         ''),
                                                                        ('contribute_to_class',
                                                                         ['*args', '**kwargs'],
                                                                         '')],
                                                            'properties': ['use_for_related_fields']},
             'uganda_common.cache_manager.CachingQuerySet': {'bases': ['django.db.models.query.QuerySet'],
                                                             'constructor': [],
                                                             'docstring': '',
                                                             'methods': [('get',
                                                                          ['*args',
                                                                           '**kwargs'],
                                                                          '')],
                                                             'properties': []},
             'uganda_common.forms.DateRangeForm': {'bases': ['django.forms.Form'],
                                                   'constructor': [],
                                                   'docstring': '',
                                                   'methods': [('clean', [], '')],
                                                   'properties': ['start',
                                                                  'end',
                                                                  'start_ts',
                                                                  'end_ts']},
             'uganda_common.forms.SMSInput': {'bases': ['django.forms.Textarea'],
                                              'constructor': ['*args', '**kwargs'],
                                              'docstring': ' A widget for sms input ',
                                              'methods': [('render',
                                                           ['name', 'value', 'attrs=None'],
                                                           '')],
                                              'properties': []},
             'uganda_common.models.PolymorphicManager': {'bases': ['django.db.models.Manager'],
                                                         'constructor': [],
                                                         'docstring': '',
                                                         'methods': [('get_query_set', [], '')],
                                                         'properties': []},
             'uganda_common.models.PolymorphicMixin': {'bases': [],
                                                       'constructor': [],
                                                       'docstring': '',
                                                       'methods': [('downcast', [], '')],
                                                       'properties': []},
             'uganda_common.reports.AdditionColumn': {'bases': ['uganda_common.reports.ArithmeticFunctionColumn'],
                                                      'constructor': [],
                                                      'docstring': '',
                                                      'methods': [('func',
                                                                   ['first', 'second'],
                                                                   '')],
                                                      'properties': []},
             'uganda_common.reports.ArithmeticFunctionColumn': {'bases': ['generic.reporting.reports.Column'],
                                                                'constructor': ['first_column',
                                                                                'second_column',
                                                                                '**kwargs'],
                                                                'docstring': '',
                                                                'methods': [('func',
                                                                             ['first',
                                                                              'second'],
                                                                             ''),
                                                                            ('set_report',
                                                                             ['report'],
                                                                             ''),
                                                                            ('add_to_report',
                                                                             ['report',
                                                                              'key',
                                                                              'dictionary'],
                                                                             ''),
                                                                            ('get_chart',
                                                                             [],
                                                                             ''),
                                                                            ('get_view_function',
                                                                             [],
                                                                             '')],
                                                                'properties': ['first_column',
                                                                               'second_column']},
             'uganda_common.reports.DifferenceColumn': {'bases': ['uganda_common.reports.ArithmeticFunctionColumn'],
                                                        'constructor': [],
                                                        'docstring': '',
                                                        'methods': [('func',
                                                                     ['first', 'second'],
                                                                     '')],
                                                        'properties': []},
             'uganda_common.reports.LocationReport': {'bases': ['generic.reports.Report'],
                                                      'constructor': ['request', 'dates'],
                                                      'docstring': '',
                                                      'methods': [],
                                                      'properties': ['location']},
             'uganda_common.reports.PollCategoryResultsColumn': {'bases': ['generic.reporting.reports.Column'],
                                                                 'constructor': ['poll',
                                                                                 'category'],
                                                                 'docstring': '',
                                                                 'methods': [('add_to_report',
                                                                              ['report',
                                                                               'key',
                                                                               'dictionary'],
                                                                              '')],
                                                                 'properties': ['poll',
                                                                                'category']},
             'uganda_common.reports.PollNumericResultsColumn': {'bases': ['generic.reporting.reports.Column'],
                                                                'constructor': ['poll_name',
                                                                                'attrs=SUM'],
                                                                'docstring': '',
                                                                'methods': [('add_to_report',
                                                                             ['report',
                                                                              'key',
                                                                              'dictionary'],
                                                                             '')],
                                                                'properties': ['AVERAGE',
                                                                               'MAX',
                                                                               'MIN',
                                                                               'COUNT',
                                                                               'STDDEV',
                                                                               'SUM',
                                                                               'VALUE_FLAGS',
                                                                               'poll',
                                                                               'attrs']},
             'uganda_common.reports.QuotientColumn': {'bases': ['uganda_common.reports.ArithmeticFunctionColumn'],
                                                      'constructor': [],
                                                      'docstring': '',
                                                      'methods': [('func',
                                                                   ['first', 'second'],
                                                                   '')],
                                                      'properties': []},
             'uganda_common.reports.XFormAttributeColumn': {'bases': ['generic.reporting.reports.Column'],
                                                            'constructor': ['keyword',
                                                                            'extra_filters=None',
                                                                            '**kwargs'],
                                                            'docstring': '',
                                                            'methods': [('add_to_report',
                                                                         ['report',
                                                                          'key',
                                                                          'dictionary'],
                                                                         ''),
                                                                        ('get_chart', [], ''),
                                                                        ('get_view_function',
                                                                         [],
                                                                         '')],
                                                            'properties': ['keyword',
                                                                           'extra_filters',
                                                                           'chart_yaxis',
                                                                           'chart_title']},
             'uganda_common.reports.XFormDateGetter': {'bases': ['generic.reporting.views.BasicDateGetter'],
                                                       'constructor': [],
                                                       'docstring': '',
                                                       'methods': [('get_dates',
                                                                    ['request'],
                                                                    '\n        Process date variables from POST, session, or defaults\n        ')],
                                                       'properties': []},
             'uganda_common.reports.XFormSubmissionColumn': {'bases': ['generic.reporting.reports.Column'],
                                                             'constructor': ['keyword',
                                                                             'extra_filters=None',
                                                                             '**kwargs'],
                                                             'docstring': '',
                                                             'methods': [('add_to_report',
                                                                          ['report',
                                                                           'key',
                                                                           'dictionary'],
                                                                          ''),
                                                                         ('get_chart', [], ''),
                                                                         ('get_view_function',
                                                                          [],
                                                                          '')],
                                                             'properties': ['keyword',
                                                                            'extra_filters',
                                                                            'chart_yaxis',
                                                                            'chart_title']},
             'uganda_common.utils.ExcelResponse': {'bases': ['django.http.HttpResponse'],
                                                   'constructor': ['data',
                                                                   "output_name='excel_report'",
                                                                   'headers=None',
                                                                   'write_to_file=False',
                                                                   'force_csv=False',
                                                                   "encoding='utf8'"],
                                                   'docstring': '\n    This class contains utilities that are used to produce Excel reports from datasets stored in a database or scraped\n    from a form.\n    ',
                                                   'methods': [],
                                                   'properties': []},
             'uganda_common.views.ArithmeticChartView': {'bases': ['uganda_common.views.XFormChartView'],
                                                         'constructor': [],
                                                         'docstring': '',
                                                         'methods': [('func',
                                                                      ['first', 'second'],
                                                                      ''),
                                                                     ('reorganize_for_chart_api',
                                                                      ['timespan', 'report'],
                                                                      ''),
                                                                     ('get_data', [], '')],
                                                         'properties': ['first_column',
                                                                        'second_column',
                                                                        'main_column',
                                                                        'date_getter']},
             'uganda_common.views.DifferenceChartView': {'bases': ['uganda_common.views.ArithmeticChartView'],
                                                         'constructor': [],
                                                         'docstring': '',
                                                         'methods': [('func',
                                                                      ['first', 'second'],
                                                                      '')],
                                                         'properties': []},
             'uganda_common.views.PercentageChartView': {'bases': ['uganda_common.views.ArithmeticChartView'],
                                                         'constructor': [],
                                                         'docstring': '',
                                                         'methods': [('func',
                                                                      ['first', 'second'],
                                                                      '')],
                                                         'properties': []},
             'uganda_common.views.SumChartView': {'bases': ['uganda_common.views.ArithmeticChartView'],
                                                  'constructor': [],
                                                  'docstring': '',
                                                  'methods': [('func', ['first', 'second'], '')],
                                                  'properties': []},
             'uganda_common.views.XFormChartView': {'bases': ['generic.reporting.views.ChartView'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [('as_url', [], ''),
                                                                ('reorganize_for_chart_api',
                                                                 ['timespan', 'report'],
                                                                 ''),
                                                                ('get_data', [], ''),
                                                                ('drill_on', ['key'], '')],
                                                    'properties': ['location_id',
                                                                   'xform_keyword',
                                                                   'attribute_keyword',
                                                                   'extra_filters',
                                                                   'date_getter']},
             'uganda_common.views.XFormReport': {'bases': ['generic.reporting.views.ReportView'],
                                                 'constructor': [],
                                                 'docstring': '',
                                                 'methods': [],
                                                 'properties': ['date_getter']},
             'unregister.app.App': {'bases': ['rapidsms.apps.base.AppBase'],
                                    'constructor': [],
                                    'docstring': '',
                                    'methods': [('handle', ['message'], ''),
                                                ('outgoing', ['msg'], '')],
                                    'properties': []},
             'unregister.extensions.rapidsms.contact.ActivatedcContact': {'bases': ['django.db.models.Model'],
                                                                          'constructor': [],
                                                                          'docstring': "\n    This extension for Contacts allows developers to tie a Contact to\n    the Location object they're reporting from.\n    ",
                                                                          'methods': [],
                                                                          'properties': ['active']},
             'unregister.forms.BlacklistForm': {'bases': ['generic.forms.ActionForm'],
                                                'constructor': [],
                                                'docstring': ' abstract class for all the filter forms',
                                                'methods': [('perform',
                                                             ['request', 'results'],
                                                             '')],
                                                'properties': ['action_label']},
             'unregister.migrations.0001_initial.Migration': {'bases': ['south.v2.SchemaMigration'],
                                                              'constructor': [],
                                                              'docstring': '',
                                                              'methods': [('forwards',
                                                                           ['orm'],
                                                                           ''),
                                                                          ('backwards',
                                                                           ['orm'],
                                                                           '')],
                                                              'properties': ['models',
                                                                             'complete_apps']},
             'unregister.models.Blacklist': {'bases': ['django.db.models.Model'],
                                             'constructor': [],
                                             'docstring': '',
                                             'methods': [],
                                             'properties': ['connection']}},
 'CONSTANTS': ['mtrack_project.urls.urlpatterns',
               'mtrack_project.settings.ANONYMOUS_USER_ID',
               'mtrack_project.settings.filedir',
               'mtrack_project.settings.TIME_ZONE',
               'mtrack_project.settings.ACTIVATION_CODE',
               'mtrack_project.settings.OPT_IN_WORDS',
               'mtrack_project.settings.OPT_OUT_WORDS',
               'mtrack_project.settings.INITIAL_USSD_SCREEN',
               'mtrack_project.settings.OPT_OUT_CONFIRMATION',
               'mtrack_project.settings.MIN_LON',
               'mtrack_project.settings.MAX_LON',
               'mtrack_project.settings.MIN_LAT',
               'mtrack_project.settings.MAX_LAT',
               'mtrack_project.settings.CATEGORY_COLORS',
               'mtrack_project.settings.DATABASES',
               'mtrack_project.settings.INSTALLED_BACKENDS',
               'mtrack_project.settings.INSTALLED_APPS',
               'mtrack_project.settings.SMS_APPS',
               'mtrack_project.settings.RAPIDSMS_TABS',
               'mtrack_project.settings.AUTHENTICATED_TABS',
               'mtrack_project.settings.DEBUG',
               'mtrack_project.settings.TEMPLATE_DEBUG',
               'mtrack_project.settings.LOGIN_REDIRECT_URL',
               'mtrack_project.settings.TEST_RUNNER',
               'mtrack_project.settings.SKIP_SOUTH_TESTS',
               'mtrack_project.settings.SOUTH_TESTS_MIGRATE',
               'mtrack_project.settings.MEDIA_URL',
               'mtrack_project.settings.ADMIN_MEDIA_PREFIX',
               'mtrack_project.settings.SITE_ID',
               'mtrack_project.settings.TEMPLATE_CONTEXT_PROCESSORS',
               'mtrack_project.settings.MIDDLEWARE_CLASSES',
               'mtrack_project.settings.TEST_EXCLUDED_APPS',
               'mtrack_project.settings.TEMPLATE_LOADERS',
               'mtrack_project.settings.ROOT_URLCONF',
               'mtrack_project.settings.MAP_KEY',
               'mtrack_project.settings.COUNTRY',
               'mtrack_project.settings.MESSAGELOG_APP',
               'mtrack_project.settings.LOGISTICS_CONFIG',
               'mtrack_project.settings.LOGISTICS_AGGRESSIVE_SOH_PARSING',
               'mtrack_project.settings.LOGISTICS_ALERT_GENERATORS',
               'mtrack_project.settings.LOGISTICS_NOTIF_GENERATORS',
               'mtrack_project.settings.SYSTEM_USERNAME',
               'mtrack_project.settings.db_name',
               'mtrack_project.static.uganda.config.messagelog',
               'mtrack_project.rapidsms_mtrack.mtrack.utils.XFORMS',
               'mtrack_project.rapidsms_mtrack.mtrack.utils.ALERTS_TOTAL',
               'mtrack_project.rapidsms_mtrack.mtrack.utils.ALERTS_ACTIONED',
               'mtrack_project.rapidsms_mtrack.mtrack.utils.ALERTS_CREATED',
               'mtrack_project.rapidsms_mtrack.mtrack.models.ACTIONS',
               'mtrack_project.rapidsms_mtrack.mtrack.urls.urlpatterns',
               'mtrack_project.rapidsms_mtrack.mtrack.settings.MTRACK_ROOT',
               'mtrack_project.rapidsms_xforms_src.pavement.ALL_TASKS_LOADED',
               'mtrack_project.rapidsms_xforms_src.pavement.e',
               'mtrack_project.rapidsms_xforms_src.pavement.ALL_TASKS_LOADED',
               'mtrack_project.rapidsms_xforms_src.pavement.version',
               'mtrack_project.rapidsms_xforms_src.pavement.classifiers',
               'mtrack_project.rapidsms_xforms_src.pavement.install_requires',
               'mtrack_project.rapidsms_xforms_src.pavement.entry_points',
               'mtrack_project.rapidsms_xforms_src.test_settings.DATABASES',
               'mtrack_project.rapidsms_xforms_src.test_settings.INSTALLED_BACKENDS',
               'mtrack_project.rapidsms_xforms_src.test_settings.INSTALLED_APPS',
               'mtrack_project.rapidsms_xforms_src.test_settings.RAPIDSMS_TABS',
               'mtrack_project.rapidsms_xforms_src.test_settings.DEBUG',
               'mtrack_project.rapidsms_xforms_src.test_settings.TEMPLATE_DEBUG',
               'mtrack_project.rapidsms_xforms_src.test_settings.LOGIN_REDIRECT_URL',
               'mtrack_project.rapidsms_xforms_src.test_settings.TEST_RUNNER',
               'mtrack_project.rapidsms_xforms_src.test_settings.MEDIA_URL',
               'mtrack_project.rapidsms_xforms_src.test_settings.SITE_ID',
               'mtrack_project.rapidsms_xforms_src.test_settings.LOG_LEVEL',
               'mtrack_project.rapidsms_xforms_src.test_settings.LOG_FILE',
               'mtrack_project.rapidsms_xforms_src.test_settings.LOG_FORMAT',
               'mtrack_project.rapidsms_xforms_src.test_settings.LOG_SIZE',
               'mtrack_project.rapidsms_xforms_src.test_settings.LOG_BACKUPS',
               'mtrack_project.rapidsms_xforms_src.test_settings.TEMPLATE_CONTEXT_PROCESSORS',
               'mtrack_project.rapidsms_xforms_src.test_settings.TEST_EXCLUDED_APPS',
               'mtrack_project.rapidsms_xforms_src.test_settings.ROOT_URLCONF',
               'mtrack_project.rapidsms_xforms_src.test_settings.db_name',
               'mtrack_project.rapidsms_xforms_src.test-runner.urls.urlpatterns',
               'mtrack_project.rapidsms_xforms_src.test-runner.settings.DATABASES',
               'mtrack_project.rapidsms_xforms_src.test-runner.settings.INSTALLED_BACKENDS',
               'mtrack_project.rapidsms_xforms_src.test-runner.settings.MIDDLEWARE_CLASSES',
               'mtrack_project.rapidsms_xforms_src.test-runner.settings.INSTALLED_APPS',
               'mtrack_project.rapidsms_xforms_src.test-runner.settings.RAPIDSMS_TABS',
               'mtrack_project.rapidsms_xforms_src.test-runner.settings.INTERNAL_IPS',
               'mtrack_project.rapidsms_xforms_src.test-runner.settings.DEBUG_TOOLBAR_CONFIG',
               'mtrack_project.rapidsms_xforms_src.test-runner.settings.DEBUG',
               'mtrack_project.rapidsms_xforms_src.test-runner.settings.TEMPLATE_DEBUG',
               'mtrack_project.rapidsms_xforms_src.test-runner.settings.LOGIN_REDIRECT_URL',
               'mtrack_project.rapidsms_xforms_src.test-runner.settings.LOGIN_URL',
               'mtrack_project.rapidsms_xforms_src.test-runner.settings.MEDIA_URL',
               'mtrack_project.rapidsms_xforms_src.test-runner.settings.SITE_ID',
               'mtrack_project.rapidsms_xforms_src.test-runner.settings.LOG_LEVEL',
               'mtrack_project.rapidsms_xforms_src.test-runner.settings.LOG_FILE',
               'mtrack_project.rapidsms_xforms_src.test-runner.settings.LOG_FORMAT',
               'mtrack_project.rapidsms_xforms_src.test-runner.settings.LOG_SIZE',
               'mtrack_project.rapidsms_xforms_src.test-runner.settings.LOG_BACKUPS',
               'mtrack_project.rapidsms_xforms_src.test-runner.settings.TEMPLATE_CONTEXT_PROCESSORS',
               'mtrack_project.rapidsms_xforms_src.test-runner.settings.TEST_EXCLUDED_APPS',
               'mtrack_project.rapidsms_xforms_src.test-runner.settings.ROOT_URLCONF',
               'mtrack_project.rapidsms_xforms_src.test-runner.settings.db_name',
               'mtrack_project.rapidsms_xforms_src.test-runner.settings.XFORMS_HOST',
               'mtrack_project.rapidsms_xforms_src.test-runner.settings.AUTHENTICATE_XFORMS',
               'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.__version__',
               'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.models.CONSTRAINT_CHOICES',
               'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.models.TYPE_WWW',
               'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.models.TYPE_SMS',
               'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.models.TYPE_ODK_WWW',
               'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.models.TYPE_ODK_SMS',
               'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.models.TYPE_IMPORT',
               'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.models.SUBMISSION_CHOICES',
               'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.models.xform_received',
               'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.urls.urlpatterns',
               'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.views.add_button',
               'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.views.save_button',
               'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.views.constraint_buttons',
               'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.views.constraint_columns',
               'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.templatetags.dumper.register',
               'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.templatetags.prop.register',
               'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.templatetags.messages.register',
               'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.templatetags.forms.register',
               'conf.extensions',
               'conf.templates_path',
               'conf.source_suffix',
               'conf.master_doc',
               'conf.project',
               'conf.copyright',
               'conf.version',
               'conf.release',
               'conf.exclude_trees',
               'conf.pygments_style',
               'conf.html_theme',
               'conf.htmlhelp_basename',
               'conf.latex_documents',
               'contact.models.c_bulk_mgr',
               'contact.models.cn_bulk_mgr',
               'contact.urls.urlpatterns',
               'contact.templatetags.extra_tags.register',
               'rapidsms.router.router',
               'rapidsms.settings.PROJECT_NAME',
               'rapidsms.settings.PAGINATOR_OBJECTS_PER_PAGE',
               'rapidsms.settings.PAGINATOR_MAX_PAGE_LINKS',
               'rapidsms.backends.irc.irclib',
               'rapidsms.backends.gsm.pygsm',
               'rapidsms.backends.smpp.smpplib',
               'rapidsms.urls.static_media.urlpatterns',
               'rapidsms.urls.static_media.module_name',
               'rapidsms.urls.static_media.media_prefix',
               'rapidsms.urls.static_media.module_suffix',
               'rapidsms.urls.static_media.module',
               'rapidsms.urls.static_media.module_path',
               'rapidsms.urls.static_media.static_dir',
               'rapidsms.urls.login_logout.urlpatterns',
               'project.urls.urlpatterns',
               'project.settings.DATABASES',
               'project.settings.INSTALLED_BACKENDS',
               'project.settings.INSTALLED_APPS',
               'project.settings.RAPIDSMS_TABS',
               'project.settings.DEBUG',
               'project.settings.TEMPLATE_DEBUG',
               'project.settings.LOGIN_REDIRECT_URL',
               'project.settings.TEST_RUNNER',
               'project.settings.MEDIA_URL',
               'project.settings.SITE_ID',
               'project.settings.LOG_LEVEL',
               'project.settings.LOG_FILE',
               'project.settings.LOG_FORMAT',
               'project.settings.LOG_SIZE',
               'project.settings.LOG_BACKUPS',
               'project.settings.TEMPLATE_CONTEXT_PROCESSORS',
               'project.settings.TEMPLATE_LOADERS',
               'project.settings.TEST_EXCLUDED_APPS',
               'project.settings.ROOT_URLCONF',
               'project.settings.db_name',
               'rapidsms.contrib.default.settings.DEFAULT_RESPONSE',
               'rapidsms.contrib.handlers.settings.INSTALLED_HANDLERS',
               'rapidsms.contrib.handlers.settings.EXCLUDED_HANDLERS',
               'rapidsms.contrib.handlers.settings.RAPIDSMS_HANDLERS_EXCLUDE_APPS',
               'rapidsms.contrib.messagelog.models.DIRECTION_CHOICES',
               'rapidsms.contrib.messagelog.urls.urlpatterns',
               'rapidsms.contrib.httptester.utils.send_test_message',
               'rapidsms.contrib.httptester.utils.get_message_log',
               'rapidsms.contrib.httptester.urls.urlpatterns',
               'rapidsms.contrib.httptester.settings.MESSAGE_TESTER_TIMEOUT',
               'rapidsms.contrib.httptester.settings.MESSAGE_TESTER_INTERVAL',
               'rapidsms.contrib.registration.urls.urlpatterns',
               'rapidsms.contrib.locations.urls.urlpatterns',
               'rapidsms.contrib.locations.settings.MAP_DEFAULT_LATITUDE',
               'rapidsms.contrib.locations.settings.MAP_DEFAULT_LONGITUDE',
               'rapidsms.contrib.export.urls.urlpatterns',
               'rapidsms.contrib.scheduler.models.ALL',
               'rapidsms.contrib.scheduler.models._TIME_FIELDS',
               'rapidsms.contrib.scheduler.urls.urlpatterns',
               'rapidsms.contrib.scheduler.templatetags.scheduler_tags.register',
               'rapidsms.contrib.scheduler.tests.faketime.start',
               'rapidsms.contrib.scheduler.tests.faketime.sec',
               'rapidsms.contrib.scheduler.tests.faketime.min',
               'rapidsms.contrib.scheduler.tests.faketime.hour',
               'rapidsms.contrib.scheduler.tests.faketime.day',
               'rapidsms.contrib.scheduler.tests.faketime.week',
               'rapidsms.contrib.scheduler.tests.faketime.month',
               'rapidsms.contrib.ajax.urls.urlpatterns',
               'rapidsms.contrib.ajax.settings.AJAX_PROXY_HOST',
               'rapidsms.contrib.ajax.settings.AJAX_PROXY_PORT',
               'rapidsms.contrib.messaging.filters.callbacks',
               'rapidsms.contrib.messaging.urls.urlpatterns',
               'rapidsms.templatetags.tabs_tags.register',
               'rapidsms.templatetags.forms_tags.register',
               'rapidsms.templatetags.region_tags.register',
               'rapidsms.templatetags.paginator_tags.register',
               'mtrack_project.rapidsms_cvs.sample-urls.urlpatterns',
               'mtrack_project.rapidsms_cvs.sample-settings.TIME_ZONE',
               'mtrack_project.rapidsms_cvs.sample-settings.BASE_CSS',
               'mtrack_project.rapidsms_cvs.sample-settings.DATABASES',
               'mtrack_project.rapidsms_cvs.sample-settings.ROUTER_URL',
               'mtrack_project.rapidsms_cvs.sample-settings.INSTALLED_APPS',
               'mtrack_project.rapidsms_cvs.sample-settings.SMS_APPS',
               'mtrack_project.rapidsms_cvs.sample-settings.RAPIDSMS_TABS',
               'mtrack_project.rapidsms_cvs.sample-settings.DEBUG',
               'mtrack_project.rapidsms_cvs.sample-settings.TEMPLATE_DEBUG',
               'mtrack_project.rapidsms_cvs.sample-settings.LOGIN_REDIRECT_URL',
               'mtrack_project.rapidsms_cvs.sample-settings.TEST_RUNNER',
               'mtrack_project.rapidsms_cvs.sample-settings.MEDIA_URL',
               'mtrack_project.rapidsms_cvs.sample-settings.ADMIN_MEDIA_PREFIX',
               'mtrack_project.rapidsms_cvs.sample-settings.SITE_ID',
               'mtrack_project.rapidsms_cvs.sample-settings.LOG_LEVEL',
               'mtrack_project.rapidsms_cvs.sample-settings.LOG_FILE',
               'mtrack_project.rapidsms_cvs.sample-settings.LOG_FORMAT',
               'mtrack_project.rapidsms_cvs.sample-settings.LOG_SIZE',
               'mtrack_project.rapidsms_cvs.sample-settings.LOG_BACKUPS',
               'mtrack_project.rapidsms_cvs.sample-settings.TEMPLATE_CONTEXT_PROCESSORS',
               'mtrack_project.rapidsms_cvs.sample-settings.MIDDLEWARE_CLASSES',
               'mtrack_project.rapidsms_cvs.sample-settings.TEST_EXCLUDED_APPS',
               'mtrack_project.rapidsms_cvs.sample-settings.TEMPLATE_LOADERS',
               'mtrack_project.rapidsms_cvs.sample-settings.ROOT_URLCONF',
               'mtrack_project.rapidsms_cvs.sample-settings.MAP_KEY',
               'mtrack_project.rapidsms_cvs.sample-settings.db_name',
               'mtrack_project.rapidsms_cvs.cvs.utils.XFORMS',
               'mtrack_project.rapidsms_cvs.cvs.utils.GROUP_BY_WEEK',
               'mtrack_project.rapidsms_cvs.cvs.utils.GROUP_BY_MONTH',
               'mtrack_project.rapidsms_cvs.cvs.utils.GROUP_BY_DAY',
               'mtrack_project.rapidsms_cvs.cvs.utils.GROUP_BY_QUARTER',
               'mtrack_project.rapidsms_cvs.cvs.utils.GROUP_BY_SELECTS',
               'mtrack_project.rapidsms_cvs.cvs.reports.COLUMN_TITLE_DICT',
               'mtrack_project.rapidsms_cvs.cvs.urls.urlpatterns',
               'mtrack_project.rapidsms_cvs.cvs.forms.date_range_choices',
               'mtrack_project.rapidsms_cvs.cvs.forms.AREAS',
               'mtrack_project.rapidsms_cvs.cvs.settings.MAP_LAYERS',
               'mtrack_project.rapidsms_cvs.cvs.settings.MIN_LON',
               'mtrack_project.rapidsms_cvs.cvs.settings.MAX_LON',
               'mtrack_project.rapidsms_cvs.cvs.settings.MIN_LAT',
               'mtrack_project.rapidsms_cvs.cvs.settings.MAX_LAT',
               'mtrack_project.rapidsms_cvs.cvs.settings.MAP_KEY',
               'mtrack_project.rapidsms_cvs.cvs.settings.BASELAYER',
               'mtrack_project.rapidsms_cvs.cvs.views.map.TITLE_DICT',
               'project.urls.urlpatterns',
               'project.settings.TIME_ZONE',
               'project.settings.BASE_CSS',
               'project.settings.DATABASES',
               'project.settings.ROUTER_URL',
               'project.settings.INSTALLED_APPS',
               'project.settings.SMS_APPS',
               'project.settings.RAPIDSMS_TABS',
               'project.settings.DEBUG',
               'project.settings.TEMPLATE_DEBUG',
               'project.settings.LOGIN_REDIRECT_URL',
               'project.settings.TEST_RUNNER',
               'project.settings.MEDIA_URL',
               'project.settings.ADMIN_MEDIA_PREFIX',
               'project.settings.SITE_ID',
               'project.settings.LOG_LEVEL',
               'project.settings.LOG_FILE',
               'project.settings.LOG_FORMAT',
               'project.settings.LOG_SIZE',
               'project.settings.LOG_BACKUPS',
               'project.settings.TEMPLATE_CONTEXT_PROCESSORS',
               'project.settings.MIDDLEWARE_CLASSES',
               'project.settings.TEST_EXCLUDED_APPS',
               'project.settings.TEMPLATE_LOADERS',
               'project.settings.ROOT_URLCONF',
               'project.settings.MAP_KEY',
               'project.settings.db_name',
               'mtrack_project.rapidsms_cvs.cvs.templatetags.stats_extras.month_options',
               'mtrack_project.rapidsms_cvs.cvs.templatetags.stats_extras.register',
               'mtrack_project.rapidsms_cvs.cvs.templatetags.dict.register',
               'generic.urls.urlpatterns',
               'generic.reporting.views.GROUP_BY_WEEK',
               'generic.reporting.views.GROUP_BY_MONTH',
               'generic.reporting.views.GROUP_BY_DAY',
               'generic.reporting.views.GROUP_BY_QUARTER',
               'generic.templatetags.timeslider_tags.register',
               'generic.templatetags.reportdict.register',
               'auth.urls.urlpatterns',
               'mtrack_project.rapidsms_tracking.tracking.urls.urlpatterns',
               'mtrack_project.email_reports_src.email_reports.urls.urlpatterns',
               'mtrack_project.email_reports_src.email_reports.templatetags.report_tags.register',
               'mtrack_project.email_reports_src.email_reports.schedule.config.REPORTING_REPORT',
               'mtrack_project.email_reports_src.email_reports.schedule.config.AGGREGATE_REPORT',
               'mtrack_project.email_reports_src.email_reports.schedule.config.SCHEDULABLE_REPORTS',
               'mtrack_project.email_reports_src.email_reports.schedule.html2text.__version__',
               'mtrack_project.email_reports_src.email_reports.schedule.html2text.__author__',
               'mtrack_project.email_reports_src.email_reports.schedule.html2text.__copyright__',
               'mtrack_project.email_reports_src.email_reports.schedule.html2text.__contributors__',
               'mtrack_project.email_reports_src.email_reports.schedule.html2text.True',
               'mtrack_project.email_reports_src.email_reports.schedule.html2text.False',
               'mtrack_project.email_reports_src.email_reports.schedule.html2text.UNICODE_SNOB',
               'mtrack_project.email_reports_src.email_reports.schedule.html2text.LINKS_EACH_PARAGRAPH',
               'mtrack_project.email_reports_src.email_reports.schedule.html2text.BODY_WIDTH',
               'mtrack_project.email_reports_src.email_reports.schedule.html2text.SKIP_INTERNAL_LINKS',
               'mtrack_project.email_reports_src.email_reports.schedule.html2text.unifiable',
               'mtrack_project.email_reports_src.email_reports.schedule.html2text.unifiable_n',
               'mtrack_project.email_reports_src.email_reports.schedule.html2text.k',
               'mtrack_project.email_reports_src.email_reports.schedule.html2text.r_unescape',
               'mtrack_project.email_reports_src.email_reports.schedule.html2text.baseurl',
               'mtrack_project.email_reports_src.email_reports.schedule.html2text.arg',
               'mtrack_project.email_reports_src.email_reports.schedule.html2text.baseurl',
               'mtrack_project.email_reports_src.email_reports.schedule.html2text.j',
               'mtrack_project.email_reports_src.email_reports.schedule.html2text.enc',
               'mtrack_project.email_reports_src.email_reports.schedule.html2text.text',
               'mtrack_project.email_reports_src.email_reports.schedule.html2text.encoding',
               'mtrack_project.email_reports_src.email_reports.schedule.html2text.encoding',
               'mtrack_project.email_reports_src.email_reports.schedule.html2text.data',
               'mtrack_project.email_reports_src.email_reports.schedule.html2text.encoding',
               'mtrack_project.email_reports_src.email_reports.schedule.html2text.encoding',
               'mtrack_project.email_reports_src.email_reports.schedule.html2text.data',
               'mtrack_project.email_reports_src.email_reports.schedule.html2text.data',
               'mtrack_project.rapidsms_uganda_ussd.ussd.models.ussd_pre_transition',
               'mtrack_project.rapidsms_uganda_ussd.ussd.models.ussd_complete',
               'mtrack_project.rapidsms_uganda_ussd.ussd.urls.urlpatterns',
               'healthmodels.tests.__test__',
               'healthmodels.urls.urlpatterns',
               'healthmodels.templatetags.health_facility_tree.register',
               'uganda_common.utils.TIME_RANGES',
               'uganda_common.utils.GROUP_BY_WEEK',
               'uganda_common.utils.GROUP_BY_MONTH',
               'uganda_common.utils.GROUP_BY_DAY',
               'uganda_common.utils.GROUP_BY_QUARTER',
               'uganda_common.utils.months',
               'uganda_common.utils.quarters',
               'uganda_common.utils.GROUP_BY_SELECTS',
               'rapidsms_httprouter.__version__',
               'rapidsms_httprouter.router.outgoing_worker_threads',
               'rapidsms_httprouter.router.http_router',
               'rapidsms_httprouter.router.http_router_lock',
               'rapidsms_httprouter.models.mass_text_sent',
               'rapidsms_httprouter.models.DIRECTION_CHOICES',
               'rapidsms_httprouter.models.STATUS_CHOICES',
               'rapidsms_httprouter.urls.urlpatterns',
               'mtrack_project.rapidsms_alerts.alerts.urls.urlpatterns',
               'mtrack_project.rapidsms_alerts.alerts.templatetags.alerts_tags.register',
               'script.signals.script_progress',
               'script.signals.script_progress_pre_change',
               'script.signals.script_progress_was_completed',
               'script.management.commands.check_script_progress.logger',
               'script.management.commands.check_script_progress.handler',
               'script.management.commands.check_script_progress.formatter',
               'eav.VERSION',
               'eav.__version__',
               'conf.extensions',
               'conf.templates_path',
               'conf.source_suffix',
               'conf.master_doc',
               'conf.project',
               'conf.copyright',
               'conf.version',
               'conf.release',
               'conf.exclude_trees',
               'conf.pygments_style',
               'conf.html_theme',
               'conf.html_static_path',
               'conf.htmlhelp_basename',
               'conf.latex_documents',
               'conf.extensions',
               'conf.templates_path',
               'conf.source_suffix',
               'conf.master_doc',
               'conf.project',
               'conf.copyright',
               'conf.version',
               'conf.release',
               'conf.exclude_trees',
               'conf.pygments_style',
               'conf.html_theme',
               'conf.html_static_path',
               'conf.htmlhelp_basename',
               'conf.latex_documents',
               'poll.models.STARTSWITH_PATTERN_TEMPLATE',
               'poll.models.CONTAINS_PATTERN_TEMPLATE',
               'poll.models.YES_WORDS',
               'poll.models.NO_WORDS',
               'poll.urls.urlpatterns',
               'poll.management.site_table_created',
               'poll.management.models_created',
               'poll.templatetags.attr.register',
               'mtrack_project.rapidsms_logistics.logistics.reports.config',
               'mtrack_project.rapidsms_logistics.logistics.gviz_api.__author__',
               'mtrack_project.rapidsms_logistics.logistics.config.messagelog',
               'mtrack_project.rapidsms_logistics.logistics.config.HSA',
               'mtrack_project.rapidsms_logistics.logistics.util.config',
               'mtrack_project.rapidsms_logistics.logistics.models.Message',
               'mtrack_project.rapidsms_logistics.logistics.signals.stockout_resolved',
               'mtrack_project.rapidsms_logistics.logistics.settings.LOGISTICS_EMERGENCY_LEVEL_IN_MONTHS',
               'mtrack_project.rapidsms_logistics.logistics.settings.LOGISTICS_REORDER_LEVEL_IN_MONTHS',
               'mtrack_project.rapidsms_logistics.logistics.settings.LOGISTICS_MAXIMUM_LEVEL_IN_MONTHS',
               'mtrack_project.rapidsms_logistics.logistics.settings.LOGISTICS_DEFAULT_PRODUCT_ACTIVATION_STATUS',
               'mtrack_project.rapidsms_logistics.logistics.settings.LOGISTICS_AGGRESSIVE_SOH_PARSING',
               'mtrack_project.rapidsms_logistics.logistics.settings.LOGISTICS_GHANA_HACK_CREATE_SCHEDULES',
               'mtrack_project.rapidsms_logistics.logistics.settings.LOGISTICS_EXCEL_EXPORT_ENABLED',
               'mtrack_project.rapidsms_logistics.logistics.settings.LOGISTICS_MINIMUM_DAYS_TO_CALCULATE_CONSUMPTION',
               'mtrack_project.rapidsms_logistics.logistics.settings.LOGISTICS_USE_STATIC_EMERGENCY_LEVELS',
               'mtrack_project.rapidsms_logistics.logistics.settings.LOGISTICS_USE_AUTO_CONSUMPTION',
               'mtrack_project.rapidsms_logistics.logistics.settings.LOGISTICS_DAYS_UNTIL_LATE_PRODUCT_REPORT',
               'mtrack_project.rapidsms_logistics.logistics.settings.LOGISTICS_DAYS_UNTIL_DATA_UNAVAILABLE',
               'mtrack_project.rapidsms_logistics.logistics.settings.LOGISTICS_USE_AUTO_CONSUMPTION',
               'mtrack_project.rapidsms_logistics.logistics.urls.config.urlpatterns',
               'mtrack_project.rapidsms_logistics.logistics.urls.logistics.urlpatterns',
               'mtrack_project.rapidsms_logistics.logistics.templatetags.logistics_report_tags.Message',
               'mtrack_project.rapidsms_logistics.logistics.templatetags.logistics_report_tags.register',
               'mtrack_project.rapidsms_logistics.logistics.templatetags.logistics_extras.register',
               'mtrack_project.rapidsms_logistics.logistics.templatetags.logistics_tags.register',
               'mtrack_project.rapidsms_logistics.logistics.templatetags.nav_tags.register',
               'mtrack_project.rapidsms_logistics.logistics.templatetags.geonav_tags.register',
               'mtrack_project.rapidsms_logistics.logistics.templatetags.math_tags.register'],
 'FUNCTIONS': [('mtrack_project.static.uganda.config.has_permissions_to',
                ['contact', 'operation'],
                ''),
               ('mtrack_project.static.uganda.config.hsa_supply_point_type',
                [],
                '\n    The supply point type for HSAs\n    '),
               ('mtrack_project.static.uganda.config.hsa_location_type',
                [],
                '\n    The location type for HSAs\n    '),
               ('mtrack_project.rapidsms_mtrack.mtrack.utils.last_reporting_period',
                ['period=1'],
                '\n    Find a date range that spans from the most recent Wednesday (exactly a week ago if\n    today is Wednesday) to the beginning of Thursday, one week prior\n    \n    if period is specified, this wednesday can be exactly <period> weeks prior\n    '),
               ('mtrack_project.rapidsms_mtrack.mtrack.utils.total_facilities',
                ['location', 'count=True'],
                '\n    Find all health facilities whose catchment areas are somewhere inside\n    the passed in location.\n    \n    Return their count if count is True, otherwise return the queryset\n    '),
               ('mtrack_project.rapidsms_mtrack.mtrack.utils.get_facilites_for_view',
                ['request=None'],
                ''),
               ('mtrack_project.rapidsms_mtrack.mtrack.utils.total_vhts',
                ['location', 'count=True'],
                "\n    Find all vhts whose reporting_location's are somewhere inside\n    the passed in location.\n    \n    Return their count if count is True, otherwise return the queryset\n    "),
               ('mtrack_project.rapidsms_mtrack.mtrack.utils.get_staff_for_facility',
                ['facilities'],
                ''),
               ('mtrack_project.rapidsms_mtrack.mtrack.utils.get_latest_report',
                ['facility', 'keyword=None'],
                ''),
               ('mtrack_project.rapidsms_mtrack.mtrack.utils.get_last_reporting_date',
                ['facility'],
                ''),
               ('mtrack_project.rapidsms_mtrack.mtrack.utils.get_facility_reports',
                ['location', 'count=False', 'date_range=last_reporting_period()'],
                ''),
               ('mtrack_project.rapidsms_mtrack.mtrack.utils.get_all_facility_reports_for_view',
                ['request=None'],
                ''),
               ('mtrack_project.rapidsms_mtrack.mtrack.utils.get_facility_reports_for_view',
                ['request=None'],
                ''),
               ('mtrack_project.rapidsms_mtrack.mtrack.utils.reporting_facilities',
                ['location', 'facilities=None', 'count=True', 'date_range=None'],
                ''),
               ('mtrack_project.rapidsms_mtrack.mtrack.utils.total_registered_facilities',
                ['location'],
                ''),
               ('mtrack_project.rapidsms_mtrack.mtrack.utils.reporting_vhts', ['location'], ''),
               ('mtrack_project.rapidsms_mtrack.mtrack.utils.get_district_for_facility',
                ['hc'],
                ''),
               ('mtrack_project.rapidsms_mtrack.mtrack.utils.get_dashboard_messages',
                ['request=None'],
                ''),
               ('mtrack_project.rapidsms_mtrack.mtrack.utils.alerts_report',
                ['location', 'date_range', 'type=ALERTS_TOTAL'],
                ''),
               ('mtrack_project.rapidsms_mtrack.mtrack.models.parse_facility', ['value'], ''),
               ('mtrack_project.rapidsms_mtrack.mtrack.models.parse_district', ['value'], ''),
               ('mtrack_project.rapidsms_mtrack.mtrack.models.anonymous_autoreg',
                ['**kwargs'],
                '\n    Anonymous autoreg script\n    This method responds to a signal sent by the Script module on completion of the anonymous_autoreg script\n    '),
               ('mtrack_project.rapidsms_mtrack.mtrack.signals.xform_received_handler',
                ['sender', '**kwargs'],
                ''),
               ('mtrack_project.rapidsms_mtrack.mtrack.signals.update_supply_point_from_facility',
                ['sender', 'instance', '**kwargs'],
                ' \n    whenever a facility is updated, automatically update the supply point\n    '),
               ('mtrack_project.rapidsms_mtrack.mtrack.loader.mtrack_init', [], ''),
               ('mtrack_project.rapidsms_mtrack.mtrack.loader.mtrack_init_demo', [], ''),
               ('mtrack_project.rapidsms_mtrack.mtrack.loader.init_test_user', [], ''),
               ('mtrack_project.rapidsms_mtrack.mtrack.loader.init_admin', [], ''),
               ('mtrack_project.rapidsms_mtrack.mtrack.loader._init_facility_types', [], ''),
               ('mtrack_project.rapidsms_mtrack.mtrack.loader.init_test_facilities',
                ['log_to_console=False'],
                ''),
               ('mtrack_project.rapidsms_mtrack.mtrack.loader.add_supply_points_to_facilities',
                ['log_to_console=False'],
                ''),
               ('mtrack_project.rapidsms_mtrack.mtrack.loader.create_supply_point_from_facility',
                ['f'],
                ''),
               ('mtrack_project.rapidsms_mtrack.mtrack.loader.get_location_from_facility',
                ['facility'],
                " determine lowest common ancestor of all catchment areas \n    CAUTION: this location hierarchy is intended to match the reporting structure\n    used in rapidsms-cvs. Don't modify this without ensuring consistency with those reports. \n    "),
               ('mtrack_project.rapidsms_mtrack.mtrack.loader.init_dho_users', [], ''),
               ('mtrack_project.rapidsms_mtrack.mtrack.views.anonymousreports.delete_report',
                ['request', 'id'],
                ''),
               ('mtrack_project.rapidsms_mtrack.mtrack.views.anonymousreports.edit_report',
                ['req', 'id'],
                ''),
               ('mtrack_project.rapidsms_mtrack.mtrack.views.dashboard.admin', ['request'], ''),
               ('mtrack_project.rapidsms_mtrack.mtrack.views.dashboard.approve', ['request'], ''),
               ('mtrack_project.rapidsms_xforms_src.pavement.sdist',
                [],
                'Overrides sdist to make sure that our setup.py is generated.'),
               ('mtrack_project.rapidsms_xforms_src.rapidsms_xforms.models.create_binary',
                ['command', 'value', "filename='binary'"],
                "\n    Save the image to our filesystem, associating a new object to hold it's contents etc..\n    "),
               ('mtrack_project.rapidsms_xforms_src.rapidsms_xforms.models.create_geopoint',
                ['command', 'value'],
                '\n    Used by our arbitrary field saving / lookup.  This takes the command and the string value representing\n    a geolocation and return a Point location.\n    '),
               ('mtrack_project.rapidsms_xforms_src.rapidsms_xforms.models.point_to_dict',
                ['self'],
                ''),
               ('mtrack_project.rapidsms_xforms_src.rapidsms_xforms.models.dl_distance',
                ['s1', 's2'],
                '\n    Computes the Damerau-Levenshtein distance between two strings.  Not the fastest implementation\n    in the world, but works for our purposes.\n\n    Ripped from: http://www.guyrutenberg.com/2008/12/15/damerau-levenshtein-distance-in-python/\n    '),
               ('mtrack_project.rapidsms_xforms_src.rapidsms_xforms.models.import_from_string',
                ['kls'],
                '\n    Used below to load the class object dynamically by name\n    '),
               ('mtrack_project.rapidsms_xforms_src.rapidsms_xforms.models.can_user_use_form',
                ['user', 'xform'],
                '\n    Default permission picker for forms.  Logic is this:\n       1) if the form is not restricted, return True\n       2) if the form is restricted and there is no user, return False\n       3) otherwise return if the user is part of the any of the groups the form is restricted to\n    '),
               ('mtrack_project.rapidsms_xforms_src.rapidsms_xforms.models.lookup_user_by_connection',
                ['connection'],
                '\n    Tries to look up a Django user by looking for a matching Connection object in\n    the Django Profile object set in settings.py.\n\n    The recommended method of doing that is using the rapidsms-auth library:\n        https://github.com/unicefuganda/rapidsms-auth\n\n    Though any Profile object which is a foreign key to Connection will work.\n       (ie has a connection_set queryable field)\n    '),
               ('mtrack_project.rapidsms_xforms_src.rapidsms_xforms.models.profile_connection_lookup',
                ['connection'],
                "\n    Default implementation for the XFORMS_USER_LOOKUP hook.  This looks for a Profile\n    model that has a 'lookup_by_connection' method to do the lookups.\n    "),
               ('mtrack_project.rapidsms_xforms_src.rapidsms_xforms.views.submissions_as_csv',
                ['req', 'pk'],
                ''),
               ('mtrack_project.rapidsms_xforms_src.rapidsms_xforms.views.odk_list_forms',
                ['req'],
                ''),
               ('mtrack_project.rapidsms_xforms_src.rapidsms_xforms.views.odk_get_form',
                ['req', 'pk'],
                ''),
               ('mtrack_project.rapidsms_xforms_src.rapidsms_xforms.views.odk_submission',
                ['req'],
                ''),
               ('mtrack_project.rapidsms_xforms_src.rapidsms_xforms.views.xforms', ['req'], ''),
               ('mtrack_project.rapidsms_xforms_src.rapidsms_xforms.views.XFormForm',
                ['*args', '**kwargs'],
                ''),
               ('mtrack_project.rapidsms_xforms_src.rapidsms_xforms.views.new_xform',
                ['req'],
                ''),
               ('mtrack_project.rapidsms_xforms_src.rapidsms_xforms.views.view_form',
                ['req', 'form_id'],
                ''),
               ('mtrack_project.rapidsms_xforms_src.rapidsms_xforms.views.view_form_details',
                ['req', 'form_id'],
                ''),
               ('mtrack_project.rapidsms_xforms_src.rapidsms_xforms.views.edit_form',
                ['req', 'form_id'],
                ''),
               ('mtrack_project.rapidsms_xforms_src.rapidsms_xforms.views.order_xform',
                ['req', 'form_id'],
                ''),
               ('mtrack_project.rapidsms_xforms_src.rapidsms_xforms.views.add_field',
                ['req', 'form_id'],
                ''),
               ('mtrack_project.rapidsms_xforms_src.rapidsms_xforms.views.view_submissions',
                ['req', 'form_id'],
                ''),
               ('mtrack_project.rapidsms_xforms_src.rapidsms_xforms.views.make_submission_form',
                ['xform'],
                ''),
               ('mtrack_project.rapidsms_xforms_src.rapidsms_xforms.views.edit_submission',
                ['req', 'submission_id'],
                ''),
               ('mtrack_project.rapidsms_xforms_src.rapidsms_xforms.views.view_field',
                ['req', 'form_id', 'field_id'],
                ''),
               ('mtrack_project.rapidsms_xforms_src.rapidsms_xforms.views.edit_field',
                ['req', 'form_id', 'field_id'],
                ''),
               ('mtrack_project.rapidsms_xforms_src.rapidsms_xforms.views.delete_xform',
                ['req', 'form_id'],
                ''),
               ('mtrack_project.rapidsms_xforms_src.rapidsms_xforms.views.delete_field',
                ['req', 'form_id', 'field_id'],
                ''),
               ('mtrack_project.rapidsms_xforms_src.rapidsms_xforms.views.add_constraint',
                ['req', 'form_id', 'field_id'],
                ''),
               ('mtrack_project.rapidsms_xforms_src.rapidsms_xforms.views.edit_constraint',
                ['req', 'form_id', 'field_id', 'constraint_id'],
                ''),
               ('mtrack_project.rapidsms_xforms_src.rapidsms_xforms.views.view_constraint',
                ['req', 'form_id', 'field_id', 'constraint_id'],
                ''),
               ('mtrack_project.rapidsms_xforms_src.rapidsms_xforms.views.view_constraints',
                ['req', 'form_id', 'field_id'],
                ''),
               ('mtrack_project.rapidsms_xforms_src.rapidsms_xforms.views.delete_constraint',
                ['req', 'form_id', 'field_id', 'constraint_id'],
                ''),
               ('mtrack_project.rapidsms_xforms_src.rapidsms_xforms.views.order_constraints',
                ['req', 'form_id', 'field_id'],
                ''),
               ('mtrack_project.rapidsms_xforms_src.rapidsms_xforms.templatetags.dumper.mark_safe',
                ['x'],
                ''),
               ('mtrack_project.rapidsms_xforms_src.rapidsms_xforms.templatetags.dumper.rawdump',
                ['x'],
                ''),
               ('mtrack_project.rapidsms_xforms_src.rapidsms_xforms.templatetags.dumper.dump',
                ['x'],
                ''),
               ('mtrack_project.rapidsms_xforms_src.rapidsms_xforms.templatetags.prop.prop',
                ['input', 'property'],
                ''),
               ('mtrack_project.rapidsms_xforms_src.rapidsms_xforms.templatetags.messages.multiply',
                ['input', 'property'],
                "\n    Just multiplies two values together.  Surprisingly this isn't possible in normal templates.\n    "),
               ('mtrack_project.rapidsms_xforms_src.rapidsms_xforms.templatetags.messages.in_base_36',
                ['number'],
                ''),
               ('mtrack_project.rapidsms_xforms_src.rapidsms_xforms.templatetags.messages.codify',
                ['input', 'property=None'],
                '\n    Turns a numerical id into something slightly more impressive.  Specifically a 4 letter\n    base 36 item with an optional prefix, zero padded.  This will work up to about 1.5M\n    entries, at which point it will start skipping to six letters instead up to ~2B, then\n    just echo the raw value in base 36.\n\n    IE, if you pass in 3688, this will return 00A8.  If you pass in a prefix of S, then\n    the value will be S00A8.\n    '),
               ('mtrack_project.rapidsms_xforms_src.rapidsms_xforms.templatetags.forms.render_layout',
                ['form'],
                ''),
               ('contact.utils.get_messages', ['**kwargs'], ''),
               ('contact.utils.get_mass_messages', ['**kwargs'], ''),
               ('contact.views.add_contact', ['request'], ''),
               ('contact.views.new_contact', ['request'], ''),
               ('contact.views.view_message_history',
                ['request', 'connection_id'],
                '\n        This view lists all (sms message) correspondence between \n        RapidSMS and a User \n        \n    '),
               ('contact.templatetags.extra_tags.flags', ['msg'], ''),
               ('rapidsms.utils.empty_str',
                ['in_str'],
                "\n    Simple helper to return True if the passed\n    string reference is None or '' or all whitespace\n\n    "),
               ('rapidsms.utils.to_naive_utc_dt',
                ['dt'],
                '\n    Converts a datetime to a naive datetime (no tzinfo) \n    as follows:\n\n    if inbound dt is already naive, it just returns it\n    \n    if inbound is timezone aware, converts it to UTC,\n    then strips the tzinfo\n\n    '),
               ('rapidsms.utils.to_aware_utc_dt',
                ['dt'],
                "\n    Convert an inbound datetime into a timezone\n    aware datetime in UTC as follows:\n\n    if inbound is naive, uses 'tzinfo.localize' to\n    add utc tzinfo. NOTE: Timevalues are not changed,\n    only difference in tzinfo is added to identify this\n    as a UTC tz aware object.\n\n    if inbound is aware, uses 'datetime.astimezone'\n    to convert timevalues to UTC and set tzinfo to\n    utc.\n\n    "),
               ('rapidsms.utils.timedelta_as_minutes',
                ['td'],
                '\n    Returns the value of the entire timedelta as\n    integer minutes, rounded down\n    \n    '),
               ('rapidsms.utils.timedelta_as_seconds',
                ['td'],
                '\n    Returns the value of the entire timedelta as\n    integer seconds, rounded down\n    \n    '),
               ('rapidsms.models._find_extensions', ['app_label', 'model_name'], ''),
               ('rapidsms.views.dashboard', ['req'], ''),
               ('rapidsms.views.login', ['req', "template_name='rapidsms/login.html'"], ''),
               ('rapidsms.views.logout', ['req', "template_name='rapidsms/loggedout.html'"], ''),
               ('rapidsms.utils.pagination.paginated',
                ['req',
                 'query_set',
                 'per_page=None',
                 'default_page=1',
                 "prefix=''",
                 'wrapper=None'],
                ''),
               ('rapidsms.utils.modules.try_import',
                ['module_name'],
                '\n    Import and return *module_name*.\n\n    >>> try_import("csv") # doctest: +ELLIPSIS\n    <module \'csv\' from \'...\'>\n\n    Unlike the standard try/except approach to optional imports, inspect\n    the stack to avoid catching ImportErrors raised from **within** the\n    module. Only return None if *module_name* itself cannot be imported.\n\n    >>> try_import("spam.spam.spam") is None\n    True\n    '),
               ('rapidsms.utils.modules.find_python_files',
                ['path'],
                '\n    Return a list of the Python files (*.py) in a directory. Note that\n    the existance of a Python source file does not guarantee that it is\n    a valid module, because the directory (or any number of its parents)\n    may not contain an __init__.py, rendering it a non-module.\n\n    For example, to list the Python files in the \'encodings\' package,\n    (which is always available, as part of the stdlib):\n\n    >>> import encodings\n    ... monkeys\n\n    >>> p = encodings.__path__[0]\n    >>> find_python_files(p) # doctest: +ELLIPSIS\n    [\'aliases\', \'ascii\', \'base64_codec\', \'big5\', ...]\n\n    This seems a bit of an oversimplification, given that Python modules\n    can live inside eggs and zips and the such, but if it\'s good enough\n    for django.core.management.find_commands, it\'s good enough for me.\n\n    Return an empty list if the directory doesn\'t exist, couldn\'t be\n    iterated, or contains no relevant files.\n\n    >>> find_python_files("doesnt-exist")\n    []\n    '),
               ('rapidsms.utils.modules.get_classes',
                ['module', 'superclass=None'],
                '\n    Return a list of new-style classes defined in *module*, excluding\n    _private and __magic__ names, and optionally filtering only those\n    inheriting from *superclass*. Note that both arguments are actual\n    modules, not names.\n\n    This method only returns classes that were defined in *module*.\n    Those imported from elsewhere are ignored.\n    '),
               ('rapidsms.utils.modules.get_class',
                ['module', 'superclass=None'],
                '\n    Return the lone class contained by *module*, or raise a descriptive\n    AttributeError if *module* contains zero or more than one class.\n    This is useful when expecting a single class from a module without\n    knowing its name, to avoid the usual constantly-named object in a\n    module (eg. App, Backend, Command, Handler).\n    '),
               ('rapidsms.utils.modules.get_package_path',
                ['package_name'],
                '\n    Import *package_name*, and return its absolute path.\n\n    >>> get_package_path("encodings") # doctest: +ELLIPSIS\n    \'/.../python.../encodings\'\n\n    Raise AttributeError if *package_name* is a module (*.py).\n\n    >>> get_package_path("csv")\n    Traceback (most recent call last):\n    ...\n    AttributeError: \'csv\' is not a package\n    '),
               ('rapidsms.utils.web_message.web_message', ['req', 'msg', 'link=None'], ''),
               ('rapidsms.backends.email.is_plaintext',
                ['email_message'],
                'Whether a message is plaintext'),
               ('rapidsms.backends.email.is_text',
                ['email_message'],
                'Whether a message is text'),
               ('rapidsms.backends.email.get_message_body',
                ['email_message'],
                'Walk through the message parts, taking the first text/plain.\n       if no text/plain (is this allowed?) will return the first\n       text/html'),
               ('rapidsms.contrib.handlers.utils.get_handlers',
                [],
                '\n    Return a list of the handlers installed in the current project. This\n    defaults to **all** of the handlers defined in the current project,\n    but can be explicitly specified by the ``INSTALLED_HANDLERS`` and\n    ``EXCLUDED_HANDLERS`` settings. (Both lists of module prefixes.)\n    '),
               ('rapidsms.contrib.handlers.utils._find_handlers',
                ['app_names'],
                '\n    Return a list of all handlers defined in ``app_names``.\n    '),
               ('rapidsms.contrib.handlers.utils._apps',
                [],
                '\n    Return a list of the apps which may contain handlers. This is not\n    quite as simple as returning ``settings.INSTALLED_APPS``, since:\n\n    1. This app (rapidsms.contrib.handlers) should be excluded, because\n       although it contains handlers, they are intended to be abstract,\n       not instantiated directly. (I think this is cleaner than marking\n       them explicitly.)\n\n    2. Django contrib apps should be excluded, because the "auth" app\n       has an unrelated "handlers" module. (If I\'d noticed that when I\n       created this app, I may have named it differently. Sorry.)\n    \n    3. If any other app defines a "handlers" module, it can be added \n       to settings.RAPIDSMS_HANDLERS_EXCLUDE_APPS to not be loaded\n    '),
               ('rapidsms.contrib.handlers.utils._handlers',
                ['module_name'],
                "\n    Return a list of handlers (subclasses of app.handlers.HandlerBase)\n    defined in the ``handlers`` directory of ``module_name``. Each\n    Python file is expected to contain a single new-style class, which\n    can be named arbitrarily. (But probably shouldn't be.)\n\n    Return an empty list if no handlers are defined, or the directory\n    can't be opened. All exceptions raised while importing handlers are\n    allowed to propagate, to avoid masking errors.\n    "),
               ('rapidsms.contrib.handlers.tests.test_get_handlers', [], ''),
               ('rapidsms.contrib.messagelog.views.message_log', ['req'], ''),
               ('rapidsms.contrib.httptester.views._redirect', ['identity'], ''),
               ('rapidsms.contrib.httptester.views.generate_identity', ['req'], ''),
               ('rapidsms.contrib.httptester.views.message_tester', ['req', 'identity'], ''),
               ('rapidsms.contrib.registration.tables._edit_link', ['cell'], ''),
               ('rapidsms.contrib.registration.tables._any_identity', ['cell'], ''),
               ('rapidsms.contrib.registration.views.registration', ['req', 'pk=None'], ''),
               ('rapidsms.contrib.locations.utils.get_model', ['name'], '\n    '),
               ('rapidsms.contrib.locations.utils.form_for_model',
                ['model'],
                '\n    Return the Form which should be used to add/edit ``model`` in the\n    WebUI, by importing the class named ``"%sForm" % model.__name__``\n    from the sibling ``forms`` module. For example::\n\n        app1.models.Alpha     -> myapp.forms.SchoolForm\n        app2.models.beta.Beta -> app2.forms.beta.BetaForm\n\n    If no such form is defined, an appropriately-patched copy of the\n    rapidsms.contrib.locations.forms.LocationForm form is returned.\n    '),
               ('rapidsms.contrib.locations.views._breadcrumbs',
                ['location=None', "first_caption='Planet Earth'"],
                '\n    Return the breadcrumb trail leading to ``location``. To avoid the\n    trail being empty when browsing the entire world, the caption of the\n    first crumb is hard coded.\n    '),
               ('rapidsms.contrib.locations.views.locations', ['req', 'location_uid=None'], ''),
               ('rapidsms.contrib.export.views.database',
                ['req'],
                '\n    Return a SQL dump of the current database, by reading the settings\n    from settings.py, and calling the relevant dump program. Currently,\n    only mySQL and SQLite3 are supported.\n    '),
               ('rapidsms.contrib.scheduler.models.set_weekly_event',
                ['callback', 'day', 'hour', 'minute', 'callback_args'],
                ''),
               ('rapidsms.contrib.scheduler.models.set_daily_event',
                ['callback', 'hour', 'minute', 'callback_args'],
                ''),
               ('rapidsms.contrib.scheduler.models.check_bounds',
                ['name', 'time_set', 'min', 'max'],
                ''),
               ('rapidsms.contrib.scheduler.views.index',
                ['request', "template='scheduler/index.html'"],
                ''),
               ('rapidsms.contrib.scheduler.views.edit',
                ['request', 'pk', "template='scheduler/edit.html'"],
                ''),
               ('rapidsms.contrib.scheduler.views.test_schedule', ['request', 'schedule_pk'], ''),
               ('rapidsms.contrib.scheduler.forms._string_to_array', ['string'], ''),
               ('rapidsms.contrib.scheduler.forms._string_to_set', ['string'], ''),
               ('rapidsms.contrib.scheduler.forms._string_to_dictionary', ['string'], ''),
               ('rapidsms.contrib.scheduler.templatetags.scheduler_tags.display_list',
                ['list_'],
                'display a list'),
               ('rapidsms.contrib.scheduler.tests.speedup.callback_func', ['router', 'arg'], ''),
               ('rapidsms.contrib.scheduler.tests.slow.callback_func', ['router', 'arg'], ''),
               ('rapidsms.contrib.ajax.utils.call_router',
                ['app', 'action', '**kwargs'],
                '\n    TODO: docs\n    '),
               ('rapidsms.contrib.ajax.utils.request',
                ['path', 'get=None', 'post=None', 'encoding=None'],
                '\n    Send an HTTP request to the RapidSMS router, via the AJAX app (which\n    must be running for this to work), and return a tuple containing the\n    returned HTTP status, content-type, and body.\n    '),
               ('rapidsms.contrib.ajax.views.proxy', ['req', 'path'], ''),
               ('rapidsms.contrib.messaging.utils.send_message',
                ['connection', 'text'],
                '\n    Send a message from the webui process to the router process,\n    via the ajax app.\n    '),
               ('rapidsms.contrib.messaging.filters.builtins', [], ''),
               ('rapidsms.contrib.messaging.filters.register',
                ['callback'],
                '\n    title=country, district, group, role, etc\n    callback=called during render to return an iterable\n    '),
               ('rapidsms.contrib.messaging.filters.fetch', [], '\n    '),
               ('rapidsms.contrib.messaging.views.messaging', ['req'], ''),
               ('rapidsms.contrib.messaging.views.send', ['req'], ''),
               ('rapidsms.templatetags.tabs_tags.get_tabs',
                ['parser', 'token'],
                '\n    Retrive a list of the tabs for this project, and store them in a\n    named context variable. Returns nothing, via `ContextUpdatingNode`.\n\n    Syntax::\n        {% get_tabs as [varname] %}\n\n    Example::\n        {% get_tabs as tabs %}\n    '),
               ('rapidsms.templatetags.forms_tags.render_form', ['form'], ''),
               ('rapidsms.templatetags.region_tags.region',
                ['parser', 'token'],
                '\n    TODO: docs\n    '),
               ('rapidsms.templatetags.paginator_tags.paginator', ['objects'], ''),
               ('rapidsms.templatetags.paginator_tags._self_link', ['req', '**kwargs'], ''),
               ('rapidsms.tests.test_views.test_login', [], ''),
               ('rapidsms.tests.test_logger.test_logger_mixin', [], ''),
               ('rapidsms.tests.test_logger.test_logger_raises_on_invalid_name_type', [], ''),
               ('rapidsms.tests.test_router.test_router_finds_apps', [], ''),
               ('rapidsms.tests.test_router.test_router_returns_none_on_invalid_apps', [], ''),
               ('rapidsms.tests.test_router.test_router_raises_on_uninstalled_apps', [], ''),
               ('rapidsms.tests.test_router.test_router_starts_and_stops_apps_and_backends',
                [],
                ''),
               ('rapidsms.tests.test_router.test_router_finds_backends', [], ''),
               ('rapidsms.tests.test_router.test_router_downcases_backend_configs', [], ''),
               ('rapidsms.tests.test_app_base.test_app_exposes_router', [], ''),
               ('rapidsms.tests.test_app_base.test_app_has_name', [], ''),
               ('rapidsms.tests.test_app_base.test_app_finds_valid_app_classes', [], ''),
               ('rapidsms.tests.test_app_base.test_app_ignores_invalid_modules', [], ''),
               ('rapidsms.tests.backend.test_bucket.test_bucket_swallows_messages', [], ''),
               ('rapidsms.tests.backend.test_http.test_handle_good_request',
                [],
                ' handle_request must return a HttpResponse '),
               ('rapidsms.tests.backend.test_http.test_handle_bad_request',
                [],
                ' handle_request must return a HttpResponse '),
               ('rapidsms.tests.backend.test_http.test_config',
                [],
                ' Allow custom configuration '),
               ('rapidsms.tests.backend.test_http.test_bad_config',
                [],
                ' Test bad configuration '),
               ('rapidsms.tests.backend.test_http.test_extra_config',
                [],
                ' Allow custom configuration '),
               ('rapidsms.tests.backend.test_base.test_backend_has_name', [], ''),
               ('rapidsms.tests.backend.test_base.test_backend_has_model', [], ''),
               ('rapidsms.tests.backend.test_base.test_backend_creates_connections', [], ''),
               ('rapidsms.tests.backend.test_base.test_backend_passes_kwargs_to_configure',
                [],
                ''),
               ('rapidsms.tests.backend.test_base.test_backend_routes_messages', [], ''),
               ('rapidsms.tests.backend.test_base.test_backend_finds_valid_backend_classes',
                [],
                ''),
               ('rapidsms.tests.backend.test_base.test_backend_can_be_started_and_stopped',
                [],
                ''),
               ('mtrack_project.rapidsms_cvs.cvs.utils.active_reporters',
                ['start_date',
                 'end_date',
                 'location',
                 "roles=['VHT', 'PVHT']",
                 'group_by_timespan=None',
                 'period=0'],
                ' get all active reporters  '),
               ('mtrack_project.rapidsms_cvs.cvs.utils.registered_reporters',
                ['location', "roles=['VHT', 'PVHT']"],
                ''),
               ('mtrack_project.rapidsms_cvs.cvs.utils.total_submissions_by_facility',
                ['keyword', 'start_date', 'end_date', 'map_window'],
                ''),
               ('mtrack_project.rapidsms_cvs.cvs.utils.total_attribute_by_facility',
                ['attribute_slug', 'start_date', 'end_date', 'map_window'],
                ''),
               ('mtrack_project.rapidsms_cvs.cvs.utils.get_area', ['request'], ''),
               ('mtrack_project.rapidsms_cvs.cvs.utils.get_reporters', ['**kwargs'], ''),
               ('mtrack_project.rapidsms_cvs.cvs.utils.get_unsolicited_messages',
                ['**kwargs'],
                ''),
               ('mtrack_project.rapidsms_cvs.cvs.utils.get_all_messages',
                ['**kwargs'],
                '\n    Get all messages that are direct responses to polls (not related to the anonymous hotline)\n    '),
               ('mtrack_project.rapidsms_cvs.cvs.utils.get_mass_messages', ['**kwargs'], ''),
               ('mtrack_project.rapidsms_cvs.cvs.utils.monthly_reports', [], ''),
               ('mtrack_project.rapidsms_cvs.cvs.utils.get_training_messages', ['request'], ''),
               ('mtrack_project.rapidsms_cvs.cvs.utils.get_training_vhts', ['request'], ''),
               ('mtrack_project.rapidsms_cvs.cvs.utils.get_nolocation_vhts', ['request'], ''),
               ('mtrack_project.rapidsms_cvs.cvs.utils.get_dashboard_messages',
                ['request=None'],
                ''),
               ('mtrack_project.rapidsms_cvs.cvs.models.parse_timedelta',
                ['command', 'value'],
                ''),
               ('mtrack_project.rapidsms_cvs.cvs.models.parse_place', ['command', 'value'], ''),
               ('mtrack_project.rapidsms_cvs.cvs.models.parse_gender', ['command', 'value'], ''),
               ('mtrack_project.rapidsms_cvs.cvs.models.parse_muacreading',
                ['command', 'value'],
                ''),
               ('mtrack_project.rapidsms_cvs.cvs.models.parse_oedema', ['command', 'value'], ''),
               ('mtrack_project.rapidsms_cvs.cvs.models.parse_fuzzy_number',
                ['command', 'value'],
                ''),
               ('mtrack_project.rapidsms_cvs.cvs.models.parse_facility_value', ['value'], ''),
               ('mtrack_project.rapidsms_cvs.cvs.models.parse_facility',
                ['command', 'value'],
                ''),
               ('mtrack_project.rapidsms_cvs.cvs.models.split_name', ['patient_name'], ''),
               ('mtrack_project.rapidsms_cvs.cvs.models.get_or_create_patient',
                ['health_provider',
                 'patient_name',
                 'birthdate=None',
                 'deathdate=None',
                 'gender=None'],
                ''),
               ('mtrack_project.rapidsms_cvs.cvs.models.generate_tracking_tag',
                ["start='2a2'",
                 "base_numbers='2345679'",
                 "base_letters='acdefghjklmnprtuvwxy'",
                 '**kwargs'],
                "\n        Generate a unique tag. The format is xyz[...] with x, y and z picked\n        from an iterable giving a new set of ordered caracters at each\n        call to next. You must pass the previous tag and a patter the tag\n        should validate against.\n\n        This is espacially usefull to get a unique tag to display on mobile\n        device so you can exclude figures and letters that could be \n        confusing or hard to type.\n\n        Default values are empirically proven to be easy to read and type\n        on old phones.\n\n        The code format alternate a char from base_number and base_letters,\n        be sure the 'start' argument follows this convention or you'll\n        get a ValueError.\n\n        e.g:\n\n        >>> generate_tracking_tag()\n        '3a2'\n        >>> generate_tracking_tag('3a2')\n        '4a2'\n        >>> generate_tracking_tag('9y9')\n        '2a2a'\n        >>> generate_tracking_tag('2a2a')\n        '3a2a'\n        >>> generate_tracking_tag('9a2a')\n        '2c2a'\n\n    "),
               ('mtrack_project.rapidsms_cvs.cvs.models.create_patient',
                ['health_provider', 'patient_name', 'birthdate', 'deathdate', 'gender'],
                ''),
               ('mtrack_project.rapidsms_cvs.cvs.models.check_validity',
                ['xform_type', 'submission', 'health_provider', 'patient', 'day_range'],
                ''),
               ('mtrack_project.rapidsms_cvs.cvs.models.check_basic_validity',
                ['xform_type', 'submission', 'health_provider', 'day_range'],
                ''),
               ('mtrack_project.rapidsms_cvs.cvs.models.patient_label', ['patient'], ''),
               ('mtrack_project.rapidsms_cvs.cvs.models.fix_location',
                ['sender', '**kwargs'],
                ''),
               ('mtrack_project.rapidsms_cvs.cvs.models.xform_received_handler',
                ['sender', '**kwargs'],
                ''),
               ('mtrack_project.rapidsms_cvs.cvs.models.cvs_autoreg',
                ['**kwargs'],
                ' \n    CVS autoreg post registration particulars handling. \n    This method responds to a signal sent by the Script module on completion of the cvs_autoreg script\n    '),
               ('mtrack_project.rapidsms_cvs.cvs.models.ussd_jump_diseases',
                ['sender', '**kwargs'],
                ''),
               ('mtrack_project.rapidsms_cvs.cvs.models.ussd_reg', ['sender', '**kwargs'], ''),
               ('mtrack_project.rapidsms_cvs.cvs.views.basic.index', ['request'], ''),
               ('mtrack_project.rapidsms_cvs.cvs.views.basic.view_submissions',
                ['req', 'form_id'],
                ''),
               ('mtrack_project.rapidsms_cvs.cvs.views.map.map_other_api',
                ['request', 'start_date', 'end_date'],
                ''),
               ('mtrack_project.rapidsms_cvs.cvs.views.map.map_api',
                ['request', 'start_date', 'end_date', 'xform_keyword', 'attribute_keyword=None'],
                ''),
               ('mtrack_project.rapidsms_cvs.cvs.views.map.health_facility_api', ['request'], ''),
               ('mtrack_project.rapidsms_cvs.cvs.views.facilities.deleteFacility',
                ['request', 'facility_pk'],
                ''),
               ('mtrack_project.rapidsms_cvs.cvs.views.facilities.editFacility',
                ['request', 'facility_pk'],
                ''),
               ('mtrack_project.rapidsms_cvs.cvs.views.facilities.editFacilityLocations',
                ['request', 'facility_pk', 'district_pk'],
                ''),
               ('mtrack_project.rapidsms_cvs.cvs.views.reporters.deleteReporter',
                ['request', 'reporter_pk'],
                ''),
               ('mtrack_project.rapidsms_cvs.cvs.views.reporters.editReporter',
                ['request', 'reporter_pk'],
                ''),
               ('mtrack_project.rapidsms_cvs.cvs.views.reporters.editReporterLocations',
                ['request', 'reporter_pk', 'district_pk=None'],
                ''),
               ('mtrack_project.rapidsms_cvs.cvs.views.reporters.editReporterFacilities',
                ['request', 'reporter_pk', 'district_pk=None'],
                ''),
               ('mtrack_project.rapidsms_cvs.cvs.views.dates.get_expected_epi',
                ['location', 'request'],
                ''),
               ('mtrack_project.rapidsms_cvs.cvs.views.stats.get_district',
                ['lst', 'lft', 'rght'],
                "get a district name give a location's rght and lft"),
               ('mtrack_project.rapidsms_cvs.cvs.views.stats.export_as_excel', ['request'], ''),
               ('mtrack_project.rapidsms_cvs.cvs.templatetags.stats_extras.get_section',
                ['path'],
                ''),
               ('mtrack_project.rapidsms_cvs.cvs.templatetags.stats_extras.get_parent',
                ['location_id'],
                ''),
               ('mtrack_project.rapidsms_cvs.cvs.templatetags.stats_extras.get_parentId',
                ['location_id'],
                ''),
               ('mtrack_project.rapidsms_cvs.cvs.templatetags.stats_extras.get_ancestors',
                ['location_id'],
                ''),
               ('mtrack_project.rapidsms_cvs.cvs.templatetags.stats_extras.get_district',
                ['location'],
                ''),
               ('mtrack_project.rapidsms_cvs.cvs.templatetags.stats_extras.get_facility_district',
                ['hc'],
                ''),
               ('mtrack_project.rapidsms_cvs.cvs.templatetags.stats_extras.join_date',
                ['connection'],
                ''),
               ('mtrack_project.rapidsms_cvs.cvs.templatetags.stats_extras.name',
                ['location'],
                ''),
               ('mtrack_project.rapidsms_cvs.cvs.templatetags.stats_extras.latest', ['obj'], ''),
               ('mtrack_project.rapidsms_cvs.cvs.templatetags.stats_extras.facility_latest',
                ['obj'],
                ''),
               ('mtrack_project.rapidsms_cvs.cvs.templatetags.stats_extras.facility_reports',
                ['obj'],
                ''),
               ('mtrack_project.rapidsms_cvs.cvs.templatetags.stats_extras.hash',
                ['h', 'key'],
                ''),
               ('mtrack_project.rapidsms_cvs.cvs.templatetags.stats_extras.do_date_range',
                ['parser', 'token'],
                '\n\treturns dateranges grouped by month and by week\n\n\t'),
               ('mtrack_project.rapidsms_cvs.cvs.templatetags.dict.dict',
                ['input', 'property'],
                ''),
               ('mtrack_project.rapidsms_cvs.cvs.templatetags.dict.items_sorted', ['input'], ''),
               ('mtrack_project.rapidsms_cvs.cvs.templatetags.dict.close_bracket',
                ['data', 'time'],
                ''),
               ('mtrack_project.rapidsms_cvs.cvs.tests.util.fake_incoming',
                ['message', 'connection=None'],
                ''),
               ('generic.utils.copy_dashboard', ['from_dashboard', 'to_dashboard'], ''),
               ('generic.utils.get_dates', ['request'], ''),
               ('generic.utils.set_default_dates', ['dates', 'request', 'context'], ''),
               ('generic.utils.flatten_list',
                ['report_dict'],
                "\n        Rearrange a dictionary of dictionaries:\n            { 'apple':{'a':1,'b':2,'c':3},\n              'orange':{'d':4,'e':5,'f':6} }\n              \n        Into a list of dictionaries:\n           [{'key':'apple','a':1,'b':2,'c':3},{'key':'orange','d':4,'e':5,'f':6}]\n    "),
               ('generic.context_processors.map_params',
                ['request'],
                '\n    a context processor that passes all the pertinent map parameters to all templates.\n    '),
               ('generic.sorters.simple_comparator', ['column', 'item1', 'item2'], ''),
               ('generic.views.generic_row',
                ['request',
                 'model=None',
                 'pk=None',
                 "partial_row='generic/partials/partial_row.html'",
                 'selectable=True'],
                ''),
               ('generic.views.generic',
                ['request',
                 'model=None',
                 'queryset=None',
                 "template_object_name='object_list'",
                 "base_template='generic/base.html'",
                 "partial_base='generic/partials/partial_base.html'",
                 "partial_header='generic/partials/partial_header.html'",
                 "partial_row='generic/partials/partial_row.html'",
                 "paginator_template='generic/partials/pagination.html'",
                 "results_title='Results'",
                 'paginated=True',
                 'selectable=True',
                 'objects_per_page=25',
                 "columns=[('object', False, '')]",
                 "sort_column=''",
                 'sort_ascending=True',
                 'filter_forms=[]',
                 'action_forms=[]',
                 'needs_date=False',
                 'dates=get_dates',
                 '**kwargs'],
                ''),
               ('generic.views.generic_dashboard',
                ['request',
                 'slug',
                 'module_types=[]',
                 "base_template='generic/dashboard_base.html'",
                 "module_header_partial_template='generic/partials/module_header.html'",
                 "module_partial_template='generic/partials/module.html'",
                 "title='Dashboard'",
                 'num_columns=2',
                 '**kwargs'],
                ''),
               ('generic.views.generic_map',
                ['request',
                 "base_template='generic/map_base.html'",
                 'map_layers=[]',
                 'dates=get_dates',
                 'display_autoload=True'],
                ''),
               ('generic.views.static_module', ['request', 'content_id'], ''),
               ('generic.templatetags.timeslider_tags.to_date',
                ['timestamp'],
                '\n    Turns a timestamp (milliseconds since 1970) into a\n    python Date object\n    '),
               ('generic.templatetags.timeslider_tags.year',
                ['date'],
                "\n    Gets the year (integer) from a date object.\n    Necessary to pipe through the to_date filter.\n    Example:\n    {{ some_timestamp|to_date|year }}\n\n    This doesn't work, unfortunately:\n    {{ some_timestamp|to_date.year }}\n    "),
               ('generic.templatetags.timeslider_tags.month',
                ['date'],
                "\n    Gets the month (integer) from a date object.\n    Necessary to pipe through the to_date filter.\n    Example:\n    {{ some_timestamp|to_date|month }}\n\n    This doesn't work, unfortunately:\n    {{ some_timestamp|to_date.month }}\n    "),
               ('generic.templatetags.timeslider_tags.day',
                ['date'],
                "\n    Gets the day of month (integer) from a date\n    object.\n    Necessary to pipe through the to_date filter.\n    Example:\n    {{ some_timestamp|to_date|day }}\n    \n    This doesn't work, unfortunately:\n    {{ some_timestamp|to_date.day }}\n    "),
               ('generic.templatetags.reportdict.reportdict', ['input', 'property'], ''),
               ('unregister.models.bulk_process', ['sender', '**kwargs'], ''),
               ('auth.models.permission_group_sync', ['sender', '**kwargs'], ''),
               ('auth.views.registration', ['req', 'pk=None'], ''),
               ('mtrack_project.rapidsms_tracking.tracking.utils.get_users', [], ''),
               ('mtrack_project.rapidsms_tracking.tracking.views.view_user_history',
                ['request', 'user_id=None'],
                ''),
               ('mtrack_project.email_reports_src.email_reports.views.email_reports',
                ['request', 'context={}', "template='reports/scheduled_reports.html'"],
                ''),
               ('mtrack_project.email_reports_src.email_reports.views.add_scheduled_report',
                ['request', 'user_id'],
                ''),
               ('mtrack_project.email_reports_src.email_reports.views.drop_scheduled_report',
                ['request', 'user_id', 'report_id'],
                ''),
               ('mtrack_project.email_reports_src.email_reports.views.test_scheduled_report',
                ['request', 'user_id', 'report_id'],
                ''),
               ('mtrack_project.email_reports_src.email_reports.tasks.daily_reports', [], ''),
               ('mtrack_project.email_reports_src.email_reports.tasks.weekly_reports', [], ''),
               ('mtrack_project.email_reports_src.email_reports.tasks._run_reports',
                ['reports'],
                ''),
               ('mtrack_project.email_reports_src.email_reports.templatetags.report_tags.int_to_month',
                ['month_number'],
                ''),
               ('mtrack_project.email_reports_src.email_reports.templatetags.report_tags.int_to_day',
                ['day_number'],
                ''),
               ('mtrack_project.email_reports_src.email_reports.templatetags.report_tags.js_int_to_month',
                ['month_number'],
                '\n    Convert a javascript integer to a month name.  Javascript months are 0\n    indexed.'),
               ('mtrack_project.email_reports_src.email_reports.templatetags.report_tags.dict_lookup',
                ['dict', 'key'],
                'Get an item from a dictionary.'),
               ('mtrack_project.email_reports_src.email_reports.templatetags.report_tags.array_lookup',
                ['array', 'index'],
                'Get an item from an array.'),
               ('mtrack_project.email_reports_src.email_reports.templatetags.report_tags.attribute_lookup',
                ['obj', 'attr'],
                'Get an attribute from an object.'),
               ('mtrack_project.email_reports_src.email_reports.templatetags.report_tags.times',
                ['a', 'b'],
                ''),
               ('mtrack_project.email_reports_src.email_reports.schedule.html2text.name2cp',
                ['k'],
                ''),
               ('mtrack_project.email_reports_src.email_reports.schedule.html2text.charref',
                ['name'],
                ''),
               ('mtrack_project.email_reports_src.email_reports.schedule.html2text.entityref',
                ['c'],
                ''),
               ('mtrack_project.email_reports_src.email_reports.schedule.html2text.replaceEntities',
                ['s'],
                ''),
               ('mtrack_project.email_reports_src.email_reports.schedule.html2text.unescape',
                ['s'],
                ''),
               ('mtrack_project.email_reports_src.email_reports.schedule.html2text.onlywhite',
                ['line'],
                'Return true if the line does only consist of whitespace characters.'),
               ('mtrack_project.email_reports_src.email_reports.schedule.html2text.optwrap',
                ['text'],
                'Wrap all paragraphs in the provided text.'),
               ('mtrack_project.email_reports_src.email_reports.schedule.html2text.hn',
                ['tag'],
                ''),
               ('mtrack_project.email_reports_src.email_reports.schedule.html2text.wrapwrite',
                ['text'],
                ''),
               ('mtrack_project.email_reports_src.email_reports.schedule.html2text.html2text_file',
                ['html', 'out=wrapwrite', "baseurl=''"],
                ''),
               ('mtrack_project.email_reports_src.email_reports.schedule.html2text.html2text',
                ['html', "baseurl=''"],
                ''),
               ('mtrack_project.rapidsms_uganda_ussd.ussd.views.ussd',
                ['req',
                 'input_form=YoForm',
                 "request_method='POST'",
                 "output_template='ussd/yo.txt'"],
                ''),
               ('healthmodels.views.health_management.facility_index',
                ['request', "template_name='healthmodels/facility_index.html'"],
                ''),
               ('healthmodels.views.health_management.new_facility',
                ['request', 'parent', "template_name='healthmodels/new_facility.html'"],
                ''),
               ('healthmodels.views.health_management.edit_facility',
                ['request', 'pk', "template_name='healthmodels/edit_facility.html'"],
                ''),
               ('healthmodels.views.health_management.update_facility',
                ['request', 'pk', "template_name='healthmodels/partials/edit_facility.html'"],
                ''),
               ('healthmodels.views.health_management.destroy_facility', ['request', 'pk'], ''),
               ('healthmodels.views.health_management.create_facility', ['request'], ''),
               ('healthmodels.views.health_management.render_facilities',
                ['request',
                 "template_name='healthmodels/partials/_render_facilities_tree.html'"],
                ''),
               ('healthmodels.templatetags.health_facility_tree.facilitytree',
                ['parser', 'token'],
                '\n    Populates a template variable with a ``QuerySet`` containing the\n    the the health facilities.\n\n\n    '),
               ('uganda_common.utils.get_location_for_user',
                ['user'],
                '\n    if called with an argument, *user*, the location of a user returned (by district)\n    '),
               ('uganda_common.utils.previous_calendar_week',
                [],
                '\n    returns a datetime tuple with 2 dates: current datetime and a datetime from 7days before.\n    '),
               ('uganda_common.utils.previous_calendar_month',
                [],
                '\n    returns a datetime tuple with 2 dates: current datetime and a datetime from 30 days before.\n    '),
               ('uganda_common.utils.previous_calendar_quarter',
                [],
                '\n    returns a datetime tuple with 2 dates: current datetime and a datetime from 90 days before\n    '),
               ('uganda_common.utils.assign_backend',
                ['number'],
                '\n    assign a backend to a given number\n    '),
               ('uganda_common.utils.parse_district_value',
                ['value'],
                '\n    This function confirms whether your district does exist in a predefined list of districts.\n    '),
               ('uganda_common.utils.total_submissions',
                ['keyword',
                 'start_date',
                 'end_date',
                 'location',
                 'extra_filters=None',
                 'group_by_timespan=None'],
                '\n    returns *total submission of values* from an xform; this is used to get certain values from and xform\n    submitted database table.\n    '),
               ('uganda_common.utils.total_attribute_value',
                ['attribute_slug_list',
                 'start_date',
                 'end_date',
                 'location',
                 'group_by_timespan=None'],
                ''),
               ('uganda_common.utils.reorganize_location', ['key', 'report', 'report_dict'], ''),
               ('uganda_common.utils.reorganize_dictionary',
                ['key', 'report', 'report_dict', 'unique_key', 'default_values', 'value_key'],
                ''),
               ('uganda_common.utils.reorganize_timespan',
                ['timespan', 'report', 'report_dict', 'location_list', 'request=None'],
                ''),
               ('uganda_common.utils.get_group_by',
                ['start_date', 'end_date'],
                '\n    a function to add a group_by filter. In this case the filtering happens\n    by a start_date and end_date\n    '),
               ('uganda_common.utils.get_xform_dates',
                ['request'],
                '\n    Process date variables from POST\n    '),
               ('uganda_common.utils.get_messages', ['request'], ''),
               ('uganda_common.utils.parse_header_row', ['worksheet', 'fields'], ''),
               ('uganda_common.utils.parse_telephone', ['row', 'worksheet', 'cols'], ''),
               ('uganda_common.utils.parse_name', ['row', 'worksheet', 'cols'], ''),
               ('uganda_common.utils.parse_district', ['row', 'worksheet', 'cols'], ''),
               ('uganda_common.utils.parse_village', ['row', 'worksheet', 'cols'], ''),
               ('uganda_common.utils.parse_birthdate', ['row', 'worksheet', 'cols'], ''),
               ('uganda_common.utils.parse_gender', ['row', 'worksheet', 'cols'], ''),
               ('uganda_common.utils.handle_excel_file', ['file', 'group', 'fields'], ''),
               ('uganda_common.context_processors.authtabs',
                ['request'],
                '\n    a context processor that adds Tabs to layout.html in RapidSMS. Tab loading is reworked to allow for privileged \n    user Tab access.                            \n    '),
               ('uganda_common.context_processors.module', ['request'], ''),
               ('uganda_common.models.parse_district_value', ['value'], ''),
               ('uganda_common.cache_manager.invalide_cache',
                ['instance', 'sender', '**kwargs'],
                ''),
               ('rapidsms_httprouter.router.start_sending_mass_messages', [], 'Deprecated'),
               ('rapidsms_httprouter.router.stop_sending_mass_messages', [], 'Deprecated'),
               ('rapidsms_httprouter.router.get_router',
                ['start_workers=False'],
                '\n    Takes care of performing lazy initialization of the www router.\n    '),
               ('rapidsms_httprouter.managers.hash_dict', ['dictionary'], ''),
               ('rapidsms_httprouter.views.receive',
                ['request'],
                '\n    Takes the passed in message.  Creates a record for it, and passes it through\n    all the rapidsms applications for processing.\n    '),
               ('rapidsms_httprouter.views.outbox',
                ['request'],
                '\n    Returns any messages which have been queued to be sent but have no yet been marked\n    as being delivered.\n    '),
               ('rapidsms_httprouter.views.delivered',
                ['request'],
                '\n    Called when a message is delivered by our backend.\n    '),
               ('rapidsms_httprouter.views.can_send', ['request', 'message_id'], ''),
               ('rapidsms_httprouter.views.console',
                ['request'],
                '\n    Our web console, lets you see recent messages as well as send out new ones for\n    processing.\n    '),
               ('rapidsms_httprouter.views.summary', ['request'], ''),
               ('mtrack_project.rapidsms_alerts.alerts.utils.get_alert_generators',
                ['type', '*args', '**kwargs'],
                '\n    Return a list of alert generators defined in the LOGISTICS_ALERT_GENERATORS\n    setting.\n\n    Return an empty list if no alert generators are defined.\n    All exceptions raised while importing generators are\n    allowed to propagate, to avoid masking errors.\n    '),
               ('mtrack_project.rapidsms_alerts.alerts.utils.get_notifications', [], ''),
               ('mtrack_project.rapidsms_alerts.alerts.utils.trigger_notifications', [], ''),
               ('mtrack_project.rapidsms_alerts.alerts.utils.auto_escalate', [], ''),
               ('mtrack_project.rapidsms_alerts.alerts.utils.alert_action',
                ['alert', 'action', 'user=None', 'comment=None'],
                ''),
               ('mtrack_project.rapidsms_alerts.alerts.utils.action_caption',
                ['action', 'alert', 'user'],
                ''),
               ('mtrack_project.rapidsms_alerts.alerts.utils.add_user_comment',
                ['alert', 'user', 'text'],
                ''),
               ('mtrack_project.rapidsms_alerts.alerts.utils.reconcile_users',
                [],
                'keep the alert userlist in sync with the underlying rules that determine\n    you can see the alerts -- addresses users being added/removed from roles while\n    an alert is active'),
               ('mtrack_project.rapidsms_alerts.alerts.ajax.add_comment', ['request'], ''),
               ('mtrack_project.rapidsms_alerts.alerts.ajax.alert_action', ['request'], ''),
               ('mtrack_project.rapidsms_alerts.alerts.models.user_name',
                ['user', 'default=None'],
                ''),
               ('mtrack_project.rapidsms_alerts.alerts.importutil.dynamic_import',
                ['import_name'],
                ''),
               ('mtrack_project.rapidsms_alerts.alerts._prototyping.alerttest',
                ['request'],
                '\n    Example method for adding alerts to your application. This one\n    just returns a single empty alert.skype:carterpowers\n    '),
               ('mtrack_project.rapidsms_alerts.alerts._prototyping.notiftest1', [], ''),
               ('mtrack_project.rapidsms_alerts.alerts._prototyping.notiftest2', [], ''),
               ('mtrack_project.rapidsms_alerts.alerts._prototyping.mk_notifiable_disease_alert',
                ['disease', 'alert_type', 'reporting_period', 'val', 'loc'],
                ''),
               ('mtrack_project.rapidsms_alerts.alerts._prototyping.notifiable_disease_test',
                [],
                ''),
               ('mtrack_project.rapidsms_alerts.alerts.templatetags.alerts_tags.alerts',
                ['request'],
                ''),
               ('mtrack_project.rapidsms_alerts.alerts.templatetags.alerts_tags.notifications',
                ['request'],
                ''),
               ('script.utils.outgoing.check_progress',
                ['connection'],
                "\n    This function should check if a given connection\n    (of type rapidsms.models.Connection) needs to be prompted\n    with any messages, based on the progress of the particular\n    Connection, the rules of the particular step in the script,\n    and the current time.  NOTE: This function doesn't need to\n    check if the particular connection belongs to a script: this\n    function is called from the check_script_progress management\n    command, which will already have performed that check.  This\n    utility function should only be updating the ScriptProgress model\n    accordingly.\n\n    Returns: any immediate message (as a string) that needs to be\n    queued (based on the rules of the script), on None if none are\n    needed.\n    "),
               ('script.utils.incoming.incoming_progress',
                ['message'],
                "\n    This function should check if an incoming message\n    (of type rapidsms.messages.incoming.IncomingMessage)\n    moves a particular script forward, based on the progress\n    of the particular Connection and the rules of the particular\n    step.  NOTE: This function doesn't need to check if the particular\n    connection belongs to a script: this function is called from\n    app.py, which will already have performed that check.  This utility\n    function should only be updating the ScriptProgress model accordingly.\n\n    This function SHOULD, however, do all processing of the message (i.e.,\n    updating the ScriptProgress table, calling Poll.process_response, etc.),\n    and also fire any signals on script progression or completion.\n\n    Returns: any immediate response (as a string) that is necessary (based on\n    the rules of the script), or None if none are needed.\n    "),
               ('script.utils.handling.find_best_response', ['session', 'poll'], ''),
               ('script.utils.handling.find_closest_match',
                ['value', 'model', 'match_exact=False'],
                ''),
               ('eav.get_version', [], ''),
               ('eav.register', ['model_cls', 'config_cls=None'], ''),
               ('eav.unregister', ['model_cls'], ''),
               ('eav.validators.validate_text',
                ['value'],
                '\n    Raises ``ValidationError`` unless *value* type is ``str`` or ``unicode``\n    '),
               ('eav.validators.validate_float',
                ['value'],
                '\n    Raises ``ValidationError`` unless *value* can be cast as a ``float``\n    '),
               ('eav.validators.validate_int',
                ['value'],
                '\n    Raises ``ValidationError`` unless *value* can be cast as an ``int``\n    '),
               ('eav.validators.validate_date',
                ['value'],
                '\n    Raises ``ValidationError`` unless *value* is an instance of ``datetime``\n    or ``date``\n    '),
               ('eav.validators.validate_bool',
                ['value'],
                '\n    Raises ``ValidationError`` unless *value* type is ``bool``\n    '),
               ('eav.validators.validate_object',
                ['value'],
                '\n    Raises ``ValidationError`` unless *value* is a saved\n    django model instance.\n    '),
               ('eav.validators.validate_enum',
                ['value'],
                '\n    Raises ``ValidationError`` unless *value* is a saved\n    :class:`~eav.models.EnumValue` model instance.\n    '),
               ('eav.managers.eav_filter',
                ['func'],
                '\n    Decorator used to wrap filter and exlclude methods.  Passes args through\n    expand_q_filters and kwargs through expand_eav_filter. Returns the\n    called function (filter or exclude)\n    '),
               ('eav.managers.expand_q_filters',
                ['q', 'root_cls'],
                '\n    Takes a Q object and a model class.\n    Recursivley passes each filter / value in the Q object tree leaf nodes\n    through expand_eav_filter\n    '),
               ('eav.managers.expand_eav_filter',
                ['model_cls', 'key', 'value'],
                "\n    Accepts a model class and a key, value.\n    Recurisively replaces any eav filter with a subquery.\n\n    For example::\n\n        key = 'eav__height'\n        value = 5\n\n    Would return::\n\n        key = 'eav_values__in'\n        value = Values.objects.filter(value_int=5, attribute__slug='height')\n    "),
               ('poll.views.responses_as_csv', ['req', 'pk'], ''),
               ('poll.views.polls', ['req'], ''),
               ('poll.views.demo', ['req', 'poll_id'], ''),
               ('poll.views.new_poll', ['req'], ''),
               ('poll.views.view_poll', ['req', 'poll_id'], ''),
               ('poll.views.view_report',
                ['req', 'poll_id', 'location_id=None', 'as_module=False'],
                ''),
               ('poll.views.view_poll_details', ['req', 'form_id'], ''),
               ('poll.views.edit_poll', ['req', 'poll_id'], ''),
               ('poll.views.view_responses', ['req', 'poll_id', 'as_module=False'], ''),
               ('poll.views.stats', ['req', 'poll_id', 'location_id=None'], ''),
               ('poll.views.number_details', ['req', 'poll_id'], ''),
               ('poll.views._get_response_edit_form', ['response', 'data=None'], ''),
               ('poll.views.apply_response', ['req', 'response_id'], ''),
               ('poll.views.apply_all', ['req', 'poll_id'], ''),
               ('poll.views.edit_response', ['req', 'response_id'], ''),
               ('poll.views.view_response', ['req', 'response_id'], ''),
               ('poll.views.delete_response', ['req', 'response_id'], ''),
               ('poll.views.view_category', ['req', 'poll_id', 'category_id'], ''),
               ('poll.views.edit_category', ['req', 'poll_id', 'category_id'], ''),
               ('poll.views.add_category', ['req', 'poll_id'], ''),
               ('poll.views.delete_poll', ['req', 'poll_id'], ''),
               ('poll.views.start_poll', ['req', 'poll_id'], ''),
               ('poll.views.end_poll', ['req', 'poll_id'], ''),
               ('poll.views.delete_category', ['req', 'poll_id', 'category_id'], ''),
               ('poll.views.edit_rule', ['req', 'poll_id', 'category_id', 'rule_id'], ''),
               ('poll.views.add_rule', ['req', 'poll_id', 'category_id'], ''),
               ('poll.views.view_rule', ['req', 'poll_id', 'category_id', 'rule_id'], ''),
               ('poll.views.view_rules', ['req', 'poll_id', 'category_id'], ''),
               ('poll.views.delete_rule', ['req', 'poll_id', 'category_id', 'rule_id'], ''),
               ('poll.management.create_attributes', ['app'], ''),
               ('poll.management.init_attributes', ['sender', '**kwargs'], ''),
               ('poll.templatetags.attr.attr', ['input', 'property'], ''),
               ('mtrack_project.rapidsms_logistics.logistics.reports.calc_percentage',
                ['a', 'b'],
                ''),
               ('mtrack_project.rapidsms_logistics.logistics.reports.get_reporting_and_nonreporting_facilities',
                ['deadline', 'location'],
                "\n    Get all HSAs who haven't reported since a passed in date\n    "),
               ('mtrack_project.rapidsms_logistics.logistics.alerts.non_reporting_facilities',
                ['request'],
                ''),
               ('mtrack_project.rapidsms_logistics.logistics.alerts.facilities_without_reminders',
                ['request'],
                ''),
               ('mtrack_project.rapidsms_logistics.logistics.alerts.facilities_without_reporters',
                ['request'],
                ''),
               ('mtrack_project.rapidsms_logistics.logistics.config.has_permissions_to',
                ['contact', 'operation'],
                ''),
               ('mtrack_project.rapidsms_logistics.logistics.config.hsa_supply_point_type',
                [],
                '\n    The supply point type for HSAs\n    '),
               ('mtrack_project.rapidsms_logistics.logistics.config.hsa_location_type',
                [],
                '\n    The location type for HSAs\n    '),
               ('mtrack_project.rapidsms_logistics.logistics.decorators.logistics_contact_required',
                [],
                '\n    This decorator currently only works on an instance\n    of a handler object. \n    '),
               ('mtrack_project.rapidsms_logistics.logistics.decorators.logistics_permission_required',
                ['operation'],
                '\n    This decorator currently only works on an instance\n    of a handler object. It also assumes that \n    logistics_contact_required has already been run.\n    '),
               ('mtrack_project.rapidsms_logistics.logistics.decorators.logistics_contact_and_permission_required',
                ['operation'],
                '\n    This decorator currently only works on an instance\n    of a handler object. \n    '),
               ('mtrack_project.rapidsms_logistics.logistics.decorators.return_if_place_not_set',
                [],
                ''),
               ('mtrack_project.rapidsms_logistics.logistics.decorators.place_in_request',
                ["param='place'"],
                '\n    Expects a parameter in the request, and if found, will\n    populate request.location with an instance of that \n    place, by code.\n    '),
               ('mtrack_project.rapidsms_logistics.logistics.context_processors.custom_settings',
                ['request'],
                ''),
               ('mtrack_project.rapidsms_logistics.logistics.context_processors.google_analytics',
                ['request'],
                ''),
               ('mtrack_project.rapidsms_logistics.logistics.context_processors.base_template',
                ['request'],
                " \n    For compatibility with the logistics app, which allows users\n    to specify a custom 'base template' dynamically\n    "),
               ('mtrack_project.rapidsms_logistics.logistics.models.get_geography',
                [],
                "\n    to get a sense of the complete geography in the system\n    we return the top-level entities (example regions)\n    which we can easily iterate through, using get_children()\n    in order to assess the whole geography that we're handling\n    "),
               ('mtrack_project.rapidsms_logistics.logistics.models._filtered_stock',
                ['product', 'producttype'],
                ''),
               ('mtrack_project.rapidsms_logistics.logistics.models.stockout_count',
                ['facilities=None', 'product=None', 'producttype=None'],
                ''),
               ('mtrack_project.rapidsms_logistics.logistics.models.emergency_stock_count',
                ['facilities=None', 'product=None', 'producttype=None'],
                ' This indicates all stock below reorder levels,\n        including all stock below emergency supply levels\n    '),
               ('mtrack_project.rapidsms_logistics.logistics.models.low_stock_count',
                ['facilities=None', 'product=None', 'producttype=None'],
                ' This indicates all stock below reorder levels,\n        including all stock below emergency supply levels\n    '),
               ('mtrack_project.rapidsms_logistics.logistics.models.emergency_plus_low',
                ['facilities=None', 'product=None', 'producttype=None'],
                ' This indicates all stock below reorder levels,\n        including all stock below emergency supply levels\n    '),
               ('mtrack_project.rapidsms_logistics.logistics.models.good_supply_count',
                ['facilities=None', 'product=None', 'producttype=None'],
                ' This indicates all stock below reorder levels,\n        including all stock below emergency supply levels\n    '),
               ('mtrack_project.rapidsms_logistics.logistics.models.adequate_supply_count',
                ['facilities=None', 'product=None', 'producttype=None'],
                ' This indicates all stock between emergency and full levels\n    '),
               ('mtrack_project.rapidsms_logistics.logistics.models.overstocked_count',
                ['facilities=None', 'product=None', 'producttype=None'],
                ''),
               ('mtrack_project.rapidsms_logistics.logistics.models.consumption',
                ['facilities=None', 'product=None', 'producttype=None'],
                ''),
               ('mtrack_project.rapidsms_logistics.logistics.view_decorators.filter_context',
                ['func'],
                '\n    add commodities and commoditytypes to context\n    '),
               ('mtrack_project.rapidsms_logistics.logistics.view_decorators.geography_context',
                ['func'],
                '\n    add geography to context\n    '),
               ('mtrack_project.rapidsms_logistics.logistics.view_decorators.location_context',
                ['func'],
                '\n    add geography to context\n    '),
               ('mtrack_project.rapidsms_logistics.logistics.charts.stocklevel_plot',
                ['transactions'],
                ''),
               ('mtrack_project.rapidsms_logistics.logistics.signals.notify_suppliees_of_stockouts_resolved',
                ['sender', 'supply_point', 'products', 'resolved_by'],
                ''),
               ('mtrack_project.rapidsms_logistics.logistics.signals.post_save_product_report',
                ['sender', 'instance', 'created', '**kwargs'],
                '\n    Every time a product report is created,\n    1. Update the facility report date information\n    2. update the stock information at the given facility\n    3. Generate a stock transaction\n    \n    I guess 1+3 could go on a stocktransaction signal. \n    Something to consider if we start saving stocktransactions anywhere else.\n    '),
               ('mtrack_project.rapidsms_logistics.logistics.signals.create_user_profile',
                ['sender', 'instance', 'created', '**kwargs'],
                'Create a matching profile whenever a User is created.'),
               ('mtrack_project.rapidsms_logistics.logistics.loader.load_products_into_facilities',
                ['demo=False'],
                ''),
               ('mtrack_project.rapidsms_logistics.logistics.loader.load_products',
                ['log_to_console=False'],
                ' Creates both products and product types '),
               ('mtrack_project.rapidsms_logistics.logistics.loader.generate_codes_for_locations',
                ['log_to_console=False'],
                " CVS doesn't require locations to have a code, but logistics\n    assumes that location does, so we generate codes where they are missing\n      "),
               ('mtrack_project.rapidsms_logistics.logistics.loader._generate_location_code',
                ['name'],
                ''),
               ('mtrack_project.rapidsms_logistics.logistics.loader.init_reports',
                ['log_to_console=False'],
                '\n    Initialize any data that should be static here\n    '),
               ('mtrack_project.rapidsms_logistics.logistics.loader.init_roles_and_responsibilities',
                ['log_to_console=False'],
                ''),
               ('mtrack_project.rapidsms_logistics.logistics.loader.init_supply_point_types',
                [],
                ''),
               ('mtrack_project.rapidsms_logistics.logistics.loader.init_test_location_and_supplypoints',
                [],
                ''),
               ('mtrack_project.rapidsms_logistics.logistics.loader.init_test_product_and_stock',
                [],
                ''),
               ('mtrack_project.rapidsms_logistics.logistics.tables._edit_facility_link',
                ['cell'],
                ''),
               ('mtrack_project.rapidsms_logistics.logistics.tables._location', ['cell'], ''),
               ('mtrack_project.rapidsms_logistics.logistics.tables._edit_commodity_link',
                ['cell'],
                ''),
               ('mtrack_project.rapidsms_logistics.logistics.tables._code', ['cell'], ''),
               ('mtrack_project.rapidsms_logistics.logistics.tables._type', ['cell'], ''),
               ('mtrack_project.rapidsms_logistics.logistics.views.no_ie_allowed',
                ['request', "template='logistics/no_ie_allowed.html'"],
                ''),
               ('mtrack_project.rapidsms_logistics.logistics.views.landing_page',
                ['request'],
                ''),
               ('mtrack_project.rapidsms_logistics.logistics.views.input_stock',
                ['request',
                 'facility_code',
                 'context={}',
                 "template='logistics/input_stock.html'"],
                ''),
               ('mtrack_project.rapidsms_logistics.logistics.views.stockonhand_facility',
                ['request',
                 'facility_code',
                 'context={}',
                 "template='logistics/stockonhand_facility.html'"],
                '\n     this view currently only shows the current stock on hand for a given facility\n    '),
               ('mtrack_project.rapidsms_logistics.logistics.views.facilities_by_product',
                ['request',
                 'location_code',
                 'context={}',
                 "template='logistics/by_product.html'"],
                "\n    The district view is unusual. When we do not receive a filter by individual product,\n    we show the aggregate report. When we do receive a filter by individual product, we show\n    the 'by product' report. Let's see how this goes. \n    "),
               ('mtrack_project.rapidsms_logistics.logistics.views.reporting',
                ['request',
                 'location_code=None',
                 'context={}',
                 "template='logistics/reporting.html'",
                 "destination_url='reporting'"],
                " which facilities have reported on time and which haven't "),
               ('mtrack_project.rapidsms_logistics.logistics.views.navigate', ['request'], ''),
               ('mtrack_project.rapidsms_logistics.logistics.views.dashboard',
                ['request',
                 'location_code=None',
                 'context={}',
                 "template='logistics/aggregate.html'"],
                ''),
               ('mtrack_project.rapidsms_logistics.logistics.views.aggregate',
                ['request',
                 'location_code=None',
                 'context={}',
                 "template='logistics/aggregate.html'"],
                "\n    The aggregate view of all children within a geographical region\n    where 'children' can either be sub-regions\n    OR facilities if no sub-region exists\n    "),
               ('mtrack_project.rapidsms_logistics.logistics.views._get_rows_from_children',
                ['children', 'commodity_filter', 'commoditytype_filter'],
                ''),
               ('mtrack_project.rapidsms_logistics.logistics.views.get_location_children',
                ['location', 'commodity_filter', 'commoditytype_filter'],
                ''),
               ('mtrack_project.rapidsms_logistics.logistics.views.export_stockonhand',
                ['request', 'facility_code', "format='xls'", "filename='stockonhand'"],
                ''),
               ('mtrack_project.rapidsms_logistics.logistics.views.facility',
                ['req', 'pk=None', "template='logistics/config.html'"],
                ''),
               ('mtrack_project.rapidsms_logistics.logistics.views.commodity',
                ['req', 'pk=None', "template='logistics/config.html'"],
                ''),
               ('mtrack_project.rapidsms_logistics.logistics.views.get_facilities', [], ''),
               ('mtrack_project.rapidsms_logistics.logistics.views.get_districts', [], ''),
               ('mtrack_project.rapidsms_logistics.logistics.views.district_dashboard',
                ['request', "template='logistics/district_dashboard.html'"],
                ''),
               ('mtrack_project.rapidsms_logistics.logistics.templatetags.logistics_report_tags._r_2_s_helper',
                ['template', 'dict'],
                ''),
               ('mtrack_project.rapidsms_logistics.logistics.templatetags.logistics_report_tags.aggregate_table',
                ['location', 'commodity_filter=None', 'commoditytype_filter=None'],
                ''),
               ('mtrack_project.rapidsms_logistics.logistics.templatetags.logistics_report_tags.hsa_aggregate_table',
                ['location', 'commodity_filter=None', 'commoditytype_filter=None'],
                ''),
               ('mtrack_project.rapidsms_logistics.logistics.templatetags.logistics_report_tags.facility_aggregate_table',
                ['location', 'commodity_filter=None', 'commoditytype_filter=None'],
                ''),
               ('mtrack_project.rapidsms_logistics.logistics.templatetags.logistics_report_tags.reporting_rates',
                ['locations', 'type=None', 'days=30'],
                ''),
               ('mtrack_project.rapidsms_logistics.logistics.templatetags.logistics_report_tags.reporting_breakdown',
                ['locations', 'type=None', 'datespan=None'],
                ''),
               ('mtrack_project.rapidsms_logistics.logistics.templatetags.logistics_report_tags.order_response_stats',
                ['locations', 'type=None', 'days=30'],
                '\n    With a list of locations - display reporting\n    rates associated with those locations.\n    This method only looks at closed orders\n    '),
               ('mtrack_project.rapidsms_logistics.logistics.templatetags.logistics_report_tags.order_fill_stats',
                ['locations', 'type=None', 'datespan=None'],
                '\n    With a list of locations - display reporting\n    rates associated with those locations.\n    This method only looks at closed orders\n    '),
               ('mtrack_project.rapidsms_logistics.logistics.templatetags.logistics_report_tags.stockonhand_table',
                ['supply_point'],
                ''),
               ('mtrack_project.rapidsms_logistics.logistics.templatetags.logistics_report_tags.recent_messages',
                ['contact', 'limit=5'],
                ''),
               ('mtrack_project.rapidsms_logistics.logistics.templatetags.logistics_report_tags.product_availability_summary_by_facility',
                ['location'],
                ''),
               ('mtrack_project.rapidsms_logistics.logistics.templatetags.logistics_report_tags.commodity_filter',
                ['commodities', 'can_select_all=True'],
                ''),
               ('mtrack_project.rapidsms_logistics.logistics.templatetags.logistics_report_tags.commodity_code_to_name',
                ['code'],
                ''),
               ('mtrack_project.rapidsms_logistics.logistics.templatetags.logistics_report_tags.stock',
                ['supply_point', 'product'],
                ''),
               ('mtrack_project.rapidsms_logistics.logistics.templatetags.logistics_extras.highlight_months',
                ['stockonhand', 'media_url'],
                ''),
               ('mtrack_project.rapidsms_logistics.logistics.templatetags.logistics_extras.percent_cell',
                ['a', 'b'],
                ''),
               ('mtrack_project.rapidsms_logistics.logistics.templatetags.logistics_tags.contact',
                ['contact'],
                ''),
               ('mtrack_project.rapidsms_logistics.logistics.templatetags.nav_tags.breadcrumbs',
                ['location'],
                ''),
               ('mtrack_project.rapidsms_logistics.logistics.templatetags.geonav_tags.render_nav',
                ['geography', 'location'],
                ''),
               ('mtrack_project.rapidsms_logistics.logistics.templatetags.geonav_tags.render_bread_nav',
                ['location'],
                ''),
               ('mtrack_project.rapidsms_logistics.logistics.templatetags.math_tags.divide',
                ['a', 'b'],
                ''),
               ('mtrack_project.rapidsms_logistics.logistics.templatetags.math_tags.multiply',
                ['a', 'b'],
                ''),
               ('mtrack_project.rapidsms_logistics.logistics.templatetags.math_tags.percent',
                ['a', 'b'],
                ''),
               ('mtrack_project.rapidsms_logistics.logistics.tests.util.load_test_data', [], '')],
 'HIERARCHY': ['mtrack_project',
               'mtrack_project.manage',
               'mtrack_project.urls',
               'mtrack_project.settings',
               'mtrack_project.static',
               'mtrack_project.static.uganda.config',
               'mtrack_project.static.uganda',
               'mtrack_project.rapidsms_mtrack',
               'mtrack_project.rapidsms_mtrack.mtrack.utils',
               'mtrack_project.rapidsms_mtrack.mtrack.reports',
               'mtrack_project.rapidsms_mtrack.mtrack',
               'mtrack_project.rapidsms_mtrack.mtrack.models',
               'mtrack_project.rapidsms_mtrack.mtrack.tests',
               'mtrack_project.rapidsms_mtrack.mtrack.urls',
               'mtrack_project.rapidsms_mtrack.mtrack.signals',
               'mtrack_project.rapidsms_mtrack.mtrack.loader',
               'mtrack_project.rapidsms_mtrack.mtrack.forms',
               'mtrack_project.rapidsms_mtrack.mtrack.app',
               'mtrack_project.rapidsms_mtrack.mtrack.settings',
               'mtrack_project.rapidsms_mtrack.mtrack.extensions',
               'mtrack_project.rapidsms_mtrack.mtrack.extensions.healthmodels',
               'mtrack_project.rapidsms_mtrack.mtrack.extensions.healthmodels.healthfacility',
               'spreadsheets',
               'mtrack_project.rapidsms_mtrack.mtrack.management',
               'mtrack_project.rapidsms_mtrack.mtrack.management.commands.mtrack_init',
               'mtrack_project.rapidsms_mtrack.mtrack.management.commands',
               'mtrack_project.rapidsms_mtrack.mtrack.management.commands.upload_hcs',
               'mtrack_project.rapidsms_mtrack.mtrack.management.commands.export_reports',
               'mtrack_project.rapidsms_mtrack.mtrack.management.commands.create_autoreg_script',
               'mtrack_project.rapidsms_mtrack.mtrack.management.commands.mtrack_init_demo',
               'mtrack_project.rapidsms_mtrack.mtrack.views',
               'mtrack_project.rapidsms_mtrack.mtrack.views.anonymousreports',
               'mtrack_project.rapidsms_mtrack.mtrack.views.dashboard',
               'mtrack_project.rapidsms_mtrack.mtrack.fixtures',
               'mtrack_project.rapidsms_xforms_src',
               'mtrack_project.rapidsms_xforms_src.pavement',
               'mtrack_project.rapidsms_xforms_src.test_settings',
               'mtrack_project.rapidsms_xforms_src.setup',
               'mtrack_project.rapidsms_xforms_src.test-runner',
               'mtrack_project.rapidsms_xforms_src.test-runner.manage',
               'mtrack_project.rapidsms_xforms_src.test-runner.urls',
               'mtrack_project.rapidsms_xforms_src.test-runner.settings',
               'mtrack_project.rapidsms_xforms_src.rapidsms_xforms',
               'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.models',
               'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.tests',
               'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.urls',
               'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.admin',
               'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.views',
               'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.app',
               'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.management',
               'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.management.commands',
               'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.management.commands.loadmessages',
               'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.migrations',
               'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.migrations.0001_initial',
               'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.templatetags',
               'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.templatetags.dumper',
               'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.templatetags.prop',
               'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.templatetags.messages',
               'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.templatetags.forms',
               'conf',
               'setup',
               'contact.utils',
               'contact',
               'contact.models',
               'contact.urls',
               'contact.admin',
               'contact.views',
               'contact.forms',
               'contact.extensions',
               'contact.extensions.rapidsms',
               'contact.extensions.rapidsms.contact',
               'contact.migrations',
               'contact.migrations.0001_initial',
               'contact.templatetags',
               'contact.templatetags.extra_tags',
               'setup',
               'rapidsms.utils',
               'rapidsms',
               'rapidsms.router',
               'rapidsms.models',
               'rapidsms.admin',
               'rapidsms.views',
               'rapidsms.forms',
               'rapidsms.errors',
               'rapidsms.conf',
               'rapidsms.settings',
               'rapidsms.utils',
               'rapidsms.utils.pagination',
               'rapidsms.utils.modules',
               'rapidsms.utils.web_message',
               'rapidsms.backends.bucket',
               'rapidsms.backends.email',
               'rapidsms.backends.kannel',
               'rapidsms.backends',
               'rapidsms.backends.irc',
               'rapidsms.backends.gsm',
               'rapidsms.backends.http',
               'rapidsms.backends.smpp',
               'rapidsms.backends.base',
               'rapidsms.management',
               'rapidsms.management.commands.update_backends',
               'rapidsms.management.commands.runrouter',
               'rapidsms.management.commands',
               'rapidsms.management.commands.update_apps',
               'rapidsms.management.commands.startproject',
               'rapidsms.urls.static_media',
               'rapidsms.urls',
               'rapidsms.urls.login_logout',
               'rapidsms.log',
               'rapidsms.log.mixin',
               'rapidsms.messages',
               'rapidsms.messages.error',
               'rapidsms.messages.outgoing',
               'rapidsms.messages.incoming',
               'rapidsms.messages.base',
               'rapidsms.migrations',
               'rapidsms.migrations.0001_initial',
               'project',
               'project.manage',
               'project.urls',
               'project.settings',
               'rapidsms.contrib',
               'rapidsms.contrib.default',
               'rapidsms.contrib.default.app',
               'rapidsms.contrib.default.settings',
               'rapidsms.contrib.handlers.utils',
               'rapidsms.contrib.handlers',
               'rapidsms.contrib.handlers.models',
               'rapidsms.contrib.handlers.tests',
               'rapidsms.contrib.handlers.app',
               'rapidsms.contrib.handlers.settings',
               'rapidsms.contrib.handlers.handlers',
               'rapidsms.contrib.handlers.handlers.keyword',
               'rapidsms.contrib.handlers.handlers.pattern',
               'rapidsms.contrib.handlers.handlers.base',
               'rapidsms.contrib.handlers.migrations',
               'rapidsms.contrib.handlers.migrations.0001_initial',
               'rapidsms.contrib.messagelog',
               'rapidsms.contrib.messagelog.models',
               'rapidsms.contrib.messagelog.urls',
               'rapidsms.contrib.messagelog.tables',
               'rapidsms.contrib.messagelog.admin',
               'rapidsms.contrib.messagelog.views',
               'rapidsms.contrib.messagelog.app',
               'rapidsms.contrib.httptester.utils',
               'rapidsms.contrib.httptester',
               'rapidsms.contrib.httptester.urls',
               'rapidsms.contrib.httptester.backend',
               'rapidsms.contrib.httptester.views',
               'rapidsms.contrib.httptester.forms',
               'rapidsms.contrib.httptester.app',
               'rapidsms.contrib.httptester.settings',
               'rapidsms.contrib.registration',
               'rapidsms.contrib.registration.tests',
               'rapidsms.contrib.registration.urls',
               'rapidsms.contrib.registration.tables',
               'rapidsms.contrib.registration.views',
               'rapidsms.contrib.registration.forms',
               'rapidsms.contrib.registration.handlers',
               'rapidsms.contrib.registration.handlers.register',
               'rapidsms.contrib.registration.handlers.language',
               'rapidsms.contrib.locations.utils',
               'rapidsms.contrib.locations',
               'rapidsms.contrib.locations.models',
               'rapidsms.contrib.locations.urls',
               'rapidsms.contrib.locations.tables',
               'rapidsms.contrib.locations.admin',
               'rapidsms.contrib.locations.views',
               'rapidsms.contrib.locations.forms',
               'rapidsms.contrib.locations.app',
               'rapidsms.contrib.locations.settings',
               'rapidsms.contrib.locations.nested',
               'rapidsms.contrib.locations.nested.models',
               'rapidsms.contrib.locations.nested.extensions',
               'rapidsms.contrib.locations.nested.extensions.locations',
               'rapidsms.contrib.locations.nested.extensions.locations.location',
               'rapidsms.contrib.locations.migrations',
               'rapidsms.contrib.locations.migrations.0002_initial',
               'rapidsms.contrib.locations.migrations.0001_initial',
               'rapidsms.contrib.export',
               'rapidsms.contrib.export.urls',
               'rapidsms.contrib.export.views',
               'rapidsms.contrib.echo',
               'rapidsms.contrib.echo.handlers',
               'rapidsms.contrib.echo.handlers.echo',
               'rapidsms.contrib.echo.handlers.ping',
               'rapidsms.contrib.scheduler.fields',
               'rapidsms.contrib.scheduler',
               'rapidsms.contrib.scheduler.models',
               'rapidsms.contrib.scheduler.urls',
               'rapidsms.contrib.scheduler.views',
               'rapidsms.contrib.scheduler.forms',
               'rapidsms.contrib.scheduler.app',
               'rapidsms.contrib.scheduler.templatetags',
               'rapidsms.contrib.scheduler.templatetags.scheduler_tags',
               'rapidsms.contrib.scheduler.tests',
               'rapidsms.contrib.scheduler.tests.faketime',
               'rapidsms.contrib.scheduler.tests.speedup',
               'rapidsms.contrib.scheduler.tests.slow',
               'rapidsms.contrib.ajax.utils',
               'rapidsms.contrib.ajax',
               'rapidsms.contrib.ajax.exceptions',
               'rapidsms.contrib.ajax.urls',
               'rapidsms.contrib.ajax.views',
               'rapidsms.contrib.ajax.app',
               'rapidsms.contrib.ajax.settings',
               'rapidsms.contrib.messaging.utils',
               'rapidsms.contrib.messaging',
               'rapidsms.contrib.messaging.filters',
               'rapidsms.contrib.messaging.urls',
               'rapidsms.contrib.messaging.views',
               'rapidsms.contrib.messaging.app',
               'rapidsms.templatetags',
               'rapidsms.templatetags.tabs_tags',
               'rapidsms.templatetags.forms_tags',
               'rapidsms.templatetags.region_tags',
               'rapidsms.templatetags.paginator_tags',
               'rapidsms.tests.scripted',
               'rapidsms.tests.test_views',
               'rapidsms.tests',
               'rapidsms.tests.test_logger',
               'rapidsms.tests.test_router',
               'rapidsms.tests.test_app_base',
               'rapidsms.tests.harness',
               'rapidsms.tests.backend',
               'rapidsms.tests.backend.test_bucket',
               'rapidsms.tests.backend.test_http',
               'rapidsms.tests.backend.test_base',
               'rapidsms.apps',
               'rapidsms.apps.base',
               'rapidsms-admin',
               'mtrack_project.rapidsms_cvs',
               'mtrack_project.rapidsms_cvs.sample-urls',
               'mtrack_project.rapidsms_cvs.sample-settings',
               'mtrack_project.rapidsms_cvs.setup',
               'mtrack_project.rapidsms_cvs.cvs-admin',
               'mtrack_project.rapidsms_cvs.cvs.utils',
               'mtrack_project.rapidsms_cvs.cvs.reports',
               'mtrack_project.rapidsms_cvs.cvs',
               'mtrack_project.rapidsms_cvs.cvs.models',
               'mtrack_project.rapidsms_cvs.cvs.urls',
               'mtrack_project.rapidsms_cvs.cvs.sorters',
               'mtrack_project.rapidsms_cvs.cvs.forms',
               'mtrack_project.rapidsms_cvs.cvs.app',
               'mtrack_project.rapidsms_cvs.cvs.settings',
               'mtrack_project.rapidsms_cvs.cvs.extensions',
               'mtrack_project.rapidsms_cvs.cvs.extensions.healthmodels',
               'mtrack_project.rapidsms_cvs.cvs.extensions.healthmodels.facilityreport',
               'mtrack_project.rapidsms_cvs.cvs.extensions.healthmodels.patientencounter',
               'mtrack_project.rapidsms_cvs.cvs.management',
               'mtrack_project.rapidsms_cvs.cvs.management.commands.create_cvsreg_script',
               'mtrack_project.rapidsms_cvs.cvs.management.commands',
               'mtrack_project.rapidsms_cvs.cvs.management.commands.send_monthly_reports',
               'mtrack_project.rapidsms_cvs.cvs.views.basic',
               'mtrack_project.rapidsms_cvs.cvs.views.chart',
               'mtrack_project.rapidsms_cvs.cvs.views',
               'mtrack_project.rapidsms_cvs.cvs.views.map',
               'mtrack_project.rapidsms_cvs.cvs.views.facilities',
               'mtrack_project.rapidsms_cvs.cvs.views.reporters',
               'mtrack_project.rapidsms_cvs.cvs.views.dates',
               'mtrack_project.rapidsms_cvs.cvs.views.stats',
               'mtrack_project.rapidsms_cvs.cvs.migrations',
               'mtrack_project.rapidsms_cvs.cvs.migrations.0001_initial',
               'project',
               'project.manage',
               'project.urls',
               'project.settings',
               'mtrack_project.rapidsms_cvs.cvs.templatetags',
               'mtrack_project.rapidsms_cvs.cvs.templatetags.stats_extras',
               'mtrack_project.rapidsms_cvs.cvs.templatetags.dict',
               'mtrack_project.rapidsms_cvs.cvs.tests.reports',
               'mtrack_project.rapidsms_cvs.cvs.tests',
               'mtrack_project.rapidsms_cvs.cvs.tests.util',
               'mtrack_project.rapidsms_cvs.cvs.tests.autoreg',
               'mtrack_project.rapidsms_cvs.cvs.tests.all',
               'mtrack_project.rapidsms_cvs.cvs.fixtures',
               'setup',
               'generic.utils',
               'generic.reports',
               'generic',
               'generic.context_processors',
               'generic.models',
               'generic.urls',
               'generic.sorters',
               'generic.admin',
               'generic.views',
               'generic.forms',
               'generic.migrations',
               'generic.migrations.0001_initial',
               'generic.reporting.reports',
               'generic.reporting',
               'generic.reporting.views',
               'generic.reporting.forms',
               'generic.templatetags.timeslider_tags',
               'generic.templatetags',
               'generic.templatetags.reportdict',
               'setup',
               'unregister',
               'unregister.models',
               'unregister.forms',
               'unregister.app',
               'unregister.extensions',
               'unregister.extensions.rapidsms',
               'unregister.extensions.rapidsms.contact',
               'unregister.migrations',
               'unregister.migrations.0001_initial',
               'setup',
               'auth',
               'auth.models',
               'auth.tests',
               'auth.urls',
               'auth.views',
               'auth.extensions',
               'auth.extensions.rapidsms',
               'auth.extensions.rapidsms.contact',
               'mtrack_project.rapidsms_tracking',
               'mtrack_project.rapidsms_tracking.tracking.utils',
               'mtrack_project.rapidsms_tracking.tracking',
               'mtrack_project.rapidsms_tracking.tracking.models',
               'mtrack_project.rapidsms_tracking.tracking.urls',
               'mtrack_project.rapidsms_tracking.tracking.middleware',
               'mtrack_project.rapidsms_tracking.tracking.admin',
               'mtrack_project.rapidsms_tracking.tracking.views',
               'mtrack_project.rapidsms_tracking.tracking.migrations',
               'mtrack_project.rapidsms_tracking.tracking.migrations.0001_initial',
               'mtrack_project.email_reports_src',
               'mtrack_project.email_reports_src.email_reports',
               'mtrack_project.email_reports_src.email_reports.models',
               'mtrack_project.email_reports_src.email_reports.tests',
               'mtrack_project.email_reports_src.email_reports.urls',
               'mtrack_project.email_reports_src.email_reports.admin',
               'mtrack_project.email_reports_src.email_reports.views',
               'mtrack_project.email_reports_src.email_reports.tasks',
               'mtrack_project.email_reports_src.email_reports.templatetags',
               'mtrack_project.email_reports_src.email_reports.templatetags.report_tags',
               'mtrack_project.email_reports_src.email_reports.schedule.config',
               'mtrack_project.email_reports_src.email_reports.schedule.parsers',
               'mtrack_project.email_reports_src.email_reports.schedule',
               'mtrack_project.email_reports_src.email_reports.schedule.html2text',
               'mtrack_project.email_reports_src.email_reports.schedule.request',
               'mtrack_project.rapidsms_uganda_ussd',
               'mtrack_project.rapidsms_uganda_ussd.ussd.utils',
               'mtrack_project.rapidsms_uganda_ussd.ussd',
               'mtrack_project.rapidsms_uganda_ussd.ussd.models',
               'mtrack_project.rapidsms_uganda_ussd.ussd.urls',
               'mtrack_project.rapidsms_uganda_ussd.ussd.admin',
               'mtrack_project.rapidsms_uganda_ussd.ussd.views',
               'mtrack_project.rapidsms_uganda_ussd.ussd.forms',
               'mtrack_project.rapidsms_uganda_ussd.ussd.settings',
               'mtrack_project.rapidsms_uganda_ussd.ussd.tests',
               'mtrack_project.rapidsms_uganda_ussd.ussd.tests.views_tests',
               'mtrack_project.rapidsms_uganda_ussd.ussd.tests.models_tests',
               'setup',
               'healthmodels',
               'healthmodels.tests',
               'healthmodels.urls',
               'healthmodels.admin',
               'healthmodels.views',
               'healthmodels.views.health_management',
               'healthmodels.views.forms',
               'healthmodels.migrations',
               'healthmodels.migrations.0001_initial',
               'healthmodels.models.HealthProvider',
               'healthmodels.models',
               'healthmodels.models.PatientEncounter',
               'healthmodels.models.Patient',
               'healthmodels.models.HealthId',
               'healthmodels.models.FacilityReport',
               'healthmodels.models.HealthFacility',
               'healthmodels.templatetags',
               'healthmodels.templatetags.health_facility_tree',
               'setup',
               'uganda_common.utils',
               'uganda_common.reports',
               'uganda_common',
               'uganda_common.context_processors',
               'uganda_common.models',
               'uganda_common.cache_manager',
               'uganda_common.views',
               'uganda_common.forms',
               'setup',
               'rapidsms_httprouter',
               'rapidsms_httprouter.router',
               'rapidsms_httprouter.models',
               'rapidsms_httprouter.tests',
               'rapidsms_httprouter.managers',
               'rapidsms_httprouter.urls',
               'rapidsms_httprouter.admin',
               'rapidsms_httprouter.views',
               'rapidsms_httprouter.management',
               'rapidsms_httprouter.management.commands.send_messages',
               'rapidsms_httprouter.management.commands',
               'rapidsms_httprouter.management.commands.normalizeconnections',
               'rapidsms_httprouter.migrations',
               'rapidsms_httprouter.migrations.0001_initial',
               'mtrack_project.rapidsms_alerts',
               'mtrack_project.rapidsms_alerts.alerts.utils',
               'mtrack_project.rapidsms_alerts.alerts',
               'mtrack_project.rapidsms_alerts.alerts.ajax',
               'mtrack_project.rapidsms_alerts.alerts.models',
               'mtrack_project.rapidsms_alerts.alerts.importutil',
               'mtrack_project.rapidsms_alerts.alerts.urls',
               'mtrack_project.rapidsms_alerts.alerts._prototyping',
               'mtrack_project.rapidsms_alerts.alerts.management',
               'mtrack_project.rapidsms_alerts.alerts.management.commands.alert_maintenance',
               'mtrack_project.rapidsms_alerts.alerts.management.commands',
               'mtrack_project.rapidsms_alerts.alerts.management.commands.trigger_alerts',
               'mtrack_project.rapidsms_alerts.alerts.templatetags',
               'mtrack_project.rapidsms_alerts.alerts.templatetags.alerts_tags',
               'setup',
               'script',
               'script.models',
               'script.tests',
               'script.signals',
               'script.admin',
               'script.app',
               'script.utils',
               'script.utils.outgoing',
               'script.utils.incoming',
               'script.utils.handling',
               'script.management',
               'script.management.commands',
               'script.management.commands.check_script_progress',
               'script.migrations',
               'script.migrations.0001_initial',
               'setup',
               'eav.fields',
               'eav',
               'eav.registry',
               'eav.validators',
               'eav.models',
               'eav.managers',
               'eav.admin',
               'eav.forms',
               'eav.migrations',
               'eav.migrations.0001_initial',
               'eav.tests.set_and_get',
               'eav.tests',
               'eav.tests.registry',
               'eav.tests.limiting_attributes',
               'eav.tests.models',
               'eav.tests.misc_models',
               'eav.tests.queries',
               'eav.tests.data_validation',
               'conf',
               'setup',
               'conf',
               'poll',
               'poll.models',
               'poll.tests',
               'poll.urls',
               'poll.admin',
               'poll.views',
               'poll.forms',
               'poll.app',
               'poll.extensions',
               'poll.extensions.rapidsms',
               'poll.extensions.rapidsms.contact',
               'poll.management',
               'poll.migrations',
               'poll.migrations.0003_auto__add_field_poll_response_type',
               'poll.migrations.0001_initial',
               'poll.templatetags',
               'poll.templatetags.attr',
               'mtrack_project.rapidsms_logistics',
               'mtrack_project.rapidsms_logistics.setup',
               'mtrack_project.rapidsms_logistics.logistics.reports',
               'mtrack_project.rapidsms_logistics.logistics.alerts',
               'mtrack_project.rapidsms_logistics.logistics.gviz_api',
               'mtrack_project.rapidsms_logistics.logistics.config',
               'mtrack_project.rapidsms_logistics.logistics.decorators',
               'mtrack_project.rapidsms_logistics.logistics',
               'mtrack_project.rapidsms_logistics.logistics.context_processors',
               'mtrack_project.rapidsms_logistics.logistics.util',
               'mtrack_project.rapidsms_logistics.logistics.models',
               'mtrack_project.rapidsms_logistics.logistics.view_decorators',
               'mtrack_project.rapidsms_logistics.logistics.charts',
               'mtrack_project.rapidsms_logistics.logistics.signals',
               'mtrack_project.rapidsms_logistics.logistics.loader',
               'mtrack_project.rapidsms_logistics.logistics.tables',
               'mtrack_project.rapidsms_logistics.logistics.admin',
               'mtrack_project.rapidsms_logistics.logistics.log',
               'mtrack_project.rapidsms_logistics.logistics.views',
               'mtrack_project.rapidsms_logistics.logistics.forms',
               'mtrack_project.rapidsms_logistics.logistics.errors',
               'mtrack_project.rapidsms_logistics.logistics.app',
               'mtrack_project.rapidsms_logistics.logistics.const',
               'mtrack_project.rapidsms_logistics.logistics.settings',
               'mtrack_project.rapidsms_logistics.logistics.extensions',
               'mtrack_project.rapidsms_logistics.logistics.extensions.rapidsms',
               'mtrack_project.rapidsms_logistics.logistics.extensions.rapidsms.contact',
               'mtrack_project.rapidsms_logistics.logistics.extensions.locations',
               'mtrack_project.rapidsms_logistics.logistics.extensions.locations.location',
               'mtrack_project.rapidsms_logistics.logistics.handlers',
               'mtrack_project.rapidsms_logistics.logistics.handlers.help',
               'mtrack_project.rapidsms_logistics.logistics.handlers.status',
               'mtrack_project.rapidsms_logistics.logistics.handlers.receipts',
               'mtrack_project.rapidsms_logistics.logistics.handlers.stop',
               'mtrack_project.rapidsms_logistics.logistics.urls.config',
               'mtrack_project.rapidsms_logistics.logistics.urls',
               'mtrack_project.rapidsms_logistics.logistics.urls.logistics',
               'mtrack_project.rapidsms_logistics.logistics.templatetags.logistics_report_tags',
               'mtrack_project.rapidsms_logistics.logistics.templatetags.logistics_extras',
               'mtrack_project.rapidsms_logistics.logistics.templatetags',
               'mtrack_project.rapidsms_logistics.logistics.templatetags.logistics_tags',
               'mtrack_project.rapidsms_logistics.logistics.templatetags.nav_tags',
               'mtrack_project.rapidsms_logistics.logistics.templatetags.geonav_tags',
               'mtrack_project.rapidsms_logistics.logistics.templatetags.math_tags',
               'mtrack_project.rapidsms_logistics.logistics.tests',
               'mtrack_project.rapidsms_logistics.logistics.tests.util',
               'mtrack_project.rapidsms_logistics.logistics.tests.consumption'],
 'POINTERS': {'auth.extensions.rapidsms.contact.Group': 'django.contrib.auth.models.Group',
              'auth.extensions.rapidsms.contact.Permission': 'django.contrib.auth.models.Permission',
              'auth.extensions.rapidsms.contact.User': 'django.contrib.auth.models.User',
              'auth.extensions.rapidsms.contact.models': 'django.db.models',
              'auth.models.Contact': 'rapidsms.models.Contact',
              'auth.models.Group': 'django.contrib.auth.models.Group',
              'auth.models.Permission': 'django.contrib.auth.models.Permission',
              'auth.models.User': 'django.contrib.auth.models.User',
              'auth.models.m2m_changed': 'django.db.models.signals.m2m_changed',
              'auth.tests.Contact': 'rapidsms.models.Contact',
              'auth.tests.TestCase': 'django.test.TestCase',
              'auth.tests.User': 'django.contrib.auth.models.User',
              'auth.urls.*': 'django.conf.urls.defaults.*',
              'auth.urls.login_required': 'django.contrib.auth.decorators.login_required',
              'auth.urls.views': 'auth..views',
              'auth.views.Backend': 'rapidsms.models.Backend',
              'auth.views.BulkRegistrationForm': 'rapidsms.contrib.registration.forms.BulkRegistrationForm',
              'auth.views.Connection': 'rapidsms.models.Connection',
              'auth.views.Contact': 'rapidsms.models.Contact',
              'auth.views.ContactForm': 'rapidsms.forms.ContactForm',
              'auth.views.ContactTable': 'rapidsms.contrib.registration.tables.ContactTable',
              'auth.views.HttpResponseRedirect': 'django.http.HttpResponseRedirect',
              'auth.views.RequestContext': 'django.template.RequestContext',
              'auth.views.csv': 'csv',
              'auth.views.get_object_or_404': 'django.shortcuts.get_object_or_404',
              'auth.views.render_to_response': 'django.shortcuts.render_to_response',
              'auth.views.reverse': 'django.core.urlresolvers.reverse',
              'auth.views.transaction': 'django.db.transaction',
              'conf.os': 'os',
              'conf.settings': 'settings',
              'conf.setup_environ': 'django.core.management.setup_environ',
              'conf.sys': 'sys',
              'contact.admin.Flag': 'contact.models.Flag',
              'contact.admin.admin': 'django.contrib.admin',
              'contact.extensions.rapidsms.contact.ContactBase': 'rapidsms.models.ContactBase',
              'contact.extensions.rapidsms.contact.models': 'django.db.models',
              'contact.forms.ActionForm': 'generic.forms.ActionForm',
              'contact.forms.Connection': 'rapidsms.models.Connection',
              'contact.forms.Contact': 'rapidsms.models.Contact',
              'contact.forms.Context': 'django.template.context.Context',
              'contact.forms.ErrorList': 'django.forms.util.ErrorList',
              'contact.forms.FilterForm': 'generic.forms.FilterForm',
              'contact.forms.Flag': 'contact.models.Flag',
              'contact.forms.Group': 'django.contrib.auth.models.Group',
              'contact.forms.Location': 'rapidsms.contrib.locations.models.Location',
              'contact.forms.MassText': 'contact.models.MassText',
              'contact.forms.Message': 'rapidsms_httprouter.models.Message',
              'contact.forms.OutgoingMessage': 'rapidsms.messages.outgoing.OutgoingMessage',
              'contact.forms.Page': 'django.core.paginator.Page',
              'contact.forms.Paginator': 'django.core.paginator.Paginator',
              'contact.forms.Q': 'django.db.models.Q',
              'contact.forms.SMSInput': 'uganda_common.forms.SMSInput',
              'contact.forms.Site': 'django.contrib.sites.models.Site',
              'contact.forms.Widget': 'django.forms.widgets.Widget',
              'contact.forms.datetime': 'datetime',
              'contact.forms.forms': 'django.forms',
              'contact.forms.get_router': 'rapidsms_httprouter.router.get_router',
              'contact.forms.get_template': 'django.template.loader.get_template',
              'contact.forms.settings': 'django.conf.settings',
              'contact.forms.start_sending_mass_messages': 'rapidsms_httprouter.router.start_sending_mass_messages',
              'contact.forms.stop_sending_mass_messages': 'rapidsms_httprouter.router.stop_sending_mass_messages',
              'contact.migrations.0001_initial.SchemaMigration': 'south.v2.SchemaMigration',
              'contact.migrations.0001_initial.datetime': 'datetime',
              'contact.migrations.0001_initial.db': 'south.db.db',
              'contact.migrations.0001_initial.models': 'django.db.models',
              'contact.models.BulkInsertManager': 'rapidsms_httprouter.managers.BulkInsertManager',
              'contact.models.Connection': 'rapidsms.models.Connection',
              'contact.models.Contact': 'rapidsms.models.Contact',
              'contact.models.CurrentSiteManager': 'django.contrib.sites.managers.CurrentSiteManager',
              'contact.models.Message': 'rapidsms_httprouter.models.Message',
              'contact.models.Site': 'django.contrib.sites.models.Site',
              'contact.models.User': 'django.contrib.auth.models.User',
              'contact.models.models': 'django.db.models',
              'contact.templatetags.extra_tags.MessageFlag': 'contact.models.MessageFlag',
              'contact.templatetags.extra_tags.template': 'django.template',
              'contact.urls.*': 'django.conf.urls.defaults.*',
              'contact.urls.Contact': 'rapidsms.models.Contact',
              'contact.urls.DistictFilterMessageForm': 'contact.forms.DistictFilterMessageForm',
              'contact.urls.FilterGroupsForm': 'contact.forms.FilterGroupsForm',
              'contact.urls.FlagMessageForm': 'contact.forms.FlagMessageForm',
              'contact.urls.FlaggedForm': 'contact.forms.FlaggedForm',
              'contact.urls.FreeSearchForm': 'contact.forms.FreeSearchForm',
              'contact.urls.FreeSearchTextForm': 'contact.forms.FreeSearchTextForm',
              'contact.urls.HandledByForm': 'contact.forms.HandledByForm',
              'contact.urls.MassText': 'contact.models.MassText',
              'contact.urls.MassTextForm': 'contact.forms.MassTextForm',
              'contact.urls.Message': 'rapidsms_httprouter.models.Message',
              'contact.urls.ReplyTextForm': 'contact.forms.ReplyTextForm',
              'contact.urls.SimpleSorter': 'generic.sorters.SimpleSorter',
              'contact.urls.TupleSorter': 'generic.sorters.TupleSorter',
              'contact.urls.add_contact': 'contact.views.add_contact',
              'contact.urls.generic': 'generic.views.generic',
              'contact.urls.get_mass_messages': 'contact.utils.get_mass_messages',
              'contact.urls.get_messages': 'contact.utils.get_messages',
              'contact.urls.login_required': 'django.contrib.auth.decorators.login_required',
              'contact.urls.new_contact': 'contact.views.new_contact',
              'contact.urls.view_message_history': 'contact.views.view_message_history',
              'contact.utils.MassText': 'contact.models.MassText',
              'contact.utils.Message': 'rapidsms_httprouter.models.Message',
              'contact.utils.Poll': 'poll.models.Poll',
              'contact.views.Connection': 'rapidsms.models.Connection',
              'contact.views.Contact': 'rapidsms.models.Contact',
              'contact.views.DIRECTION_CHOICES': 'rapidsms_httprouter.models.DIRECTION_CHOICES',
              'contact.views.ErrorList': 'django.forms.util.ErrorList',
              'contact.views.FreeSearchForm': 'contact.forms.FreeSearchForm',
              'contact.views.Http404': 'django.http.Http404',
              'contact.views.HttpResponseRedirect': 'django.http.HttpResponseRedirect',
              'contact.views.InvalidPage': 'django.core.paginator.InvalidPage',
              'contact.views.Message': 'rapidsms_httprouter.models.Message',
              'contact.views.NewContactForm': 'contact.forms.NewContactForm',
              'contact.views.OutgoingMessage': 'rapidsms.messages.outgoing.OutgoingMessage',
              'contact.views.Paginator': 'django.core.paginator.Paginator',
              'contact.views.ReplyForm': 'contact.forms.ReplyForm',
              'contact.views.RequestContext': 'django.template.RequestContext',
              'contact.views.STATUS_CHOICES': 'rapidsms_httprouter.models.STATUS_CHOICES',
              'contact.views.forms': 'contact..forms',
              'contact.views.get_object_or_404': 'django.shortcuts.get_object_or_404',
              'contact.views.get_router': 'rapidsms_httprouter.router.get_router',
              'contact.views.login_required': 'django.contrib.auth.decorators.login_required',
              'contact.views.redirect': 'django.shortcuts.redirect',
              'contact.views.render_to_response': 'django.shortcuts.render_to_response',
              'eav.Registry': 'eav.registry.Registry',
              'eav.admin.Attribute': 'eav.models.Attribute',
              'eav.admin.BaseInlineFormSet': 'django.forms.models.BaseInlineFormSet',
              'eav.admin.EnumGroup': 'eav.models.EnumGroup',
              'eav.admin.EnumValue': 'eav.models.EnumValue',
              'eav.admin.InlineModelAdmin': 'django.contrib.admin.options.InlineModelAdmin',
              'eav.admin.ModelAdmin': 'django.contrib.admin.options.ModelAdmin',
              'eav.admin.StackedInline': 'django.contrib.admin.options.StackedInline',
              'eav.admin.Value': 'eav.models.Value',
              'eav.admin.admin': 'django.contrib.admin',
              'eav.admin.mark_safe': 'django.utils.safestring.mark_safe',
              'eav.fields.Attribute': 'eav.models.Attribute',
              'eav.fields.ValidationError': 'django.core.exceptions.ValidationError',
              'eav.fields._': 'django.utils.translation.ugettext_lazy',
              'eav.fields.add_introspection_rules': 'south.modelsinspector.add_introspection_rules',
              'eav.fields.models': 'django.db.models',
              'eav.fields.re': 're',
              'eav.forms.AdminSplitDateTime': 'django.contrib.admin.widgets.AdminSplitDateTime',
              'eav.forms.BooleanField': 'django.forms.BooleanField',
              'eav.forms.CharField': 'django.forms.CharField',
              'eav.forms.ChoiceField': 'django.forms.ChoiceField',
              'eav.forms.DateTimeField': 'django.forms.DateTimeField',
              'eav.forms.FloatField': 'django.forms.FloatField',
              'eav.forms.IntegerField': 'django.forms.IntegerField',
              'eav.forms.ModelForm': 'django.forms.ModelForm',
              'eav.forms.ValidationError': 'django.forms.ValidationError',
              'eav.forms._': 'django.utils.translation.ugettext_lazy',
              'eav.forms.deepcopy': 'copy.deepcopy',
              'eav.managers.Attribute': 'eav.models.Attribute',
              'eav.managers.Value': 'eav.models.Value',
              'eav.managers.models': 'django.db.models',
              'eav.managers.wraps': 'functools.wraps',
              'eav.migrations.0001_initial.SchemaMigration': 'south.v2.SchemaMigration',
              'eav.migrations.0001_initial.datetime': 'datetime',
              'eav.migrations.0001_initial.db': 'south.db.db',
              'eav.migrations.0001_initial.models': 'django.db.models',
              'eav.models.*': 'eav.validators.*',
              'eav.models.ContentType': 'django.contrib.contenttypes.models.ContentType',
              'eav.models.CurrentSiteManager': 'django.contrib.sites.managers.CurrentSiteManager',
              'eav.models.EavDatatypeField': 'eav.fields.EavDatatypeField',
              'eav.models.EavSlugField': 'eav.fields.EavSlugField',
              'eav.models.Encounter': 'eav.tests.models.Encounter',
              'eav.models.Patient': 'eav.tests.models.Patient',
              'eav.models.Site': 'django.contrib.sites.models.Site',
              'eav.models.ValidationError': 'django.core.exceptions.ValidationError',
              'eav.models._': 'django.utils.translation.ugettext_lazy',
              'eav.models.datetime': 'datetime.datetime',
              'eav.models.generic': 'django.contrib.contenttypes.generic',
              'eav.models.models': 'django.db.models',
              'eav.models.settings': 'django.conf.settings',
              'eav.registry.Attribute': 'eav.models.Attribute',
              'eav.registry.DatabaseError': 'django.db.utils.DatabaseError',
              'eav.registry.Entity': 'eav.models.Entity',
              'eav.registry.EntityManager': 'eav.managers.EntityManager',
              'eav.registry.Value': 'eav.models.Value',
              'eav.registry.generic': 'django.contrib.contenttypes.generic',
              'eav.registry.post_init': 'django.db.models.signals.post_init',
              'eav.registry.post_save': 'django.db.models.signals.post_save',
              'eav.registry.pre_init': 'django.db.models.signals.pre_init',
              'eav.registry.pre_save': 'django.db.models.signals.pre_save',
              'eav.tests.*': 'eav.tests.queries.*',
              'eav.tests.data_validation.Attribute': 'eav.tests.models.Attribute',
              'eav.tests.data_validation.EavConfig': 'eav.tests.registry.EavConfig',
              'eav.tests.data_validation.Encounter': 'eav.tests.models.Encounter',
              'eav.tests.data_validation.EnumGroup': 'eav.tests.models.EnumGroup',
              'eav.tests.data_validation.EnumValue': 'eav.tests.models.EnumValue',
              'eav.tests.data_validation.Patient': 'eav.tests.models.Patient',
              'eav.tests.data_validation.TestCase': 'django.test.TestCase',
              'eav.tests.data_validation.User': 'django.contrib.auth.models.User',
              'eav.tests.data_validation.ValidationError': 'django.core.exceptions.ValidationError',
              'eav.tests.data_validation.Value': 'eav.tests.models.Value',
              'eav.tests.data_validation.date': 'datetime.date',
              'eav.tests.data_validation.datetime': 'datetime.datetime',
              'eav.tests.data_validation.eav': 'eav',
              'eav.tests.limiting_attributes.Attribute': 'eav.tests.models.Attribute',
              'eav.tests.limiting_attributes.EavConfig': 'eav.tests.registry.EavConfig',
              'eav.tests.limiting_attributes.Encounter': 'eav.tests.models.Encounter',
              'eav.tests.limiting_attributes.Patient': 'eav.tests.models.Patient',
              'eav.tests.limiting_attributes.TestCase': 'django.test.TestCase',
              'eav.tests.limiting_attributes.Value': 'eav.tests.models.Value',
              'eav.tests.limiting_attributes.eav': 'eav',
              'eav.tests.misc_models.Attribute': 'eav.tests.models.Attribute',
              'eav.tests.misc_models.EnumGroup': 'eav.tests.models.EnumGroup',
              'eav.tests.misc_models.Patient': 'eav.tests.models.Patient',
              'eav.tests.misc_models.TestCase': 'django.test.TestCase',
              'eav.tests.misc_models.Value': 'eav.tests.models.Value',
              'eav.tests.misc_models.eav': 'eav',
              'eav.tests.models.models': 'django.db.models',
              'eav.tests.queries.Attribute': 'eav.tests.models.Attribute',
              'eav.tests.queries.EavConfig': 'eav.tests.registry.EavConfig',
              'eav.tests.queries.Encounter': 'eav.tests.models.Encounter',
              'eav.tests.queries.EnumGroup': 'eav.tests.models.EnumGroup',
              'eav.tests.queries.EnumValue': 'eav.tests.models.EnumValue',
              'eav.tests.queries.Patient': 'eav.tests.models.Patient',
              'eav.tests.queries.Q': 'django.db.models.Q',
              'eav.tests.queries.TestCase': 'django.test.TestCase',
              'eav.tests.queries.User': 'django.contrib.auth.models.User',
              'eav.tests.queries.Value': 'eav.tests.models.Value',
              'eav.tests.queries.eav': 'eav',
              'eav.tests.registry.Attribute': 'eav.tests.models.Attribute',
              'eav.tests.registry.EavConfig': 'eav.tests.registry.EavConfig',
              'eav.tests.registry.Encounter': 'eav.tests.models.Encounter',
              'eav.tests.registry.EntityManager': 'managers.EntityManager',
              'eav.tests.registry.Patient': 'eav.tests.models.Patient',
              'eav.tests.registry.Registry': 'eav.tests.registry.Registry',
              'eav.tests.registry.TestCase': 'django.test.TestCase',
              'eav.tests.registry.eav': 'eav',
              'eav.tests.set_and_get.EavConfig': 'eav.tests.registry.EavConfig',
              'eav.tests.set_and_get.Encounter': 'eav.tests.models.Encounter',
              'eav.tests.set_and_get.EntityManager': 'managers.EntityManager',
              'eav.tests.set_and_get.Patient': 'eav.tests.models.Patient',
              'eav.tests.set_and_get.Registry': 'eav.tests.registry.Registry',
              'eav.tests.set_and_get.TestCase': 'django.test.TestCase',
              'eav.tests.set_and_get.eav': 'eav',
              'eav.validators.EnumValue': 'eav.models.EnumValue',
              'eav.validators.ValidationError': 'django.core.exceptions.ValidationError',
              'eav.validators._': 'django.utils.translation.ugettext_lazy',
              'eav.validators.date': 'datetime.date',
              'eav.validators.datetime': 'datetime.datetime',
              'eav.validators.models': 'django.db.models',
              'generic.admin.*': 'generic.models.*',
              'generic.admin.admin': 'django.contrib.admin',
              'generic.context_processors.settings': 'django.conf.settings',
              'generic.forms.Module': 'generic.models.Module',
              'generic.forms.StaticModuleContent': 'generic.models.StaticModuleContent',
              'generic.forms.ValidationError': 'django.forms.ValidationError',
              'generic.forms.datetime': 'datetime',
              'generic.forms.forms': 'django.forms',
              'generic.migrations.0001_initial.SchemaMigration': 'south.v2.SchemaMigration',
              'generic.migrations.0001_initial.datetime': 'datetime',
              'generic.migrations.0001_initial.db': 'south.db.db',
              'generic.migrations.0001_initial.models': 'django.db.models',
              'generic.models.User': 'django.contrib.auth.models.User',
              'generic.models.models': 'django.db.models',
              'generic.models.reverse': 'django.core.urlresolvers.reverse',
              'generic.reporting.forms.datetime': 'datetime',
              'generic.reporting.forms.forms': 'django.forms',
              'generic.reporting.reports.DateRangeForm': 'generic.reporting.forms.DateRangeForm',
              'generic.reporting.reports.datetime': 'datetime',
              'generic.reporting.reports.time': 'time',
              'generic.reporting.views.*': 'django.conf.urls.defaults.*',
              'generic.reporting.views.BasicDateGetter': 'generic.reporting.reports.BasicDateGetter',
              'generic.reporting.views.Column': 'generic.reporting.reports.Column',
              'generic.reporting.views.HttpResponse': 'django.http.HttpResponse',
              'generic.reporting.views.Location': 'rapidsms.contrib.locations.models.Location',
              'generic.reporting.views.TemplateResponseMixin': 'django.views.generic.base.TemplateResponseMixin',
              'generic.reporting.views.TemplateView': 'django.views.generic.base.TemplateView',
              'generic.reporting.views.View': 'django.views.generic.base.View',
              'generic.reporting.views.datetime': 'datetime',
              'generic.reporting.views.get_object_or_404': 'django.shortcuts.get_object_or_404',
              'generic.reporting.views.simplejson': 'django.utils.simplejson',
              'generic.reporting.views.time': 'time',
              'generic.reports.flatten_list': 'generic.utils.flatten_list',
              'generic.reports.set_default_dates': 'generic.utils.set_default_dates',
              'generic.templatetags.reportdict.template': 'django.template',
              'generic.templatetags.timeslider_tags.datetime': 'datetime',
              'generic.templatetags.timeslider_tags.template': 'django.template',
              'generic.urls.*': 'generic.views.*',
              'generic.utils.*': 'generic.models.*',
              'generic.utils.DateRangeForm': 'generic.forms.DateRangeForm',
              'generic.utils.datetime': 'datetime',
              'generic.utils.time': 'time',
              'generic.views.Count': 'django.db.models.Count',
              'generic.views.Dashboard': 'generic.models.Dashboard',
              'generic.views.EmptyPage': 'django.core.paginator.EmptyPage',
              'generic.views.Http404': 'django.http.Http404',
              'generic.views.HttpResponse': 'django.http.HttpResponse',
              'generic.views.HttpResponseRedirect': 'django.http.HttpResponseRedirect',
              'generic.views.HttpResponseServerError': 'django.http.HttpResponseServerError',
              'generic.views.InvalidPage': 'django.core.paginator.InvalidPage',
              'generic.views.Module': 'generic.models.Module',
              'generic.views.ModuleParams': 'generic.models.ModuleParams',
              'generic.views.Paginator': 'django.core.paginator.Paginator',
              'generic.views.RawQuerySet': 'django.db.models.query.RawQuerySet',
              'generic.views.RequestContext': 'django.template.RequestContext',
              'generic.views.StaticModuleContent': 'generic.models.StaticModuleContent',
              'generic.views.User': 'django.contrib.auth.models.User',
              'generic.views.cache_control': 'django.views.decorators.cache.cache_control',
              'generic.views.copy_dashboard': 'generic.utils.copy_dashboard',
              'generic.views.datetime': 'datetime',
              'generic.views.forms': 'django.forms',
              'generic.views.get_dates': 'generic.utils.get_dates',
              'generic.views.get_object_or_404': 'django.shortcuts.get_object_or_404',
              'generic.views.redirect': 'django.shortcuts.redirect',
              'generic.views.render_to_response': 'django.shortcuts.render_to_response',
              'generic.views.set_default_dates': 'generic.utils.set_default_dates',
              'generic.views.time': 'time',
              'healthmodels.admin.*': 'healthmodels.models.*',
              'healthmodels.admin.admin': 'django.contrib.admin',
              'healthmodels.migrations.0001_initial.SchemaMigration': 'south.v2.SchemaMigration',
              'healthmodels.migrations.0001_initial.datetime': 'datetime',
              'healthmodels.migrations.0001_initial.db': 'south.db.db',
              'healthmodels.migrations.0001_initial.models': 'django.db.models',
              'healthmodels.models.FacilityReport': 'healthmodels.models.FacilityReport.FacilityReport',
              'healthmodels.models.FacilityReport.Contact': 'rapidsms.models.Contact',
              'healthmodels.models.FacilityReport.ExtensibleModelBase': 'rapidsms.models.ExtensibleModelBase',
              'healthmodels.models.FacilityReport.HealthFacility': 'healthmodels.models.HealthFacility.HealthFacility',
              'healthmodels.models.FacilityReport._': 'django.utils.translation.ugettext_lazy',
              'healthmodels.models.FacilityReport.models': 'django.db.models',
              'healthmodels.models.HealthFacility': 'healthmodels.models.HealthFacility.HealthFacility',
              'healthmodels.models.HealthFacility.ContentType': 'django.contrib.contenttypes.models.ContentType',
              'healthmodels.models.HealthFacility.ExtensibleModelBase': 'rapidsms.models.ExtensibleModelBase',
              'healthmodels.models.HealthFacility.Location': 'rapidsms.contrib.locations.models.Location',
              'healthmodels.models.HealthFacility.Point': 'rapidsms.contrib.locations.models.Point',
              'healthmodels.models.HealthFacility._': 'django.utils.translation.ugettext_lazy',
              'healthmodels.models.HealthFacility.choice': 'random.choice',
              'healthmodels.models.HealthFacility.generic': 'django.contrib.contenttypes.generic',
              'healthmodels.models.HealthFacility.models': 'django.db.models',
              'healthmodels.models.HealthFacilityType': 'healthmodels.models.HealthFacility.HealthFacilityType',
              'healthmodels.models.HealthId': 'healthmodels.models.HealthId.HealthId',
              'healthmodels.models.HealthId.Contact': 'rapidsms.models.Contact',
              'healthmodels.models.HealthId.ExtensibleModelBase': 'rapidsms.models.ExtensibleModelBase',
              'healthmodels.models.HealthId._': 'django.utils.translation.ugettext_lazy',
              'healthmodels.models.HealthId.models': 'django.db.models',
              'healthmodels.models.HealthId.ugettext': 'django.utils.translation.ugettext',
              'healthmodels.models.HealthProvider': 'healthmodels.models.HealthProvider.HealthProvider',
              'healthmodels.models.HealthProvider.Contact': 'rapidsms.models.Contact',
              'healthmodels.models.HealthProvider.ExtensibleModelBase': 'rapidsms.models.ExtensibleModelBase',
              'healthmodels.models.HealthProvider.Location': 'rapidsms.contrib.locations.models.Location',
              'healthmodels.models.HealthProvider._': 'django.utils.translation.ugettext_lazy',
              'healthmodels.models.HealthProvider.models': 'django.db.models',
              'healthmodels.models.Patient': 'healthmodels.models.Patient.Patient',
              'healthmodels.models.Patient.Contact': 'rapidsms.models.Contact',
              'healthmodels.models.Patient.ExtensibleModelBase': 'rapidsms.models.ExtensibleModelBase',
              'healthmodels.models.Patient.Location': 'rapidsms.contrib.locations.models.Location',
              'healthmodels.models.Patient._': 'django.utils.translation.ugettext_lazy',
              'healthmodels.models.Patient.datetime': 'datetime',
              'healthmodels.models.Patient.models': 'django.db.models',
              'healthmodels.models.PatientEncounter': 'healthmodels.models.PatientEncounter.PatientEncounter',
              'healthmodels.models.PatientEncounter.Contact': 'rapidsms.models.Contact',
              'healthmodels.models.PatientEncounter.ExtensibleModelBase': 'rapidsms.models.ExtensibleModelBase',
              'healthmodels.models.PatientEncounter.Patient': 'healthmodels.models.Patient.Patient',
              'healthmodels.models.PatientEncounter._': 'django.utils.translation.ugettext_lazy',
              'healthmodels.models.PatientEncounter.models': 'django.db.models',
              'healthmodels.templatetags.health_facility_tree.mark_safe': 'django.utils.safestring.mark_safe',
              'healthmodels.templatetags.health_facility_tree.template': 'django.template',
              'healthmodels.tests.TestCase': 'django.test.TestCase',
              'healthmodels.urls.*': 'healthmodels.views.health_management.*',
              'healthmodels.views.forms.HealthFacility': 'healthmodels.models.HealthFacility',
              'healthmodels.views.forms.HealthProvider': 'healthmodels.models.HealthProvider',
              'healthmodels.views.forms.Point': 'rapidsms.contrib.locations.models.Point',
              'healthmodels.views.forms.forms': 'django.forms',
              'healthmodels.views.forms.mark_safe': 'django.utils.safestring.mark_safe',
              'healthmodels.views.health_management.*': 'healthmodels.views.forms.*',
              'healthmodels.views.health_management.HealthFacility': 'healthmodels.models.HealthFacility.HealthFacility',
              'healthmodels.views.health_management.HealthProvider': 'healthmodels.models.HealthProvider.HealthProvider',
              'healthmodels.views.health_management.HttpResponse': 'django.http.HttpResponse',
              'healthmodels.views.health_management.HttpResponseRedirect': 'django.http.HttpResponseRedirect',
              'healthmodels.views.health_management.MultiValueDictKeyError': 'django.utils.datastructures.MultiValueDictKeyError',
              'healthmodels.views.health_management.RequestContext': 'django.template.RequestContext',
              'healthmodels.views.health_management.cache_control': 'django.views.decorators.cache.cache_control',
              'healthmodels.views.health_management.formset_factory': 'django.forms.formsets.formset_factory',
              'healthmodels.views.health_management.get_object_or_404': 'django.shortcuts.get_object_or_404',
              'healthmodels.views.health_management.modelformset_factory': 'django.forms.models.modelformset_factory',
              'healthmodels.views.health_management.render_to_response': 'django.shortcuts.render_to_response',
              'healthmodels.views.health_management.settings': 'django.conf.settings',
              'mtrack_project.email_reports_src.email_reports.admin.*': 'email_reports.models.*',
              'mtrack_project.email_reports_src.email_reports.admin.admin': 'django.contrib.admin',
              'mtrack_project.email_reports_src.email_reports.models.SCHEDULABLE_REPORTS': 'email_reports.schedule.config.SCHEDULABLE_REPORTS',
              'mtrack_project.email_reports_src.email_reports.models.Site': 'django.contrib.sites.models.Site',
              'mtrack_project.email_reports_src.email_reports.models.UnicodeMixIn': 'dimagi.utils.mixins.UnicodeMixIn',
              'mtrack_project.email_reports_src.email_reports.models.User': 'django.contrib.auth.models.User',
              'mtrack_project.email_reports_src.email_reports.models.html2text': 'email_reports.schedule.html2text.html2text',
              'mtrack_project.email_reports_src.email_reports.models.json': 'json',
              'mtrack_project.email_reports_src.email_reports.models.models': 'django.db.models',
              'mtrack_project.email_reports_src.email_reports.models.send_HTML_email': 'dimagi.utils.django.email.send_HTML_email',
              'mtrack_project.email_reports_src.email_reports.schedule.HttpRequest': 'django.http.HttpRequest',
              'mtrack_project.email_reports_src.email_reports.schedule.ReportParser': 'email_reports.schedule.parsers.ReportParser',
              'mtrack_project.email_reports_src.email_reports.schedule.RequestProcessor': 'email_reports.schedule.request.RequestProcessor',
              'mtrack_project.email_reports_src.email_reports.schedule.Site': 'django.contrib.sites.models.Site',
              'mtrack_project.email_reports_src.email_reports.schedule.config.ReportSchedule': 'email_reports.schedule.ReportSchedule',
              'mtrack_project.email_reports_src.email_reports.schedule.config.aggregate': 'logistics.views.aggregate',
              'mtrack_project.email_reports_src.email_reports.schedule.config.reporting': 'logistics.views.reporting',
              'mtrack_project.email_reports_src.email_reports.schedule.html2text.HTMLParser': 'HTMLParser',
              'mtrack_project.email_reports_src.email_reports.schedule.html2text.StringIO': 'StringIO',
              'mtrack_project.email_reports_src.email_reports.schedule.html2text.codecs': 'codecs',
              'mtrack_project.email_reports_src.email_reports.schedule.html2text.enc': 'feedparser._getCharacterEncoding',
              'mtrack_project.email_reports_src.email_reports.schedule.html2text.htmlentitydefs': 'htmlentitydefs',
              'mtrack_project.email_reports_src.email_reports.schedule.html2text.re': 're',
              'mtrack_project.email_reports_src.email_reports.schedule.html2text.sys': 'sys',
              'mtrack_project.email_reports_src.email_reports.schedule.html2text.types': 'types',
              'mtrack_project.email_reports_src.email_reports.schedule.html2text.urllib': 'urllib',
              'mtrack_project.email_reports_src.email_reports.schedule.html2text.urlparse': 'urlparse',
              'mtrack_project.email_reports_src.email_reports.schedule.html2text.wrap': 'textwrap.wrap',
              'mtrack_project.email_reports_src.email_reports.schedule.parsers.HTMLParser': 'HTMLParser',
              'mtrack_project.email_reports_src.email_reports.schedule.render_to_string': 'django.template.loader.render_to_string',
              'mtrack_project.email_reports_src.email_reports.tasks.DailyReportSubscription': 'email_reports.models.DailyReportSubscription',
              'mtrack_project.email_reports_src.email_reports.tasks.WeeklyReportSubscription': 'email_reports.models.WeeklyReportSubscription',
              'mtrack_project.email_reports_src.email_reports.tasks.crontab': 'celery.schedules.crontab',
              'mtrack_project.email_reports_src.email_reports.tasks.datetime': 'datetime.datetime',
              'mtrack_project.email_reports_src.email_reports.tasks.periodic_task': 'celery.decorators.periodic_task',
              'mtrack_project.email_reports_src.email_reports.templatetags.report_tags.calendar': 'calendar',
              'mtrack_project.email_reports_src.email_reports.templatetags.report_tags.datetime': 'datetime.datetime',
              'mtrack_project.email_reports_src.email_reports.templatetags.report_tags.itertools': 'itertools',
              'mtrack_project.email_reports_src.email_reports.templatetags.report_tags.json': 'json',
              'mtrack_project.email_reports_src.email_reports.templatetags.report_tags.render_to_string': 'django.template.loader.render_to_string',
              'mtrack_project.email_reports_src.email_reports.templatetags.report_tags.template': 'django.template',
              'mtrack_project.email_reports_src.email_reports.templatetags.report_tags.timedelta': 'datetime.timedelta',
              'mtrack_project.email_reports_src.email_reports.tests.*': 'email_reports.tasks.*',
              'mtrack_project.email_reports_src.email_reports.tests.TestScript': 'rapidsms.tests.scripted.TestScript',
              'mtrack_project.email_reports_src.email_reports.urls.*': 'django.conf.urls.defaults.*',
              'mtrack_project.email_reports_src.email_reports.views.DailyReportSubscription': 'email_reports.models.DailyReportSubscription',
              'mtrack_project.email_reports_src.email_reports.views.HttpResponse': 'django.http.HttpResponse',
              'mtrack_project.email_reports_src.email_reports.views.HttpResponseRedirect': 'django.http.HttpResponseRedirect',
              'mtrack_project.email_reports_src.email_reports.views.Location': 'rapidsms.contrib.locations.models.Location',
              'mtrack_project.email_reports_src.email_reports.views.ReportSubscription': 'email_reports.models.ReportSubscription',
              'mtrack_project.email_reports_src.email_reports.views.RequestContext': 'django.template.RequestContext',
              'mtrack_project.email_reports_src.email_reports.views.SCHEDULABLE_REPORTS': 'email_reports.schedule.config.SCHEDULABLE_REPORTS',
              'mtrack_project.email_reports_src.email_reports.views.User': 'django.contrib.auth.models.User',
              'mtrack_project.email_reports_src.email_reports.views.WeeklyReportSubscription': 'email_reports.models.WeeklyReportSubscription',
              'mtrack_project.email_reports_src.email_reports.views.calendar': 'calendar',
              'mtrack_project.email_reports_src.email_reports.views.login_required': 'django.contrib.auth.decorators.login_required',
              'mtrack_project.email_reports_src.email_reports.views.messages': 'django.contrib.messages',
              'mtrack_project.email_reports_src.email_reports.views.render_to_response': 'dimagi.utils.web.render_to_response',
              'mtrack_project.email_reports_src.email_reports.views.require_POST': 'django.views.decorators.http.require_POST',
              'mtrack_project.email_reports_src.email_reports.views.reverse': 'django.core.urlresolvers.reverse',
              'mtrack_project.manage.execute_manager': 'django.core.management.execute_manager',
              'mtrack_project.manage.os': 'os',
              'mtrack_project.manage.settings': 'mtrack_project.settings',
              'mtrack_project.manage.sys': 'sys',
              'mtrack_project.rapidsms_alerts.alerts._prototyping.Alert': 'alerts.Alert',
              'mtrack_project.rapidsms_alerts.alerts._prototyping.Contact': 'rapidsms.models.Contact',
              'mtrack_project.rapidsms_alerts.alerts._prototyping.Location': 'rapidsms.contrib.locations.models.Location',
              'mtrack_project.rapidsms_alerts.alerts._prototyping.Notification': 'alerts.models.Notification',
              'mtrack_project.rapidsms_alerts.alerts._prototyping.NotificationComment': 'alerts.models.NotificationComment',
              'mtrack_project.rapidsms_alerts.alerts._prototyping.NotificationType': 'alerts.models.NotificationType',
              'mtrack_project.rapidsms_alerts.alerts._prototyping.User': 'django.contrib.auth.models.User',
              'mtrack_project.rapidsms_alerts.alerts._prototyping.datetime': 'datetime.datetime',
              'mtrack_project.rapidsms_alerts.alerts._prototyping.timedelta': 'datetime.timedelta',
              'mtrack_project.rapidsms_alerts.alerts._prototyping.total_attribute_value': 'cvs.utils.total_attribute_value',
              'mtrack_project.rapidsms_alerts.alerts.ajax.HttpResponse': 'django.http.HttpResponse',
              'mtrack_project.rapidsms_alerts.alerts.ajax.HttpResponseNotFound': 'django.http.HttpResponseNotFound',
              'mtrack_project.rapidsms_alerts.alerts.ajax.HttpResponseRedirect': 'django.http.HttpResponseRedirect',
              'mtrack_project.rapidsms_alerts.alerts.ajax.Notification': 'mtrack_project.rapidsms_alerts.alerts.models.Notification',
              'mtrack_project.rapidsms_alerts.alerts.ajax.NotificationComment': 'mtrack_project.rapidsms_alerts.alerts.models.NotificationComment',
              'mtrack_project.rapidsms_alerts.alerts.ajax.SuspiciousOperation': 'django.core.exceptions.SuspiciousOperation',
              'mtrack_project.rapidsms_alerts.alerts.ajax.get_object_or_404': 'django.shortcuts.get_object_or_404',
              'mtrack_project.rapidsms_alerts.alerts.ajax.json': 'json',
              'mtrack_project.rapidsms_alerts.alerts.ajax.redirect': 'django.shortcuts.redirect',
              'mtrack_project.rapidsms_alerts.alerts.ajax.render_to_response': 'django.shortcuts.render_to_response',
              'mtrack_project.rapidsms_alerts.alerts.ajax.user_name': 'mtrack_project.rapidsms_alerts.alerts.models.user_name',
              'mtrack_project.rapidsms_alerts.alerts.ajax.utils': 'mtrack_project.rapidsms_alerts.alerts.utils',
              'mtrack_project.rapidsms_alerts.alerts.importutil.try_import': 'rapidsms.utils.modules.try_import',
              'mtrack_project.rapidsms_alerts.alerts.management.commands.alert_maintenance.BaseCommand': 'django.core.management.base.BaseCommand',
              'mtrack_project.rapidsms_alerts.alerts.management.commands.alert_maintenance.CommandError': 'django.core.management.base.CommandError',
              'mtrack_project.rapidsms_alerts.alerts.management.commands.alert_maintenance.auto_escalate': 'alerts.utils.auto_escalate',
              'mtrack_project.rapidsms_alerts.alerts.management.commands.alert_maintenance.reconcile_users': 'alerts.utils.reconcile_users',
              'mtrack_project.rapidsms_alerts.alerts.management.commands.trigger_alerts.BaseCommand': 'django.core.management.base.BaseCommand',
              'mtrack_project.rapidsms_alerts.alerts.management.commands.trigger_alerts.CommandError': 'django.core.management.base.CommandError',
              'mtrack_project.rapidsms_alerts.alerts.management.commands.trigger_alerts.trigger_notifications': 'alerts.utils.trigger_notifications',
              'mtrack_project.rapidsms_alerts.alerts.models.Location': 'rapidsms.contrib.locations.models.Location',
              'mtrack_project.rapidsms_alerts.alerts.models.User': 'django.contrib.auth.models.User',
              'mtrack_project.rapidsms_alerts.alerts.models.datetime': 'datetime.datetime',
              'mtrack_project.rapidsms_alerts.alerts.models.dynamic_import': 'alerts.importutil.dynamic_import',
              'mtrack_project.rapidsms_alerts.alerts.models.format_date': 'django.utils.dateformat.format',
              'mtrack_project.rapidsms_alerts.alerts.models.models': 'django.db.models',
              'mtrack_project.rapidsms_alerts.alerts.models.settings': 'django.conf.settings',
              'mtrack_project.rapidsms_alerts.alerts.templatetags.alerts_tags.Notification': 'alerts.models.Notification',
              'mtrack_project.rapidsms_alerts.alerts.templatetags.alerts_tags.RequestContext': 'django.template.RequestContext',
              'mtrack_project.rapidsms_alerts.alerts.templatetags.alerts_tags.get_alert_generators': 'alerts.utils.get_alert_generators',
              'mtrack_project.rapidsms_alerts.alerts.templatetags.alerts_tags.itertools': 'itertools',
              'mtrack_project.rapidsms_alerts.alerts.templatetags.alerts_tags.json': 'json',
              'mtrack_project.rapidsms_alerts.alerts.templatetags.alerts_tags.render_to_string': 'django.template.loader.render_to_string',
              'mtrack_project.rapidsms_alerts.alerts.templatetags.alerts_tags.template': 'django.template',
              'mtrack_project.rapidsms_alerts.alerts.urls.*': 'django.conf.urls.defaults.*',
              'mtrack_project.rapidsms_alerts.alerts.utils.Notification': 'mtrack_project.rapidsms_alerts.alerts.models.Notification',
              'mtrack_project.rapidsms_alerts.alerts.utils.NotificationComment': 'mtrack_project.rapidsms_alerts.alerts.models.NotificationComment',
              'mtrack_project.rapidsms_alerts.alerts.utils.dynamic_import': 'mtrack_project.rapidsms_alerts.alerts.importutil.dynamic_import',
              'mtrack_project.rapidsms_alerts.alerts.utils.itertools': 'itertools',
              'mtrack_project.rapidsms_alerts.alerts.utils.settings': 'django.conf.settings',
              'mtrack_project.rapidsms_alerts.alerts.utils.user_name': 'mtrack_project.rapidsms_alerts.alerts.models.user_name',
              'mtrack_project.rapidsms_cvs.cvs-admin.cvs.management.commands.startproject': 'cvs.management.commands.startproject',
              'mtrack_project.rapidsms_cvs.cvs-admin.django.core.management.commands.startproject': 'django.core.management.commands.startproject',
              'mtrack_project.rapidsms_cvs.cvs-admin.management': 'django.core.management',
              'mtrack_project.rapidsms_cvs.cvs-admin.sys': 'sys',
              'mtrack_project.rapidsms_cvs.cvs.app.AppBase': 'rapidsms.apps.base.AppBase',
              'mtrack_project.rapidsms_cvs.cvs.app.Blacklist': 'unregister.models.Blacklist',
              'mtrack_project.rapidsms_cvs.cvs.app.Contact': 'rapidsms.models.Contact',
              'mtrack_project.rapidsms_cvs.cvs.app.Script': 'script.models.Script',
              'mtrack_project.rapidsms_cvs.cvs.app.ScriptProgress': 'script.models.ScriptProgress',
              'mtrack_project.rapidsms_cvs.cvs.app.settings': 'django.conf.settings',
              'mtrack_project.rapidsms_cvs.cvs.extensions.healthmodels.facilityreport.Contact': 'rapidsms.models.Contact',
              'mtrack_project.rapidsms_cvs.cvs.extensions.healthmodels.facilityreport.HealthProvider': 'healthmodels.models.HealthProvider.HealthProvider',
              'mtrack_project.rapidsms_cvs.cvs.extensions.healthmodels.facilityreport.Message': 'rapidsms_httprouter.models.Message',
              'mtrack_project.rapidsms_cvs.cvs.extensions.healthmodels.facilityreport.XFormSubmission': 'rapidsms_xforms.models.XFormSubmission',
              'mtrack_project.rapidsms_cvs.cvs.extensions.healthmodels.facilityreport.models': 'django.db.models',
              'mtrack_project.rapidsms_cvs.cvs.extensions.healthmodels.patientencounter.Contact': 'rapidsms.models.Contact',
              'mtrack_project.rapidsms_cvs.cvs.extensions.healthmodels.patientencounter.HealthProvider': 'healthmodels.models.HealthProvider.HealthProvider',
              'mtrack_project.rapidsms_cvs.cvs.extensions.healthmodels.patientencounter.Message': 'rapidsms_httprouter.models.Message',
              'mtrack_project.rapidsms_cvs.cvs.extensions.healthmodels.patientencounter.XFormSubmission': 'rapidsms_xforms.models.XFormSubmission',
              'mtrack_project.rapidsms_cvs.cvs.extensions.healthmodels.patientencounter.models': 'django.db.models',
              'mtrack_project.rapidsms_cvs.cvs.forms.ActionForm': 'generic.forms.ActionForm',
              'mtrack_project.rapidsms_cvs.cvs.forms.Contact': 'rapidsms.models.Contact',
              'mtrack_project.rapidsms_cvs.cvs.forms.FilterForm': 'generic.forms.FilterForm',
              'mtrack_project.rapidsms_cvs.cvs.forms.Group': 'django.contrib.auth.models.Group',
              'mtrack_project.rapidsms_cvs.cvs.forms.HealthFacility': 'healthmodels.models.HealthFacility.HealthFacility',
              'mtrack_project.rapidsms_cvs.cvs.forms.HealthFacilityType': 'healthmodels.models.HealthFacility.HealthFacilityType',
              'mtrack_project.rapidsms_cvs.cvs.forms.HealthProvider': 'healthmodels.models.HealthProvider.HealthProvider',
              'mtrack_project.rapidsms_cvs.cvs.forms.Location': 'rapidsms.contrib.locations.models.Location',
              'mtrack_project.rapidsms_cvs.cvs.forms.TreeNodeChoiceField': 'mptt.forms.TreeNodeChoiceField',
              'mtrack_project.rapidsms_cvs.cvs.forms.datetime': 'datetime',
              'mtrack_project.rapidsms_cvs.cvs.forms.forms': 'django.forms',
              'mtrack_project.rapidsms_cvs.cvs.forms.get_district_for_facility': 'mtrack.utils.get_district_for_facility',
              'mtrack_project.rapidsms_cvs.cvs.management.commands.create_cvsreg_script.*': 'poll.models.*',
              'mtrack_project.rapidsms_cvs.cvs.management.commands.create_cvsreg_script.BaseCommand': 'django.core.management.base.BaseCommand',
              'mtrack_project.rapidsms_cvs.cvs.management.commands.send_monthly_reports.BaseCommand': 'django.core.management.base.BaseCommand',
              'mtrack_project.rapidsms_cvs.cvs.management.commands.send_monthly_reports.monthly_reports': 'cvs.utils.monthly_reports',
              'mtrack_project.rapidsms_cvs.cvs.migrations.0001_initial.SchemaMigration': 'south.v2.SchemaMigration',
              'mtrack_project.rapidsms_cvs.cvs.migrations.0001_initial.datetime': 'datetime',
              'mtrack_project.rapidsms_cvs.cvs.migrations.0001_initial.db': 'south.db.db',
              'mtrack_project.rapidsms_cvs.cvs.migrations.0001_initial.models': 'django.db.models',
              'mtrack_project.rapidsms_cvs.cvs.models.*': 'script.models.*',
              'mtrack_project.rapidsms_cvs.cvs.models.Attribute': 'eav.models.Attribute',
              'mtrack_project.rapidsms_cvs.cvs.models.Contact': 'rapidsms.models.Contact',
              'mtrack_project.rapidsms_cvs.cvs.models.Field': 'ussd.models.Field',
              'mtrack_project.rapidsms_cvs.cvs.models.Group': 'django.contrib.auth.models.Group',
              'mtrack_project.rapidsms_cvs.cvs.models.HealthProviderBase': 'healthmodels.models.HealthProvider.HealthProviderBase',
              'mtrack_project.rapidsms_cvs.cvs.models.Location': 'rapidsms.contrib.locations.models.Location',
              'mtrack_project.rapidsms_cvs.cvs.models.Navigation': 'ussd.models.Navigation',
              'mtrack_project.rapidsms_cvs.cvs.models.Poll': 'poll.models.Poll',
              'mtrack_project.rapidsms_cvs.cvs.models.Question': 'ussd.models.Question',
              'mtrack_project.rapidsms_cvs.cvs.models.TransitionException': 'ussd.models.TransitionException',
              'mtrack_project.rapidsms_cvs.cvs.models.ValidationError': 'django.core.exceptions.ValidationError',
              'mtrack_project.rapidsms_cvs.cvs.models.XFORMS': 'cvs.utils.XFORMS',
              'mtrack_project.rapidsms_cvs.cvs.models.XForm': 'rapidsms_xforms.models.XForm',
              'mtrack_project.rapidsms_cvs.cvs.models.XFormField': 'rapidsms_xforms.models.XFormField',
              'mtrack_project.rapidsms_cvs.cvs.models.XFormSubmission': 'rapidsms_xforms.models.XFormSubmission',
              'mtrack_project.rapidsms_cvs.cvs.models.datetime': 'datetime',
              'mtrack_project.rapidsms_cvs.cvs.models.dl_distance': 'rapidsms_xforms.models.dl_distance',
              'mtrack_project.rapidsms_cvs.cvs.models.find_best_response': 'script.utils.handling.find_best_response',
              'mtrack_project.rapidsms_cvs.cvs.models.find_closest_match': 'script.utils.handling.find_closest_match',
              'mtrack_project.rapidsms_cvs.cvs.models.itertools': 'itertools',
              'mtrack_project.rapidsms_cvs.cvs.models.parse_district_value': 'uganda_common.utils.parse_district_value',
              'mtrack_project.rapidsms_cvs.cvs.models.post_syncdb': 'django.db.models.signals.post_syncdb',
              'mtrack_project.rapidsms_cvs.cvs.models.pre_delete': 'django.db.models.signals.pre_delete',
              'mtrack_project.rapidsms_cvs.cvs.models.re': 're',
              'mtrack_project.rapidsms_cvs.cvs.models.ussd_complete': 'ussd.models.ussd_complete',
              'mtrack_project.rapidsms_cvs.cvs.models.ussd_pre_transition': 'ussd.models.ussd_pre_transition',
              'mtrack_project.rapidsms_cvs.cvs.models.xform_received': 'rapidsms_xforms.models.xform_received',
              'mtrack_project.rapidsms_cvs.cvs.reports.ActiveReportersChartView': 'mtrack_project.rapidsms_cvs.cvs.views.chart.ActiveReportersChartView',
              'mtrack_project.rapidsms_cvs.cvs.reports.AdditionColumn': 'uganda_common.reports.AdditionColumn',
              'mtrack_project.rapidsms_cvs.cvs.reports.Column': 'generic.reporting.reports.Column',
              'mtrack_project.rapidsms_cvs.cvs.reports.DifferenceColumn': 'uganda_common.reports.DifferenceColumn',
              'mtrack_project.rapidsms_cvs.cvs.reports.QuotientColumn': 'uganda_common.reports.QuotientColumn',
              'mtrack_project.rapidsms_cvs.cvs.reports.ReportView': 'generic.reporting.views.ReportView',
              'mtrack_project.rapidsms_cvs.cvs.reports.XFormAttributeColumn': 'uganda_common.reports.XFormAttributeColumn',
              'mtrack_project.rapidsms_cvs.cvs.reports.XFormReport': 'uganda_common.views.XFormReport',
              'mtrack_project.rapidsms_cvs.cvs.reports.XFormSubmissionColumn': 'uganda_common.reports.XFormSubmissionColumn',
              'mtrack_project.rapidsms_cvs.cvs.reports.active_reporters': 'mtrack_project.rapidsms_cvs.cvs.utils.active_reporters',
              'mtrack_project.rapidsms_cvs.cvs.reports.registered_reporters': 'mtrack_project.rapidsms_cvs.cvs.utils.registered_reporters',
              'mtrack_project.rapidsms_cvs.cvs.reports.reorganize_location': 'uganda_common.utils.reorganize_location',
              'mtrack_project.rapidsms_cvs.cvs.settings.SortedDict': 'django.utils.datastructures.SortedDict',
              'mtrack_project.rapidsms_cvs.cvs.sorters.Attribute': 'eav.models.Attribute',
              'mtrack_project.rapidsms_cvs.cvs.sorters.Connection': 'rapidsms.models.Connection',
              'mtrack_project.rapidsms_cvs.cvs.sorters.HealthFacility': 'healthmodels.models.HealthFacility',
              'mtrack_project.rapidsms_cvs.cvs.sorters.HealthProvider': 'healthmodels.models.HealthProvider',
              'mtrack_project.rapidsms_cvs.cvs.sorters.ScriptSession': 'script.models.ScriptSession',
              'mtrack_project.rapidsms_cvs.cvs.sorters.Sorter': 'generic.sorters.Sorter',
              'mtrack_project.rapidsms_cvs.cvs.sorters.XFormSubmission': 'rapidsms_xforms.models.XFormSubmission',
              'mtrack_project.rapidsms_cvs.cvs.sorters.XFormSubmissionValue': 'rapidsms_xforms.models.XFormSubmissionValue',
              'mtrack_project.rapidsms_cvs.cvs.sorters.get_staff_for_facility': 'mtrack.utils.get_staff_for_facility',
              'mtrack_project.rapidsms_cvs.cvs.sorters.reporting_facilities': 'mtrack.utils.reporting_facilities',
              'mtrack_project.rapidsms_cvs.cvs.templatetags.dict.template': 'django.template',
              'mtrack_project.rapidsms_cvs.cvs.templatetags.stats_extras.Location': 'rapidsms.contrib.locations.models.Location',
              'mtrack_project.rapidsms_cvs.cvs.templatetags.stats_extras.ScriptSession': 'script.models.ScriptSession',
              'mtrack_project.rapidsms_cvs.cvs.templatetags.stats_extras.XFormSubmission': 'rapidsms_xforms.models.XFormSubmission',
              'mtrack_project.rapidsms_cvs.cvs.templatetags.stats_extras.calendar': 'calendar',
              'mtrack_project.rapidsms_cvs.cvs.templatetags.stats_extras.datetime': 'datetime',
              'mtrack_project.rapidsms_cvs.cvs.templatetags.stats_extras.get_district_for_facility': 'mtrack.utils.get_district_for_facility',
              'mtrack_project.rapidsms_cvs.cvs.templatetags.stats_extras.get_facility_reports': 'mtrack.utils.get_facility_reports',
              'mtrack_project.rapidsms_cvs.cvs.templatetags.stats_extras.get_last_reporting_date': 'mtrack.utils.get_last_reporting_date',
              'mtrack_project.rapidsms_cvs.cvs.templatetags.stats_extras.get_object_or_404': 'django.shortcuts.get_object_or_404',
              'mtrack_project.rapidsms_cvs.cvs.templatetags.stats_extras.mark_safe': 'django.utils.safestring.mark_safe',
              'mtrack_project.rapidsms_cvs.cvs.templatetags.stats_extras.re': 're',
              'mtrack_project.rapidsms_cvs.cvs.templatetags.stats_extras.reporting_facilities': 'mtrack.utils.reporting_facilities',
              'mtrack_project.rapidsms_cvs.cvs.templatetags.stats_extras.template': 'django.template',
              'mtrack_project.rapidsms_cvs.cvs.templatetags.stats_extras.time': 'time',
              'mtrack_project.rapidsms_cvs.cvs.tests.*': 'mtrack_project.rapidsms_cvs.cvs.tests.reports.*',
              'mtrack_project.rapidsms_cvs.cvs.tests.all.*': 'healthmodels.models.*',
              'mtrack_project.rapidsms_cvs.cvs.tests.all.App': 'rapidsms_xforms.app.App',
              'mtrack_project.rapidsms_cvs.cvs.tests.all.Attribute': 'eav.models.Attribute',
              'mtrack_project.rapidsms_cvs.cvs.tests.all.Backend': 'rapidsms.models.Backend',
              'mtrack_project.rapidsms_cvs.cvs.tests.all.Client': 'django.test.client.Client',
              'mtrack_project.rapidsms_cvs.cvs.tests.all.Connection': 'rapidsms.models.Connection',
              'mtrack_project.rapidsms_cvs.cvs.tests.all.Contact': 'rapidsms.models.Contact',
              'mtrack_project.rapidsms_cvs.cvs.tests.all.Group': 'django.contrib.auth.models.Group',
              'mtrack_project.rapidsms_cvs.cvs.tests.all.IncomingMessage': 'rapidsms.messages.incoming.IncomingMessage',
              'mtrack_project.rapidsms_cvs.cvs.tests.all.Location': 'rapidsms.contrib.locations.models.Location',
              'mtrack_project.rapidsms_cvs.cvs.tests.all.LocationType': 'rapidsms.contrib.locations.models.LocationType',
              'mtrack_project.rapidsms_cvs.cvs.tests.all.Message': 'rapidsms_httprouter.models.Message',
              'mtrack_project.rapidsms_cvs.cvs.tests.all.Site': 'django.contrib.sites.models.Site',
              'mtrack_project.rapidsms_cvs.cvs.tests.all.TestCase': 'django.test.TestCase',
              'mtrack_project.rapidsms_cvs.cvs.tests.all.TransactionTestCase': 'django.test.TransactionTestCase',
              'mtrack_project.rapidsms_cvs.cvs.tests.all.User': 'django.contrib.auth.models.User',
              'mtrack_project.rapidsms_cvs.cvs.tests.all.ValidationError': 'django.core.exceptions.ValidationError',
              'mtrack_project.rapidsms_cvs.cvs.tests.all.datetime': 'datetime',
              'mtrack_project.rapidsms_cvs.cvs.tests.all.fake_incoming': 'cvs.tests.util.fake_incoming',
              'mtrack_project.rapidsms_cvs.cvs.tests.autoreg.*': 'rapidsms_xforms.models.*',
              'mtrack_project.rapidsms_cvs.cvs.tests.autoreg.Backend': 'rapidsms.models.Backend',
              'mtrack_project.rapidsms_cvs.cvs.tests.autoreg.Blacklist': 'unregister.models.Blacklist',
              'mtrack_project.rapidsms_cvs.cvs.tests.autoreg.Connection': 'rapidsms.models.Connection',
              'mtrack_project.rapidsms_cvs.cvs.tests.autoreg.Contact': 'rapidsms.models.Contact',
              'mtrack_project.rapidsms_cvs.cvs.tests.autoreg.Group': 'django.contrib.auth.models.Group',
              'mtrack_project.rapidsms_cvs.cvs.tests.autoreg.HealthFacility': 'healthmodels.models.HealthFacility.HealthFacility',
              'mtrack_project.rapidsms_cvs.cvs.tests.autoreg.HttpRouterThread': 'rapidsms_httprouter.router.HttpRouterThread',
              'mtrack_project.rapidsms_cvs.cvs.tests.autoreg.IncomingMessage': 'rapidsms.messages.incoming.IncomingMessage',
              'mtrack_project.rapidsms_cvs.cvs.tests.autoreg.Location': 'rapidsms.contrib.locations.models.Location',
              'mtrack_project.rapidsms_cvs.cvs.tests.autoreg.LocationType': 'rapidsms.contrib.locations.models.LocationType',
              'mtrack_project.rapidsms_cvs.cvs.tests.autoreg.Message': 'rapidsms_httprouter.models.Message',
              'mtrack_project.rapidsms_cvs.cvs.tests.autoreg.Script': 'script.models.Script',
              'mtrack_project.rapidsms_cvs.cvs.tests.autoreg.ScriptProgress': 'script.models.ScriptProgress',
              'mtrack_project.rapidsms_cvs.cvs.tests.autoreg.ScriptResponse': 'script.models.ScriptResponse',
              'mtrack_project.rapidsms_cvs.cvs.tests.autoreg.ScriptSession': 'script.models.ScriptSession',
              'mtrack_project.rapidsms_cvs.cvs.tests.autoreg.TestCase': 'django.test.TestCase',
              'mtrack_project.rapidsms_cvs.cvs.tests.autoreg.User': 'django.contrib.auth.models.User',
              'mtrack_project.rapidsms_cvs.cvs.tests.autoreg.check_progress': 'script.utils.outgoing.check_progress',
              'mtrack_project.rapidsms_cvs.cvs.tests.autoreg.create_attributes': 'poll.management.create_attributes',
              'mtrack_project.rapidsms_cvs.cvs.tests.autoreg.datetime': 'datetime',
              'mtrack_project.rapidsms_cvs.cvs.tests.autoreg.get_router': 'rapidsms_httprouter.router.get_router',
              'mtrack_project.rapidsms_cvs.cvs.tests.autoreg.script_progress': 'script.signals.script_progress',
              'mtrack_project.rapidsms_cvs.cvs.tests.autoreg.script_progress_was_completed': 'script.signals.script_progress_was_completed',
              'mtrack_project.rapidsms_cvs.cvs.tests.autoreg.settings': 'django.conf.settings',
              'mtrack_project.rapidsms_cvs.cvs.tests.autoreg.traceback': 'traceback',
              'mtrack_project.rapidsms_cvs.cvs.tests.reports.*': 'healthmodels.models.*',
              'mtrack_project.rapidsms_cvs.cvs.tests.reports.Backend': 'rapidsms.models.Backend',
              'mtrack_project.rapidsms_cvs.cvs.tests.reports.Connection': 'rapidsms.models.Connection',
              'mtrack_project.rapidsms_cvs.cvs.tests.reports.Contact': 'rapidsms.models.Contact',
              'mtrack_project.rapidsms_cvs.cvs.tests.reports.Group': 'django.contrib.auth.models.Group',
              'mtrack_project.rapidsms_cvs.cvs.tests.reports.HttpRouterThread': 'rapidsms_httprouter.router.HttpRouterThread',
              'mtrack_project.rapidsms_cvs.cvs.tests.reports.IncomingMessage': 'rapidsms.messages.incoming.IncomingMessage',
              'mtrack_project.rapidsms_cvs.cvs.tests.reports.Message': 'rapidsms_httprouter.models.Message',
              'mtrack_project.rapidsms_cvs.cvs.tests.reports.TestCase': 'django.test.TestCase',
              'mtrack_project.rapidsms_cvs.cvs.tests.reports.connection': 'django.db.connection',
              'mtrack_project.rapidsms_cvs.cvs.tests.reports.datetime': 'datetime',
              'mtrack_project.rapidsms_cvs.cvs.tests.reports.get_router': 'rapidsms_httprouter.router.get_router',
              'mtrack_project.rapidsms_cvs.cvs.tests.reports.monthly_reports': 'cvs.utils.monthly_reports',
              'mtrack_project.rapidsms_cvs.cvs.tests.reports.settings': 'django.conf.settings',
              'mtrack_project.rapidsms_cvs.cvs.tests.reports.traceback': 'traceback',
              'mtrack_project.rapidsms_cvs.cvs.tests.util.Backend': 'rapidsms.models.Backend',
              'mtrack_project.rapidsms_cvs.cvs.tests.util.Connection': 'rapidsms.models.Connection',
              'mtrack_project.rapidsms_cvs.cvs.tests.util.IncomingMessage': 'rapidsms.messages.incoming.IncomingMessage',
              'mtrack_project.rapidsms_cvs.cvs.tests.util.Message': 'rapidsms_httprouter.models.Message',
              'mtrack_project.rapidsms_cvs.cvs.tests.util.XForm': 'rapidsms_xforms.models.XForm',
              'mtrack_project.rapidsms_cvs.cvs.urls.*': 'cvs.reports.*',
              'mtrack_project.rapidsms_cvs.cvs.urls.ActivateForm': 'cvs.forms.ActivateForm',
              'mtrack_project.rapidsms_cvs.cvs.urls.DistictFilterForm': 'contact.forms.DistictFilterForm',
              'mtrack_project.rapidsms_cvs.cvs.urls.DistictFilterMessageForm': 'contact.forms.DistictFilterMessageForm',
              'mtrack_project.rapidsms_cvs.cvs.urls.FacilityFilterForm': 'cvs.forms.FacilityFilterForm',
              'mtrack_project.rapidsms_cvs.cvs.urls.FreeSearchForm': 'contact.forms.FreeSearchForm',
              'mtrack_project.rapidsms_cvs.cvs.urls.FreeSearchTextForm': 'contact.forms.FreeSearchTextForm',
              'mtrack_project.rapidsms_cvs.cvs.urls.HandledByForm': 'contact.forms.HandledByForm',
              'mtrack_project.rapidsms_cvs.cvs.urls.HealthFacilityBase': 'healthmodels.models.HealthFacility.HealthFacilityBase',
              'mtrack_project.rapidsms_cvs.cvs.urls.HealthProviderBase': 'healthmodels.models.HealthProvider.HealthProviderBase',
              'mtrack_project.rapidsms_cvs.cvs.urls.LatestFacilitySubmissionSorter': 'cvs.sorters.LatestFacilitySubmissionSorter',
              'mtrack_project.rapidsms_cvs.cvs.urls.LatestJoinedSorter': 'cvs.sorters.LatestJoinedSorter',
              'mtrack_project.rapidsms_cvs.cvs.urls.LatestSubmissionSorter': 'cvs.sorters.LatestSubmissionSorter',
              'mtrack_project.rapidsms_cvs.cvs.urls.MassText': 'contact.models.MassText',
              'mtrack_project.rapidsms_cvs.cvs.urls.MassTextForm': 'contact.forms.MassTextForm',
              'mtrack_project.rapidsms_cvs.cvs.urls.Message': 'rapidsms_httprouter.models.Message',
              'mtrack_project.rapidsms_cvs.cvs.urls.ReplyTextForm': 'contact.forms.ReplyTextForm',
              'mtrack_project.rapidsms_cvs.cvs.urls.SimpleSorter': 'generic.sorters.SimpleSorter',
              'mtrack_project.rapidsms_cvs.cvs.urls.TotalFacilitySubmissionSorter': 'cvs.sorters.TotalFacilitySubmissionSorter',
              'mtrack_project.rapidsms_cvs.cvs.urls.TupleSorter': 'generic.sorters.TupleSorter',
              'mtrack_project.rapidsms_cvs.cvs.urls.XForm': 'rapidsms_xforms.models.XForm',
              'mtrack_project.rapidsms_cvs.cvs.urls.XFormDateGetter': 'uganda_common.reports.XFormDateGetter',
              'mtrack_project.rapidsms_cvs.cvs.urls.basic': 'cvs.views.basic',
              'mtrack_project.rapidsms_cvs.cvs.urls.direct_to_template': 'django.views.generic.simple.direct_to_template',
              'mtrack_project.rapidsms_cvs.cvs.urls.export_as_excel': 'cvs.views.stats.export_as_excel',
              'mtrack_project.rapidsms_cvs.cvs.urls.facilities': 'cvs.views.facilities',
              'mtrack_project.rapidsms_cvs.cvs.urls.generic': 'generic.views.generic',
              'mtrack_project.rapidsms_cvs.cvs.urls.generic_dashboard': 'generic.views.generic_dashboard',
              'mtrack_project.rapidsms_cvs.cvs.urls.generic_map': 'generic.views.generic_map',
              'mtrack_project.rapidsms_cvs.cvs.urls.generic_row': 'generic.views.generic_row',
              'mtrack_project.rapidsms_cvs.cvs.urls.get_all_messages': 'cvs.utils.get_all_messages',
              'mtrack_project.rapidsms_cvs.cvs.urls.get_dashboard_messages': 'cvs.utils.get_dashboard_messages',
              'mtrack_project.rapidsms_cvs.cvs.urls.get_facilites_for_view': 'mtrack.utils.get_facilites_for_view',
              'mtrack_project.rapidsms_cvs.cvs.urls.get_mass_messages': 'cvs.utils.get_mass_messages',
              'mtrack_project.rapidsms_cvs.cvs.urls.get_nolocation_vhts': 'cvs.utils.get_nolocation_vhts',
              'mtrack_project.rapidsms_cvs.cvs.urls.get_reporters': 'cvs.utils.get_reporters',
              'mtrack_project.rapidsms_cvs.cvs.urls.get_training_messages': 'cvs.utils.get_training_messages',
              'mtrack_project.rapidsms_cvs.cvs.urls.get_training_vhts': 'cvs.utils.get_training_vhts',
              'mtrack_project.rapidsms_cvs.cvs.urls.get_unsolicited_messages': 'cvs.utils.get_unsolicited_messages',
              'mtrack_project.rapidsms_cvs.cvs.urls.login_required': 'django.contrib.auth.decorators.login_required',
              'mtrack_project.rapidsms_cvs.cvs.urls.map': 'cvs.views.map',
              'mtrack_project.rapidsms_cvs.cvs.urls.reporters': 'cvs.views.reporters',
              'mtrack_project.rapidsms_cvs.cvs.utils.*': 'rapidsms_xforms.models.*',
              'mtrack_project.rapidsms_cvs.cvs.utils.AnonymousReport': 'mtrack.models.AnonymousReport',
              'mtrack_project.rapidsms_cvs.cvs.utils.Category': 'poll.models.Category',
              'mtrack_project.rapidsms_cvs.cvs.utils.Contact': 'rapidsms.models.Contact',
              'mtrack_project.rapidsms_cvs.cvs.utils.Count': 'django.db.models.Count',
              'mtrack_project.rapidsms_cvs.cvs.utils.Group': 'django.contrib.auth.models.Group',
              'mtrack_project.rapidsms_cvs.cvs.utils.HealthProvider': 'healthmodels.models.HealthProvider.HealthProvider',
              'mtrack_project.rapidsms_cvs.cvs.utils.HealthProviderBase': 'healthmodels.models.HealthProvider.HealthProviderBase',
              'mtrack_project.rapidsms_cvs.cvs.utils.HttpResponse': 'django.http.HttpResponse',
              'mtrack_project.rapidsms_cvs.cvs.utils.Location': 'rapidsms.contrib.locations.models.Location',
              'mtrack_project.rapidsms_cvs.cvs.utils.MassText': 'contact.models.MassText',
              'mtrack_project.rapidsms_cvs.cvs.utils.Message': 'rapidsms_httprouter.models.Message',
              'mtrack_project.rapidsms_cvs.cvs.utils.Poll': 'poll.models.Poll',
              'mtrack_project.rapidsms_cvs.cvs.utils.Q': 'django.db.models.Q',
              'mtrack_project.rapidsms_cvs.cvs.utils.Rule': 'poll.models.Rule',
              'mtrack_project.rapidsms_cvs.cvs.utils.Script': 'script.models.Script',
              'mtrack_project.rapidsms_cvs.cvs.utils.ScriptStep': 'script.models.ScriptStep',
              'mtrack_project.rapidsms_cvs.cvs.utils.Site': 'django.contrib.sites.Site',
              'mtrack_project.rapidsms_cvs.cvs.utils.SortedDict': 'django.utils.datastructures.SortedDict',
              'mtrack_project.rapidsms_cvs.cvs.utils.StringIO': 'StringIO',
              'mtrack_project.rapidsms_cvs.cvs.utils.Sum': 'django.db.models.Sum',
              'mtrack_project.rapidsms_cvs.cvs.utils.TIME_RANGES': 'uganda_common.utils.TIME_RANGES',
              'mtrack_project.rapidsms_cvs.cvs.utils.connection': 'django.db.connection',
              'mtrack_project.rapidsms_cvs.cvs.utils.datetime': 'datetime',
              'mtrack_project.rapidsms_cvs.cvs.utils.get_location_for_user': 'uganda_common.utils.get_location_for_user',
              'mtrack_project.rapidsms_cvs.cvs.utils.get_messages': 'uganda_common.utils.get_messages',
              'mtrack_project.rapidsms_cvs.cvs.utils.itertools': 'itertools',
              'mtrack_project.rapidsms_cvs.cvs.utils.last_reporting_period': 'mtrack.utils.last_reporting_period',
              'mtrack_project.rapidsms_cvs.cvs.utils.settings': 'django.conf.settings',
              'mtrack_project.rapidsms_cvs.cvs.utils.time': 'time',
              'mtrack_project.rapidsms_cvs.cvs.utils.xlwt': 'xlwt',
              'mtrack_project.rapidsms_cvs.cvs.views.basic.HttpResponse': 'django.http.HttpResponse',
              'mtrack_project.rapidsms_cvs.cvs.views.basic.RequestContext': 'django.template.RequestContext',
              'mtrack_project.rapidsms_cvs.cvs.views.basic.SimpleSorter': 'generic.sorters.SimpleSorter',
              'mtrack_project.rapidsms_cvs.cvs.views.basic.SubmissionValueSorter': 'cvs.sorters.SubmissionValueSorter',
              'mtrack_project.rapidsms_cvs.cvs.views.basic.XForm': 'rapidsms_xforms.models.XForm',
              'mtrack_project.rapidsms_cvs.cvs.views.basic.XFormSubmission': 'rapidsms_xforms.models.XFormSubmission',
              'mtrack_project.rapidsms_cvs.cvs.views.basic.generic': 'generic.views.generic',
              'mtrack_project.rapidsms_cvs.cvs.views.basic.render_to_response': 'django.shortcuts.render_to_response',
              'mtrack_project.rapidsms_cvs.cvs.views.chart.Location': 'rapidsms.contrib.locations.models.Location',
              'mtrack_project.rapidsms_cvs.cvs.views.chart.SortedDict': 'django.utils.datastructures.SortedDict',
              'mtrack_project.rapidsms_cvs.cvs.views.chart.XFormChartView': 'uganda_common.views.XFormChartView',
              'mtrack_project.rapidsms_cvs.cvs.views.chart.active_reporters': 'cvs.utils.active_reporters',
              'mtrack_project.rapidsms_cvs.cvs.views.chart.get_object_or_404': 'django.shortcuts.get_object_or_404',
              'mtrack_project.rapidsms_cvs.cvs.views.dates.DateRangeForm': 'uganda_common.forms.DateRangeForm',
              'mtrack_project.rapidsms_cvs.cvs.views.dates.Group': 'django.contrib.auth.models.Group',
              'mtrack_project.rapidsms_cvs.cvs.views.dates.HealthProvider': 'healthmodels.models.HealthProvider',
              'mtrack_project.rapidsms_cvs.cvs.views.dates.XFormDateGetter': 'uganda_common.reports.XFormDateGetter',
              'mtrack_project.rapidsms_cvs.cvs.views.dates.connection': 'django.db.connection',
              'mtrack_project.rapidsms_cvs.cvs.views.dates.datetime': 'datetime',
              'mtrack_project.rapidsms_cvs.cvs.views.dates.floor': 'math.floor',
              'mtrack_project.rapidsms_cvs.cvs.views.facilities.FacilityForm': 'cvs.forms.FacilityForm',
              'mtrack_project.rapidsms_cvs.cvs.views.facilities.HealthFacility': 'healthmodels.models.HealthFacility.HealthFacility',
              'mtrack_project.rapidsms_cvs.cvs.views.facilities.HealthFacilityBase': 'healthmodels.models.HealthFacility.HealthFacilityBase',
              'mtrack_project.rapidsms_cvs.cvs.views.facilities.HealthFacilityType': 'healthmodels.models.HealthFacility.HealthFacilityType',
              'mtrack_project.rapidsms_cvs.cvs.views.facilities.HttpResponse': 'django.http.HttpResponse',
              'mtrack_project.rapidsms_cvs.cvs.views.facilities.Location': 'rapidsms.contrib.locations.models.Location',
              'mtrack_project.rapidsms_cvs.cvs.views.facilities.RequestContext': 'django.template.RequestContext',
              'mtrack_project.rapidsms_cvs.cvs.views.facilities.generic_row': 'generic.views.generic_row',
              'mtrack_project.rapidsms_cvs.cvs.views.facilities.get_district_for_facility': 'mtrack.utils.get_district_for_facility',
              'mtrack_project.rapidsms_cvs.cvs.views.facilities.get_object_or_404': 'django.shortcuts.get_object_or_404',
              'mtrack_project.rapidsms_cvs.cvs.views.facilities.login_required': 'django.contrib.auth.decorators.login_required',
              'mtrack_project.rapidsms_cvs.cvs.views.facilities.render_to_response': 'django.shortcuts.render_to_response',
              'mtrack_project.rapidsms_cvs.cvs.views.map.HealthFacility': 'healthmodels.models.HealthFacility.HealthFacility',
              'mtrack_project.rapidsms_cvs.cvs.views.map.HttpResponse': 'django.http.HttpResponse',
              'mtrack_project.rapidsms_cvs.cvs.views.map.MAX_LAT': 'cvs.settings.MAX_LAT',
              'mtrack_project.rapidsms_cvs.cvs.views.map.MAX_LON': 'cvs.settings.MAX_LON',
              'mtrack_project.rapidsms_cvs.cvs.views.map.MIN_LAT': 'cvs.settings.MIN_LAT',
              'mtrack_project.rapidsms_cvs.cvs.views.map.MIN_LON': 'cvs.settings.MIN_LON',
              'mtrack_project.rapidsms_cvs.cvs.views.map.datetime': 'datetime',
              'mtrack_project.rapidsms_cvs.cvs.views.map.settings': 'django.conf.settings',
              'mtrack_project.rapidsms_cvs.cvs.views.map.simplejson': 'django.utils.simplejson',
              'mtrack_project.rapidsms_cvs.cvs.views.map.total_attribute_by_facility': 'cvs.utils.total_attribute_by_facility',
              'mtrack_project.rapidsms_cvs.cvs.views.map.total_submissions_by_facility': 'cvs.utils.total_submissions_by_facility',
              'mtrack_project.rapidsms_cvs.cvs.views.reporters.HealthFacility': 'healthmodels.models.HealthFacility',
              'mtrack_project.rapidsms_cvs.cvs.views.reporters.HealthProvider': 'healthmodels.models.HealthProvider.HealthProvider',
              'mtrack_project.rapidsms_cvs.cvs.views.reporters.HealthProviderBase': 'healthmodels.models.HealthProvider.HealthProviderBase',
              'mtrack_project.rapidsms_cvs.cvs.views.reporters.HttpResponse': 'django.http.HttpResponse',
              'mtrack_project.rapidsms_cvs.cvs.views.reporters.Location': 'rapidsms.contrib.locations.models.Location',
              'mtrack_project.rapidsms_cvs.cvs.views.reporters.ReporterForm': 'cvs.forms.ReporterForm',
              'mtrack_project.rapidsms_cvs.cvs.views.reporters.RequestContext': 'django.template.RequestContext',
              'mtrack_project.rapidsms_cvs.cvs.views.reporters.generic_row': 'generic.views.generic_row',
              'mtrack_project.rapidsms_cvs.cvs.views.reporters.get_object_or_404': 'django.shortcuts.get_object_or_404',
              'mtrack_project.rapidsms_cvs.cvs.views.reporters.login_required': 'django.contrib.auth.decorators.login_required',
              'mtrack_project.rapidsms_cvs.cvs.views.reporters.render_to_response': 'django.shortcuts.render_to_response',
              'mtrack_project.rapidsms_cvs.cvs.views.stats.*': 'healthmodels.models.*',
              'mtrack_project.rapidsms_cvs.cvs.views.stats.Contact': 'rapidsms.models.Contact',
              'mtrack_project.rapidsms_cvs.cvs.views.stats.Count': 'django.db.models.Count',
              'mtrack_project.rapidsms_cvs.cvs.views.stats.DateRangeForm': 'uganda_common.forms.DateRangeForm',
              'mtrack_project.rapidsms_cvs.cvs.views.stats.ExcelResponse': 'cvs.utils.ExcelResponse',
              'mtrack_project.rapidsms_cvs.cvs.views.stats.HealthFacility': 'healthmodels.models.HealthFacility.HealthFacility',
              'mtrack_project.rapidsms_cvs.cvs.views.stats.HealthProvider': 'healthmodels.models.HealthProvider.HealthProvider',
              'mtrack_project.rapidsms_cvs.cvs.views.stats.HttpResponse': 'django.http.HttpResponse',
              'mtrack_project.rapidsms_cvs.cvs.views.stats.HttpResponseRedirect': 'django.http.HttpResponseRedirect',
              'mtrack_project.rapidsms_cvs.cvs.views.stats.Location': 'rapidsms.contrib.locations.models.Location',
              'mtrack_project.rapidsms_cvs.cvs.views.stats.RequestContext': 'django.template.RequestContext',
              'mtrack_project.rapidsms_cvs.cvs.views.stats.SortedDict': 'django.utils.datastructures.SortedDict',
              'mtrack_project.rapidsms_cvs.cvs.views.stats.Sum': 'django.db.models.Sum',
              'mtrack_project.rapidsms_cvs.cvs.views.stats.XFormSubmission': 'rapidsms_xforms.models.XFormSubmission',
              'mtrack_project.rapidsms_cvs.cvs.views.stats.XFormSubmissionValue': 'rapidsms_xforms.models.XFormSubmissionValue',
              'mtrack_project.rapidsms_cvs.cvs.views.stats.cache_control': 'django.views.decorators.cache.cache_control',
              'mtrack_project.rapidsms_cvs.cvs.views.stats.datetime': 'datetime',
              'mtrack_project.rapidsms_cvs.cvs.views.stats.get_expected_epi': 'cvs.views.dates.get_expected_epi',
              'mtrack_project.rapidsms_cvs.cvs.views.stats.get_object_or_404': 'django.shortcuts.get_object_or_404',
              'mtrack_project.rapidsms_cvs.cvs.views.stats.mark_safe': 'django.utils.safestring.mark_safe',
              'mtrack_project.rapidsms_cvs.cvs.views.stats.re': 're',
              'mtrack_project.rapidsms_cvs.cvs.views.stats.render_to_response': 'django.shortcuts.render_to_response',
              'mtrack_project.rapidsms_cvs.cvs.views.stats.time': 'time',
              'mtrack_project.rapidsms_cvs.sample-settings.os': 'os',
              'mtrack_project.rapidsms_cvs.sample-settings.sys': 'sys',
              'mtrack_project.rapidsms_cvs.sample-settings.tempfile': 'tempfile',
              'mtrack_project.rapidsms_cvs.sample-urls.*': 'django.conf.urls.defaults.*',
              'mtrack_project.rapidsms_cvs.sample-urls.admin': 'django.contrib.admin',
              'mtrack_project.rapidsms_cvs.sample-urls.contact_urls': 'contact.urls.urlpatterns',
              'mtrack_project.rapidsms_cvs.sample-urls.cvs_urls': 'mtrack_project.rapidsms_cvs.cvs.urls.urlpatterns',
              'mtrack_project.rapidsms_cvs.sample-urls.healthmodels_urls': 'healthmodels.urls.urlpatterns',
              'mtrack_project.rapidsms_cvs.sample-urls.router_urls': 'rapidsms_httprouter.urls.urlpatterns',
              'mtrack_project.rapidsms_cvs.sample-urls.settings': 'django.conf.settings',
              'mtrack_project.rapidsms_cvs.sample-urls.xform_urls': 'rapidsms_xforms.urls.urlpatterns',
              'mtrack_project.rapidsms_cvs.setup.find_packages': 'setuptools.find_packages',
              'mtrack_project.rapidsms_cvs.setup.setup': 'setuptools.setup',
              'mtrack_project.rapidsms_logistics.logistics.admin.*': 'logistics.models.*',
              'mtrack_project.rapidsms_logistics.logistics.admin.RapidSMSContact': 'rapidsms.models.Contact',
              'mtrack_project.rapidsms_logistics.logistics.admin.admin': 'django.contrib.admin',
              'mtrack_project.rapidsms_logistics.logistics.alerts.Alert': 'mtrack_project.rapidsms_logistics.logistics.alerts.Alert',
              'mtrack_project.rapidsms_logistics.logistics.alerts.absolute_import': '__future__.absolute_import',
              'mtrack_project.rapidsms_logistics.logistics.alerts.datetime': 'datetime.datetime',
              'mtrack_project.rapidsms_logistics.logistics.alerts.get_reporting_and_nonreporting_facilities': 'logistics.reports.get_reporting_and_nonreporting_facilities',
              'mtrack_project.rapidsms_logistics.logistics.alerts.place_in_request': 'logistics.decorators.place_in_request',
              'mtrack_project.rapidsms_logistics.logistics.alerts.return_if_place_not_set': 'logistics.decorators.return_if_place_not_set',
              'mtrack_project.rapidsms_logistics.logistics.alerts.reverse': 'django.core.urlresolvers.reverse',
              'mtrack_project.rapidsms_logistics.logistics.alerts.timedelta': 'datetime.timedelta',
              'mtrack_project.rapidsms_logistics.logistics.app.AppBase': 'rapidsms.apps.base.AppBase',
              'mtrack_project.rapidsms_logistics.logistics.app.Product': 'logistics.models.Product',
              'mtrack_project.rapidsms_logistics.logistics.app.ProductReportsHelper': 'logistics.models.ProductReportsHelper',
              'mtrack_project.rapidsms_logistics.logistics.app.Reports': 'logistics.const.Reports',
              'mtrack_project.rapidsms_logistics.logistics.app.UnknownCommodityCodeError': 'logistics.errors.UnknownCommodityCodeError',
              'mtrack_project.rapidsms_logistics.logistics.app._': 'django.utils.translation.ugettext',
              'mtrack_project.rapidsms_logistics.logistics.app.config': 'logistics.util.config',
              'mtrack_project.rapidsms_logistics.logistics.app.import_module': 'django.utils.importlib.import_module',
              'mtrack_project.rapidsms_logistics.logistics.app.re': 're',
              'mtrack_project.rapidsms_logistics.logistics.app.settings': 'rapidsms.conf.settings',
              'mtrack_project.rapidsms_logistics.logistics.charts.Product': 'logistics.models.Product',
              'mtrack_project.rapidsms_logistics.logistics.charts.ProductReportType': 'logistics.models.ProductReportType',
              'mtrack_project.rapidsms_logistics.logistics.charts.Reports': 'logistics.const.Reports',
              'mtrack_project.rapidsms_logistics.logistics.charts.gviz_api': 'mtrack_project.rapidsms_logistics.logistics.gviz_api',
              'mtrack_project.rapidsms_logistics.logistics.config.ContactRole': 'logistics.apps.logistics.models.ContactRole',
              'mtrack_project.rapidsms_logistics.logistics.config.LocationType': 'rapidsms.contrib.locations.models.LocationType',
              'mtrack_project.rapidsms_logistics.logistics.config.SupplyPointType': 'logistics.apps.logistics.models.SupplyPointType',
              'mtrack_project.rapidsms_logistics.logistics.config.messagelog': 'rapidsms.contrib.messagelog',
              'mtrack_project.rapidsms_logistics.logistics.config.settings': 'rapidsms.conf.settings',
              'mtrack_project.rapidsms_logistics.logistics.context_processors.settings': 'rapidsms.conf.settings',
              'mtrack_project.rapidsms_logistics.logistics.decorators.Location': 'rapidsms.contrib.locations.models.Location',
              'mtrack_project.rapidsms_logistics.logistics.decorators.config': 'logistics.util.config',
              'mtrack_project.rapidsms_logistics.logistics.decorators.settings': 'logistics.settings',
              'mtrack_project.rapidsms_logistics.logistics.extensions.locations.location.Location': 'rapidsms.contrib.locations.models.Location',
              'mtrack_project.rapidsms_logistics.logistics.extensions.locations.location.Q': 'django.db.models.Q',
              'mtrack_project.rapidsms_logistics.logistics.extensions.locations.location.SupplyPoint': 'logistics.models.SupplyPoint',
              'mtrack_project.rapidsms_logistics.logistics.extensions.locations.location.absolute_import': '__future__.absolute_import',
              'mtrack_project.rapidsms_logistics.logistics.extensions.locations.location.consumption': 'logistics.models.consumption',
              'mtrack_project.rapidsms_logistics.logistics.extensions.locations.location.emergency_plus_low': 'logistics.models.emergency_plus_low',
              'mtrack_project.rapidsms_logistics.logistics.extensions.locations.location.emergency_stock_count': 'logistics.models.emergency_stock_count',
              'mtrack_project.rapidsms_logistics.logistics.extensions.locations.location.good_supply_count': 'logistics.models.good_supply_count',
              'mtrack_project.rapidsms_logistics.logistics.extensions.locations.location.low_stock_count': 'logistics.models.low_stock_count',
              'mtrack_project.rapidsms_logistics.logistics.extensions.locations.location.models': 'django.db.models',
              'mtrack_project.rapidsms_logistics.logistics.extensions.locations.location.overstocked_count': 'logistics.models.overstocked_count',
              'mtrack_project.rapidsms_logistics.logistics.extensions.locations.location.settings': 'rapidsms.conf.settings',
              'mtrack_project.rapidsms_logistics.logistics.extensions.locations.location.stockout_count': 'logistics.models.stockout_count',
              'mtrack_project.rapidsms_logistics.logistics.extensions.locations.location.uuid': 'uuid',
              'mtrack_project.rapidsms_logistics.logistics.extensions.rapidsms.contact.absolute_import': '__future__.absolute_import',
              'mtrack_project.rapidsms_logistics.logistics.extensions.rapidsms.contact.models': 'django.db.models',
              'mtrack_project.rapidsms_logistics.logistics.forms.Point': 'rapidsms.contrib.locations.models.Point',
              'mtrack_project.rapidsms_logistics.logistics.forms.Product': 'mtrack_project.rapidsms_logistics.logistics.models.Product',
              'mtrack_project.rapidsms_logistics.logistics.forms.ProductStock': 'mtrack_project.rapidsms_logistics.logistics.models.ProductStock',
              'mtrack_project.rapidsms_logistics.logistics.forms.SupplyPoint': 'mtrack_project.rapidsms_logistics.logistics.models.SupplyPoint',
              'mtrack_project.rapidsms_logistics.logistics.forms._': 'django.utils.translation.ugettext',
              'mtrack_project.rapidsms_logistics.logistics.forms.forms': 'django.forms',
              'mtrack_project.rapidsms_logistics.logistics.forms.settings': 'django.conf.settings',
              'mtrack_project.rapidsms_logistics.logistics.gviz_api.cgi': 'cgi',
              'mtrack_project.rapidsms_logistics.logistics.gviz_api.datetime': 'datetime',
              'mtrack_project.rapidsms_logistics.logistics.gviz_api.types': 'types',
              'mtrack_project.rapidsms_logistics.logistics.handlers.help.KeywordHandler': 'rapidsms.contrib.handlers.handlers.keyword.KeywordHandler',
              'mtrack_project.rapidsms_logistics.logistics.handlers.help.Product': 'logistics.models.Product',
              'mtrack_project.rapidsms_logistics.logistics.handlers.help._': 'django.utils.translation.ugettext',
              'mtrack_project.rapidsms_logistics.logistics.handlers.help.config': 'logistics.util.config',
              'mtrack_project.rapidsms_logistics.logistics.handlers.receipts.KeywordHandler': 'rapidsms.contrib.handlers.handlers.keyword.KeywordHandler',
              'mtrack_project.rapidsms_logistics.logistics.handlers.receipts.ProductReportsHelper': 'logistics.models.ProductReportsHelper',
              'mtrack_project.rapidsms_logistics.logistics.handlers.receipts.Reports': 'logistics.const.Reports',
              'mtrack_project.rapidsms_logistics.logistics.handlers.receipts.StockRequest': 'logistics.models.StockRequest',
              'mtrack_project.rapidsms_logistics.logistics.handlers.receipts.StockTransfer': 'logistics.models.StockTransfer',
              'mtrack_project.rapidsms_logistics.logistics.handlers.receipts._': 'django.utils.translation.ugettext',
              'mtrack_project.rapidsms_logistics.logistics.handlers.receipts.config': 'logistics.util.config',
              'mtrack_project.rapidsms_logistics.logistics.handlers.receipts.logistics_contact_and_permission_required': 'logistics.decorators.logistics_contact_and_permission_required',
              'mtrack_project.rapidsms_logistics.logistics.handlers.receipts.logistics_contact_required': 'logistics.decorators.logistics_contact_required',
              'mtrack_project.rapidsms_logistics.logistics.handlers.status.KeywordHandler': 'rapidsms.contrib.handlers.handlers.keyword.KeywordHandler',
              'mtrack_project.rapidsms_logistics.logistics.handlers.status.ProductReport': 'logistics.models.ProductReport',
              'mtrack_project.rapidsms_logistics.logistics.handlers.status.ProductStock': 'logistics.models.ProductStock',
              'mtrack_project.rapidsms_logistics.logistics.handlers.status._': 'django.utils.translation.ugettext_noop',
              'mtrack_project.rapidsms_logistics.logistics.handlers.status.config': 'logistics.util.config',
              'mtrack_project.rapidsms_logistics.logistics.handlers.stop.KeywordHandler': 'rapidsms.contrib.handlers.handlers.keyword.KeywordHandler',
              'mtrack_project.rapidsms_logistics.logistics.handlers.stop._': 'django.utils.translation.ugettext_noop',
              'mtrack_project.rapidsms_logistics.logistics.handlers.stop.config': 'logistics.util.config',
              'mtrack_project.rapidsms_logistics.logistics.loader.ContactRole': 'logistics.models.ContactRole',
              'mtrack_project.rapidsms_logistics.logistics.loader.Location': 'rapidsms.contrib.locations.models.Location',
              'mtrack_project.rapidsms_logistics.logistics.loader.Product': 'logistics.models.Product',
              'mtrack_project.rapidsms_logistics.logistics.loader.ProductReportType': 'logistics.models.ProductReportType',
              'mtrack_project.rapidsms_logistics.logistics.loader.ProductStock': 'logistics.models.ProductStock',
              'mtrack_project.rapidsms_logistics.logistics.loader.ProductType': 'logistics.models.ProductType',
              'mtrack_project.rapidsms_logistics.logistics.loader.Reports': 'logistics.const.Reports',
              'mtrack_project.rapidsms_logistics.logistics.loader.Responsibility': 'logistics.models.Responsibility',
              'mtrack_project.rapidsms_logistics.logistics.loader.SupplyPoint': 'logistics.models.SupplyPoint',
              'mtrack_project.rapidsms_logistics.logistics.loader.SupplyPointType': 'logistics.models.SupplyPointType',
              'mtrack_project.rapidsms_logistics.logistics.loader.config': 'logistics.util.config',
              'mtrack_project.rapidsms_logistics.logistics.loader.os': 'os',
              'mtrack_project.rapidsms_logistics.logistics.loader.random': 'random',
              'mtrack_project.rapidsms_logistics.logistics.loader.settings': 'django.conf.settings',
              'mtrack_project.rapidsms_logistics.logistics.loader.sys': 'sys',
              'mtrack_project.rapidsms_logistics.logistics.log': 'mtrack_project.rapidsms_logistics.logistics.log',
              'mtrack_project.rapidsms_logistics.logistics.models.*': 'logistics.errors.*',
              'mtrack_project.rapidsms_logistics.logistics.models.Contact': 'rapidsms.models.Contact',
              'mtrack_project.rapidsms_logistics.logistics.models.ExtensibleModelBase': 'rapidsms.models.ExtensibleModelBase',
              'mtrack_project.rapidsms_logistics.logistics.models.LOGISTICS_EMERGENCY_LEVEL_IN_MONTHS': 'mtrack_project.rapidsms_logistics.logistics.settings.LOGISTICS_EMERGENCY_LEVEL_IN_MONTHS',
              'mtrack_project.rapidsms_logistics.logistics.models.LOGISTICS_MAXIMUM_LEVEL_IN_MONTHS': 'mtrack_project.rapidsms_logistics.logistics.settings.LOGISTICS_MAXIMUM_LEVEL_IN_MONTHS',
              'mtrack_project.rapidsms_logistics.logistics.models.LOGISTICS_REORDER_LEVEL_IN_MONTHS': 'mtrack_project.rapidsms_logistics.logistics.settings.LOGISTICS_REORDER_LEVEL_IN_MONTHS',
              'mtrack_project.rapidsms_logistics.logistics.models.Location': 'rapidsms.contrib.locations.models.Location',
              'mtrack_project.rapidsms_logistics.logistics.models.PositiveIntegerField': 'django.db.models.fields.PositiveIntegerField',
              'mtrack_project.rapidsms_logistics.logistics.models.Q': 'django.db.models.Q',
              'mtrack_project.rapidsms_logistics.logistics.models.Reports': 'logistics.const.Reports',
              'mtrack_project.rapidsms_logistics.logistics.models.Sum': 'django.db.models.Sum',
              'mtrack_project.rapidsms_logistics.logistics.models.User': 'django.contrib.auth.models.User',
              'mtrack_project.rapidsms_logistics.logistics.models._': 'django.utils.translation.ugettext',
              'mtrack_project.rapidsms_logistics.logistics.models.config': 'logistics.util.config',
              'mtrack_project.rapidsms_logistics.logistics.models.create_user_profile': 'logistics.signals.create_user_profile',
              'mtrack_project.rapidsms_logistics.logistics.models.datetime': 'datetime.datetime',
              'mtrack_project.rapidsms_logistics.logistics.models.logging': 'logging',
              'mtrack_project.rapidsms_logistics.logistics.models.math': 'math',
              'mtrack_project.rapidsms_logistics.logistics.models.messagelog': 'logistics.config.messagelog',
              'mtrack_project.rapidsms_logistics.logistics.models.models': 'django.db.models',
              'mtrack_project.rapidsms_logistics.logistics.models.post_save': 'django.db.models.signals.post_save',
              'mtrack_project.rapidsms_logistics.logistics.models.post_save_product_report': 'logistics.signals.post_save_product_report',
              'mtrack_project.rapidsms_logistics.logistics.models.re': 're',
              'mtrack_project.rapidsms_logistics.logistics.models.relativedelta': 'dateutil.relativedelta.relativedelta',
              'mtrack_project.rapidsms_logistics.logistics.models.send_message': 'rapidsms.contrib.messaging.utils.send_message',
              'mtrack_project.rapidsms_logistics.logistics.models.settings': 'rapidsms.conf.settings',
              'mtrack_project.rapidsms_logistics.logistics.models.stockout_resolved': 'logistics.signals.stockout_resolved',
              'mtrack_project.rapidsms_logistics.logistics.models.uuid': 'uuid',
              'mtrack_project.rapidsms_logistics.logistics.reports.Contact': 'rapidsms.models.Contact',
              'mtrack_project.rapidsms_logistics.logistics.reports.DateSpan': 'dimagi.utils.dates.DateSpan',
              'mtrack_project.rapidsms_logistics.logistics.reports.F': 'django.db.models.expressions.F',
              'mtrack_project.rapidsms_logistics.logistics.reports.Product': 'logistics.models.Product',
              'mtrack_project.rapidsms_logistics.logistics.reports.ProductReport': 'logistics.models.ProductReport',
              'mtrack_project.rapidsms_logistics.logistics.reports.ProductStock': 'logistics.models.ProductStock',
              'mtrack_project.rapidsms_logistics.logistics.reports.Q': 'django.db.models.Q',
              'mtrack_project.rapidsms_logistics.logistics.reports.ReportingTable': 'logistics.tables.ReportingTable',
              'mtrack_project.rapidsms_logistics.logistics.reports.Reports': 'logistics.const.Reports',
              'mtrack_project.rapidsms_logistics.logistics.reports.StockRequest': 'logistics.models.StockRequest',
              'mtrack_project.rapidsms_logistics.logistics.reports.Sum': 'django.db.models.Sum',
              'mtrack_project.rapidsms_logistics.logistics.reports.SupplyPoint': 'logistics.models.SupplyPoint',
              'mtrack_project.rapidsms_logistics.logistics.reports.config': 'mtrack_project.rapidsms_logistics.logistics.config',
              'mtrack_project.rapidsms_logistics.logistics.reports.import_module': 'django.utils.importlib.import_module',
              'mtrack_project.rapidsms_logistics.logistics.reports.json': 'json',
              'mtrack_project.rapidsms_logistics.logistics.reports.logistics_models': 'logistics.models',
              'mtrack_project.rapidsms_logistics.logistics.reports.reverse': 'django.core.urlresolvers.reverse',
              'mtrack_project.rapidsms_logistics.logistics.reports.settings': 'rapidsms.conf.settings',
              'mtrack_project.rapidsms_logistics.logistics.reports.timedelta': 'datetime.timedelta',
              'mtrack_project.rapidsms_logistics.logistics.signals.LogisticsProfile': 'logistics.models.LogisticsProfile',
              'mtrack_project.rapidsms_logistics.logistics.signals.Reports': 'logistics.const.Reports',
              'mtrack_project.rapidsms_logistics.logistics.signals.Signal': 'django.dispatch.Signal',
              'mtrack_project.rapidsms_logistics.logistics.signals.StockTransaction': 'logistics.models.StockTransaction',
              'mtrack_project.rapidsms_logistics.logistics.signals.datetime': 'datetime.datetime',
              'mtrack_project.rapidsms_logistics.logistics.signals.logging': 'logging',
              'mtrack_project.rapidsms_logistics.logistics.signals.transaction': 'django.db.transaction',
              'mtrack_project.rapidsms_logistics.logistics.tables.Column': 'djtables.Column',
              'mtrack_project.rapidsms_logistics.logistics.tables.DateColumn': 'djtables.column.DateColumn',
              'mtrack_project.rapidsms_logistics.logistics.tables.Table': 'djtables.Table',
              'mtrack_project.rapidsms_logistics.logistics.tables.reverse': 'django.core.urlresolvers.reverse',
              'mtrack_project.rapidsms_logistics.logistics.tables.settings': 'mtrack_project.rapidsms_logistics.logistics.settings',
              'mtrack_project.rapidsms_logistics.logistics.templatetags.geonav_tags.render_to_string': 'django.template.loader.render_to_string',
              'mtrack_project.rapidsms_logistics.logistics.templatetags.geonav_tags.template': 'django.template',
              'mtrack_project.rapidsms_logistics.logistics.templatetags.logistics_extras.percent': 'logistics.templatetags.math_tags.percent',
              'mtrack_project.rapidsms_logistics.logistics.templatetags.logistics_extras.template': 'django.template',
              'mtrack_project.rapidsms_logistics.logistics.templatetags.logistics_report_tags.Count': 'django.db.models.aggregates.Count',
              'mtrack_project.rapidsms_logistics.logistics.templatetags.logistics_report_tags.DateSpan': 'dimagi.utils.dates.DateSpan',
              'mtrack_project.rapidsms_logistics.logistics.templatetags.logistics_report_tags.F': 'django.db.models.expressions.F',
              'mtrack_project.rapidsms_logistics.logistics.templatetags.logistics_report_tags.FacilitySupplyPointRow': 'logistics.reports.FacilitySupplyPointRow',
              'mtrack_project.rapidsms_logistics.logistics.templatetags.logistics_report_tags.HSASupplyPointRow': 'logistics.reports.HSASupplyPointRow',
              'mtrack_project.rapidsms_logistics.logistics.templatetags.logistics_report_tags.Product': 'logistics.models.Product',
              'mtrack_project.rapidsms_logistics.logistics.templatetags.logistics_report_tags.ProductAvailabilitySummary': 'logistics.reports.ProductAvailabilitySummary',
              'mtrack_project.rapidsms_logistics.logistics.templatetags.logistics_report_tags.ProductAvailabilitySummaryByFacility': 'logistics.reports.ProductAvailabilitySummaryByFacility',
              'mtrack_project.rapidsms_logistics.logistics.templatetags.logistics_report_tags.ProductStock': 'logistics.models.ProductStock',
              'mtrack_project.rapidsms_logistics.logistics.templatetags.logistics_report_tags.Q': 'django.db.models.query_utils.Q',
              'mtrack_project.rapidsms_logistics.logistics.templatetags.logistics_report_tags.ReportingBreakdown': 'logistics.reports.ReportingBreakdown',
              'mtrack_project.rapidsms_logistics.logistics.templatetags.logistics_report_tags.ShortMessageTable': 'logistics.tables.ShortMessageTable',
              'mtrack_project.rapidsms_logistics.logistics.templatetags.logistics_report_tags.StockRequest': 'logistics.models.StockRequest',
              'mtrack_project.rapidsms_logistics.logistics.templatetags.logistics_report_tags.StockRequestStatus': 'logistics.models.StockRequestStatus',
              'mtrack_project.rapidsms_logistics.logistics.templatetags.logistics_report_tags.SupplyPoint': 'logistics.models.SupplyPoint',
              'mtrack_project.rapidsms_logistics.logistics.templatetags.logistics_report_tags.custom_settings': 'logistics.context_processors.custom_settings',
              'mtrack_project.rapidsms_logistics.logistics.templatetags.logistics_report_tags.datetime': 'datetime.datetime',
              'mtrack_project.rapidsms_logistics.logistics.templatetags.logistics_report_tags.defaultdict': 'collections.defaultdict',
              'mtrack_project.rapidsms_logistics.logistics.templatetags.logistics_report_tags.get_location_children': 'logistics.views.get_location_children',
              'mtrack_project.rapidsms_logistics.logistics.templatetags.logistics_report_tags.messagelog': 'logistics.config.messagelog',
              'mtrack_project.rapidsms_logistics.logistics.templatetags.logistics_report_tags.render_to_string': 'django.template.loader.render_to_string',
              'mtrack_project.rapidsms_logistics.logistics.templatetags.logistics_report_tags.settings': 'django.conf.settings',
              'mtrack_project.rapidsms_logistics.logistics.templatetags.logistics_report_tags.template': 'django.template',
              'mtrack_project.rapidsms_logistics.logistics.templatetags.logistics_report_tags.timedelta': 'datetime.timedelta',
              'mtrack_project.rapidsms_logistics.logistics.templatetags.logistics_tags.reverse': 'django.core.urlresolvers.reverse',
              'mtrack_project.rapidsms_logistics.logistics.templatetags.logistics_tags.template': 'django.template',
              'mtrack_project.rapidsms_logistics.logistics.templatetags.math_tags.render_to_string': 'django.template.loader.render_to_string',
              'mtrack_project.rapidsms_logistics.logistics.templatetags.math_tags.template': 'django.template',
              'mtrack_project.rapidsms_logistics.logistics.templatetags.nav_tags.config': 'logistics.util.config',
              'mtrack_project.rapidsms_logistics.logistics.templatetags.nav_tags.template': 'django.template',
              'mtrack_project.rapidsms_logistics.logistics.tests.*': 'mtrack_project.rapidsms_logistics.logistics.tests.consumption.*',
              'mtrack_project.rapidsms_logistics.logistics.tests.consumption.Facility': 'logistics.models.SupplyPoint',
              'mtrack_project.rapidsms_logistics.logistics.tests.consumption.Location': 'logistics.models.Location',
              'mtrack_project.rapidsms_logistics.logistics.tests.consumption.Product': 'logistics.models.Product',
              'mtrack_project.rapidsms_logistics.logistics.tests.consumption.ProductReport': 'logistics.models.ProductReport',
              'mtrack_project.rapidsms_logistics.logistics.tests.consumption.ProductReportType': 'logistics.models.ProductReportType',
              'mtrack_project.rapidsms_logistics.logistics.tests.consumption.ProductStock': 'logistics.models.ProductStock',
              'mtrack_project.rapidsms_logistics.logistics.tests.consumption.ProductType': 'logistics.models.ProductType',
              'mtrack_project.rapidsms_logistics.logistics.tests.consumption.Reports': 'logistics.const.Reports',
              'mtrack_project.rapidsms_logistics.logistics.tests.consumption.StockTransaction': 'logistics.models.StockTransaction',
              'mtrack_project.rapidsms_logistics.logistics.tests.consumption.SupplyPoint': 'logistics.models.SupplyPoint',
              'mtrack_project.rapidsms_logistics.logistics.tests.consumption.SupplyPointType': 'logistics.models.SupplyPointType',
              'mtrack_project.rapidsms_logistics.logistics.tests.consumption.TestScript': 'rapidsms.tests.scripted.TestScript',
              'mtrack_project.rapidsms_logistics.logistics.tests.consumption.load_test_data': 'logistics.tests.util.load_test_data',
              'mtrack_project.rapidsms_logistics.logistics.tests.consumption.timedelta': 'datetime.timedelta',
              'mtrack_project.rapidsms_logistics.logistics.tests.util.TestScript': 'rapidsms.tests.scripted.TestScript',
              'mtrack_project.rapidsms_logistics.logistics.tests.util.logi_loader': 'logistics.loader',
              'mtrack_project.rapidsms_logistics.logistics.urls.*': 'logistics.urls.logistics.*',
              'mtrack_project.rapidsms_logistics.logistics.urls.absolute_import': '__future__.absolute_import',
              'mtrack_project.rapidsms_logistics.logistics.urls.config.*': 'django.conf.urls.defaults.*',
              'mtrack_project.rapidsms_logistics.logistics.urls.config.absolute_import': '__future__.absolute_import',
              'mtrack_project.rapidsms_logistics.logistics.urls.config.redirect_to': 'django.views.generic.simple.redirect_to',
              'mtrack_project.rapidsms_logistics.logistics.urls.config.views': 'mtrack_project.rapidsms_logistics.logistics.urls.logistics.views',
              'mtrack_project.rapidsms_logistics.logistics.urls.logistics.*': 'django.conf.urls.defaults.*',
              'mtrack_project.rapidsms_logistics.logistics.urls.logistics.ProductReport': 'models.ProductReport',
              'mtrack_project.rapidsms_logistics.logistics.urls.logistics.ProductStock': 'models.ProductStock',
              'mtrack_project.rapidsms_logistics.logistics.urls.logistics.direct_to_template': 'django.views.generic.simple.direct_to_template',
              'mtrack_project.rapidsms_logistics.logistics.urls.logistics.get_geography': 'models.get_geography',
              'mtrack_project.rapidsms_logistics.logistics.urls.logistics.redirect_to': 'django.views.generic.simple.redirect_to',
              'mtrack_project.rapidsms_logistics.logistics.util.config': 'mtrack_project.rapidsms_logistics.logistics.config',
              'mtrack_project.rapidsms_logistics.logistics.util.import_module': 'django.utils.importlib.import_module',
              'mtrack_project.rapidsms_logistics.logistics.util.settings': 'rapidsms.conf.settings',
              'mtrack_project.rapidsms_logistics.logistics.view_decorators.Location': 'logistics.models.Location',
              'mtrack_project.rapidsms_logistics.logistics.view_decorators.Product': 'logistics.models.Product',
              'mtrack_project.rapidsms_logistics.logistics.view_decorators.ProductType': 'logistics.models.ProductType',
              'mtrack_project.rapidsms_logistics.logistics.view_decorators.get_geography': 'logistics.models.get_geography',
              'mtrack_project.rapidsms_logistics.logistics.view_decorators.get_object_or_404': 'django.shortcuts.get_object_or_404',
              'mtrack_project.rapidsms_logistics.logistics.view_decorators.settings': 'rapidsms.conf.settings',
              'mtrack_project.rapidsms_logistics.logistics.views.CommodityForm': 'mtrack_project.rapidsms_logistics.logistics.forms.CommodityForm',
              'mtrack_project.rapidsms_logistics.logistics.views.CommodityTable': 'mtrack_project.rapidsms_logistics.logistics.tables.CommodityTable',
              'mtrack_project.rapidsms_logistics.logistics.views.DateSpan': 'dimagi.utils.dates.DateSpan',
              'mtrack_project.rapidsms_logistics.logistics.views.FacilityForm': 'mtrack_project.rapidsms_logistics.logistics.forms.FacilityForm',
              'mtrack_project.rapidsms_logistics.logistics.views.FacilityTable': 'mtrack_project.rapidsms_logistics.logistics.tables.FacilityTable',
              'mtrack_project.rapidsms_logistics.logistics.views.Http404': 'django.http.Http404',
              'mtrack_project.rapidsms_logistics.logistics.views.HttpResponse': 'django.http.HttpResponse',
              'mtrack_project.rapidsms_logistics.logistics.views.HttpResponseRedirect': 'django.http.HttpResponseRedirect',
              'mtrack_project.rapidsms_logistics.logistics.views.Location': 'rapidsms.contrib.locations.models.Location',
              'mtrack_project.rapidsms_logistics.logistics.views.LogisticsProfile': 'logistics.models.LogisticsProfile',
              'mtrack_project.rapidsms_logistics.logistics.views.ModelDataset': 'django_tablib.ModelDataset',
              'mtrack_project.rapidsms_logistics.logistics.views.Product': 'mtrack_project.rapidsms_logistics.logistics.models.Product',
              'mtrack_project.rapidsms_logistics.logistics.views.ProductReport': 'logistics.models.ProductReport',
              'mtrack_project.rapidsms_logistics.logistics.views.ProductReportsHelper': 'logistics.models.ProductReportsHelper',
              'mtrack_project.rapidsms_logistics.logistics.views.ProductStock': 'logistics.models.ProductStock',
              'mtrack_project.rapidsms_logistics.logistics.views.Q': 'django.db.models.Q',
              'mtrack_project.rapidsms_logistics.logistics.views.ReportingBreakdown': 'logistics.reports.ReportingBreakdown',
              'mtrack_project.rapidsms_logistics.logistics.views.Reports': 'logistics.const.Reports',
              'mtrack_project.rapidsms_logistics.logistics.views.RequestContext': 'django.template.RequestContext',
              'mtrack_project.rapidsms_logistics.logistics.views.StockTransaction': 'logistics.models.StockTransaction',
              'mtrack_project.rapidsms_logistics.logistics.views.SupplyPoint': 'logistics.models.SupplyPoint',
              'mtrack_project.rapidsms_logistics.logistics.views._': 'django.utils.translation.ugettext',
              'mtrack_project.rapidsms_logistics.logistics.views.cache_page': 'django.views.decorators.cache.cache_page',
              'mtrack_project.rapidsms_logistics.logistics.views.config': 'logistics.util.config',
              'mtrack_project.rapidsms_logistics.logistics.views.datetime': 'datetime.datetime',
              'mtrack_project.rapidsms_logistics.logistics.views.filter_context': 'logistics.view_decorators.filter_context',
              'mtrack_project.rapidsms_logistics.logistics.views.geography_context': 'logistics.view_decorators.geography_context',
              'mtrack_project.rapidsms_logistics.logistics.views.get_object_or_404': 'django.shortcuts.get_object_or_404',
              'mtrack_project.rapidsms_logistics.logistics.views.get_reporting_and_nonreporting_facilities': 'logistics.reports.get_reporting_and_nonreporting_facilities',
              'mtrack_project.rapidsms_logistics.logistics.views.json': 'json',
              'mtrack_project.rapidsms_logistics.logistics.views.mimetype_map': 'django_tablib.base.mimetype_map',
              'mtrack_project.rapidsms_logistics.logistics.views.permission_required': 'django.contrib.auth.decorators.permission_required',
              'mtrack_project.rapidsms_logistics.logistics.views.place_in_request': 'logistics.decorators.place_in_request',
              'mtrack_project.rapidsms_logistics.logistics.views.relativedelta': 'dateutil.relativedelta.relativedelta',
              'mtrack_project.rapidsms_logistics.logistics.views.render_to_response': 'django.shortcuts.render_to_response',
              'mtrack_project.rapidsms_logistics.logistics.views.require_POST': 'django.views.decorators.http.require_POST',
              'mtrack_project.rapidsms_logistics.logistics.views.reverse': 'django.core.urlresolvers.reverse',
              'mtrack_project.rapidsms_logistics.logistics.views.settings': 'rapidsms.conf.settings',
              'mtrack_project.rapidsms_logistics.logistics.views.stocklevel_plot': 'logistics.charts.stocklevel_plot',
              'mtrack_project.rapidsms_logistics.logistics.views.transaction': 'django.db.transaction',
              'mtrack_project.rapidsms_logistics.setup.find_packages': 'setuptools.find_packages',
              'mtrack_project.rapidsms_logistics.setup.setup': 'setuptools.setup',
              'mtrack_project.rapidsms_mtrack.mtrack.app.AnonymousReport': 'mtrack.models.AnonymousReport',
              'mtrack_project.rapidsms_mtrack.mtrack.app.AppBase': 'rapidsms.apps.base.AppBase',
              'mtrack_project.rapidsms_mtrack.mtrack.app.Contact': 'rapidsms.models.Contact',
              'mtrack_project.rapidsms_mtrack.mtrack.app.Flag': 'contact.models.Flag',
              'mtrack_project.rapidsms_mtrack.mtrack.app.MessageFlag': 'contact.models.MessageFlag',
              'mtrack_project.rapidsms_mtrack.mtrack.app.Poll': 'poll.models.Poll',
              'mtrack_project.rapidsms_mtrack.mtrack.app.Script': 'script.models.Script',
              'mtrack_project.rapidsms_mtrack.mtrack.app.ScriptProgress': 'script.models.ScriptProgress',
              'mtrack_project.rapidsms_mtrack.mtrack.app.datetime': 'datetime',
              'mtrack_project.rapidsms_mtrack.mtrack.app.rapidsms': 'rapidsms',
              'mtrack_project.rapidsms_mtrack.mtrack.app.settings': 'django.conf.settings',
              'mtrack_project.rapidsms_mtrack.mtrack.extensions.healthmodels.healthfacility.SupplyPoint': 'logistics.models.SupplyPoint',
              'mtrack_project.rapidsms_mtrack.mtrack.extensions.healthmodels.healthfacility.models': 'django.db.models',
              'mtrack_project.rapidsms_mtrack.mtrack.forms.AnonymousReport': 'mtrack_project.rapidsms_mtrack.mtrack.models.AnonymousReport',
              'mtrack_project.rapidsms_mtrack.mtrack.forms.HealthFacility': 'healthmodels.models.HealthFacility.HealthFacility',
              'mtrack_project.rapidsms_mtrack.mtrack.forms.HealthFacilityType': 'healthmodels.models.HealthFacility.HealthFacilityType',
              'mtrack_project.rapidsms_mtrack.mtrack.forms.Location': 'rapidsms.contrib.locations.models.Location',
              'mtrack_project.rapidsms_mtrack.mtrack.forms.forms': 'django.forms',
              'mtrack_project.rapidsms_mtrack.mtrack.loader.Backend': 'rapidsms.models.Backend',
              'mtrack_project.rapidsms_mtrack.mtrack.loader.Connection': 'rapidsms.models.Connection',
              'mtrack_project.rapidsms_mtrack.mtrack.loader.Contact': 'rapidsms.models.Contact',
              'mtrack_project.rapidsms_mtrack.mtrack.loader.ContactRole': 'logistics.models.ContactRole',
              'mtrack_project.rapidsms_mtrack.mtrack.loader.HealthFacility': 'healthmodels.models.HealthFacility',
              'mtrack_project.rapidsms_mtrack.mtrack.loader.HealthFacilityType': 'healthmodels.models.HealthFacilityType',
              'mtrack_project.rapidsms_mtrack.mtrack.loader.HealthProvider': 'healthmodels.models.HealthProvider',
              'mtrack_project.rapidsms_mtrack.mtrack.loader.Location': 'rapidsms.contrib.locations.models.Location',
              'mtrack_project.rapidsms_mtrack.mtrack.loader.LocationType': 'rapidsms.contrib.locations.models.LocationType',
              'mtrack_project.rapidsms_mtrack.mtrack.loader.Max': 'django.db.models.Max',
              'mtrack_project.rapidsms_mtrack.mtrack.loader.Min': 'django.db.models.Min',
              'mtrack_project.rapidsms_mtrack.mtrack.loader.Point': 'rapidsms.contrib.locations.models.Point',
              'mtrack_project.rapidsms_mtrack.mtrack.loader.Product': 'logistics.models.Product',
              'mtrack_project.rapidsms_mtrack.mtrack.loader.ProductReportType': 'logistics.models.ProductReportType',
              'mtrack_project.rapidsms_mtrack.mtrack.loader.ProductType': 'logistics.models.ProductType',
              'mtrack_project.rapidsms_mtrack.mtrack.loader.Reports': 'logistics.const.Reports',
              'mtrack_project.rapidsms_mtrack.mtrack.loader.SupplyPoint': 'logistics.models.SupplyPoint',
              'mtrack_project.rapidsms_mtrack.mtrack.loader.SupplyPointType': 'logistics.models.SupplyPointType',
              'mtrack_project.rapidsms_mtrack.mtrack.loader.User': 'django.contrib.auth.models.User',
              'mtrack_project.rapidsms_mtrack.mtrack.loader.config': 'logistics.util.config',
              'mtrack_project.rapidsms_mtrack.mtrack.loader.logi_loader': 'logistics.loader',
              'mtrack_project.rapidsms_mtrack.mtrack.loader.os': 'os',
              'mtrack_project.rapidsms_mtrack.mtrack.loader.random': 'random',
              'mtrack_project.rapidsms_mtrack.mtrack.loader.settings': 'django.conf.settings',
              'mtrack_project.rapidsms_mtrack.mtrack.loader.sys': 'sys',
              'mtrack_project.rapidsms_mtrack.mtrack.management.commands.create_autoreg_script.*': 'poll.models.*',
              'mtrack_project.rapidsms_mtrack.mtrack.management.commands.create_autoreg_script.BaseCommand': 'django.core.management.base.BaseCommand',
              'mtrack_project.rapidsms_mtrack.mtrack.management.commands.export_reports.BaseCommand': 'django.core.management.base.BaseCommand',
              'mtrack_project.rapidsms_mtrack.mtrack.management.commands.export_reports.Contact': 'rapidsms.models.Contact',
              'mtrack_project.rapidsms_mtrack.mtrack.management.commands.export_reports.Count': 'django.db.models.Count',
              'mtrack_project.rapidsms_mtrack.mtrack.management.commands.export_reports.ExcelResponse': 'uganda_common.utils.ExcelResponse',
              'mtrack_project.rapidsms_mtrack.mtrack.management.commands.export_reports.HealthProvider': 'healthmodels.models.HealthProvider',
              'mtrack_project.rapidsms_mtrack.mtrack.management.commands.export_reports.MTRACK_ROOT': 'mtrack.settings.MTRACK_ROOT',
              'mtrack_project.rapidsms_mtrack.mtrack.management.commands.export_reports.Message': 'rapidsms_httprouter.models.Message',
              'mtrack_project.rapidsms_mtrack.mtrack.management.commands.export_reports.Poll': 'poll.models.Poll',
              'mtrack_project.rapidsms_mtrack.mtrack.management.commands.export_reports.ScriptSession': 'script.models.ScriptSession',
              'mtrack_project.rapidsms_mtrack.mtrack.management.commands.export_reports.SortedDict': 'django.utils.datastructures.SortedDict',
              'mtrack_project.rapidsms_mtrack.mtrack.management.commands.export_reports.XFormField': 'rapidsms_xforms.models.XFormField',
              'mtrack_project.rapidsms_mtrack.mtrack.management.commands.export_reports.XFormSubmission': 'rapidsms_xforms.models.XFormSubmission',
              'mtrack_project.rapidsms_mtrack.mtrack.management.commands.export_reports.datetime': 'datetime',
              'mtrack_project.rapidsms_mtrack.mtrack.management.commands.export_reports.get_district': 'cvs.templatetags.stats_extras.get_district',
              'mtrack_project.rapidsms_mtrack.mtrack.management.commands.export_reports.os': 'os',
              'mtrack_project.rapidsms_mtrack.mtrack.management.commands.export_reports.traceback': 'traceback',
              'mtrack_project.rapidsms_mtrack.mtrack.management.commands.mtrack_init.BaseCommand': 'django.core.management.base.BaseCommand',
              'mtrack_project.rapidsms_mtrack.mtrack.management.commands.mtrack_init.logi_loader': 'logistics.loader',
              'mtrack_project.rapidsms_mtrack.mtrack.management.commands.mtrack_init.mtrack_loader': 'mtrack.loader',
              'mtrack_project.rapidsms_mtrack.mtrack.management.commands.mtrack_init_demo.BaseCommand': 'django.core.management.base.BaseCommand',
              'mtrack_project.rapidsms_mtrack.mtrack.management.commands.mtrack_init_demo.logi_loader': 'logistics.loader',
              'mtrack_project.rapidsms_mtrack.mtrack.management.commands.mtrack_init_demo.mtrack_loader': 'mtrack.loader',
              'mtrack_project.rapidsms_mtrack.mtrack.management.commands.upload_hcs.BaseCommand': 'django.core.management.base.BaseCommand',
              'mtrack_project.rapidsms_mtrack.mtrack.management.commands.upload_hcs.HealthFacility': 'healthmodels.models.HealthFacility',
              'mtrack_project.rapidsms_mtrack.mtrack.management.commands.upload_hcs.HealthFacilityType': 'healthmodels.models.HealthFacilityType',
              'mtrack_project.rapidsms_mtrack.mtrack.management.commands.upload_hcs.Location': 'rapidsms.contrib.locations.models.Location',
              'mtrack_project.rapidsms_mtrack.mtrack.management.commands.upload_hcs.LocationType': 'rapidsms.contrib.locations.models.LocationType',
              'mtrack_project.rapidsms_mtrack.mtrack.management.commands.upload_hcs.Point': 'rapidsms.contrib.locations.models.Point',
              'mtrack_project.rapidsms_mtrack.mtrack.management.commands.upload_hcs.csv': 'csv',
              'mtrack_project.rapidsms_mtrack.mtrack.management.commands.upload_hcs.pdb': 'pdb',
              'mtrack_project.rapidsms_mtrack.mtrack.management.commands.upload_hcs.transaction': 'django.db.transaction',
              'mtrack_project.rapidsms_mtrack.mtrack.models.*': 'script.models.*',
              'mtrack_project.rapidsms_mtrack.mtrack.models.Attribute': 'eav.models.Attribute',
              'mtrack_project.rapidsms_mtrack.mtrack.models.Connection': 'rapidsms.models.Connection',
              'mtrack_project.rapidsms_mtrack.mtrack.models.Contact': 'rapidsms.models.Contact',
              'mtrack_project.rapidsms_mtrack.mtrack.models.HealthFacility': 'healthmodels.models.HealthFacility.HealthFacility',
              'mtrack_project.rapidsms_mtrack.mtrack.models.HealthProviderBase': 'healthmodels.models.HealthProvider.HealthProviderBase',
              'mtrack_project.rapidsms_mtrack.mtrack.models.Location': 'rapidsms.contrib.locations.models.Location',
              'mtrack_project.rapidsms_mtrack.mtrack.models.Message': 'rapidsms_httprouter.models.Message',
              'mtrack_project.rapidsms_mtrack.mtrack.models.Poll': 'poll.models.Poll',
              'mtrack_project.rapidsms_mtrack.mtrack.models.XFORMS': 'mtrack.utils.XFORMS',
              'mtrack_project.rapidsms_mtrack.mtrack.models.XForm': 'rapidsms_xforms.models.XForm',
              'mtrack_project.rapidsms_mtrack.mtrack.models.XFormField': 'rapidsms_xforms.models.XFormField',
              'mtrack_project.rapidsms_mtrack.mtrack.models.XFormSubmission': 'rapidsms_xforms.models.XFormSubmission',
              'mtrack_project.rapidsms_mtrack.mtrack.models.datetime': 'datetime',
              'mtrack_project.rapidsms_mtrack.mtrack.models.dl_distance': 'rapidsms_xforms.models.dl_distance',
              'mtrack_project.rapidsms_mtrack.mtrack.models.find_best_response': 'script.utils.handling.find_best_response',
              'mtrack_project.rapidsms_mtrack.mtrack.models.find_closest_match': 'script.utils.handling.find_closest_match',
              'mtrack_project.rapidsms_mtrack.mtrack.models.itertools': 'itertools',
              'mtrack_project.rapidsms_mtrack.mtrack.models.models': 'django.db.models',
              'mtrack_project.rapidsms_mtrack.mtrack.models.parse_district_value': 'uganda_common.utils.parse_district_value',
              'mtrack_project.rapidsms_mtrack.mtrack.models.signals': 'mtrack.signals',
              'mtrack_project.rapidsms_mtrack.mtrack.models.xform_received': 'rapidsms_xforms.models.xform_received',
              'mtrack_project.rapidsms_mtrack.mtrack.reports.ALERTS_ACTIONED': 'mtrack.utils.ALERTS_ACTIONED',
              'mtrack_project.rapidsms_mtrack.mtrack.reports.ALERTS_CREATED': 'mtrack.utils.ALERTS_CREATED',
              'mtrack_project.rapidsms_mtrack.mtrack.reports.ALERTS_TOTAL': 'mtrack.utils.ALERTS_TOTAL',
              'mtrack_project.rapidsms_mtrack.mtrack.reports.ActiveReportersColumn': 'cvs.reports.ActiveReportersColumn',
              'mtrack_project.rapidsms_mtrack.mtrack.reports.Column': 'generic.reporting.reports.Column',
              'mtrack_project.rapidsms_mtrack.mtrack.reports.DifferenceColumn': 'uganda_common.reports.DifferenceColumn',
              'mtrack_project.rapidsms_mtrack.mtrack.reports.QuotientColumn': 'uganda_common.reports.QuotientColumn',
              'mtrack_project.rapidsms_mtrack.mtrack.reports.RegisteredReportersColumn': 'cvs.reports.RegisteredReportersColumn',
              'mtrack_project.rapidsms_mtrack.mtrack.reports.ReportView': 'generic.reporting.views.ReportView',
              'mtrack_project.rapidsms_mtrack.mtrack.reports.XFormAttributeColumn': 'uganda_common.reports.XFormAttributeColumn',
              'mtrack_project.rapidsms_mtrack.mtrack.reports.XFormReport': 'uganda_common.views.XFormReport',
              'mtrack_project.rapidsms_mtrack.mtrack.reports.XFormSubmissionColumn': 'uganda_common.reports.XFormSubmissionColumn',
              'mtrack_project.rapidsms_mtrack.mtrack.reports.active_reporters': 'cvs.utils.active_reporters',
              'mtrack_project.rapidsms_mtrack.mtrack.reports.alerts_report': 'mtrack.utils.alerts_report',
              'mtrack_project.rapidsms_mtrack.mtrack.reports.last_reporting_period': 'mtrack.utils.last_reporting_period',
              'mtrack_project.rapidsms_mtrack.mtrack.reports.registered_reporters': 'cvs.utils.registered_reporters',
              'mtrack_project.rapidsms_mtrack.mtrack.reports.reorganize_location': 'uganda_common.utils.reorganize_location',
              'mtrack_project.rapidsms_mtrack.mtrack.settings.os': 'os',
              'mtrack_project.rapidsms_mtrack.mtrack.signals.HealthFacility': 'healthmodels.models.HealthFacility',
              'mtrack_project.rapidsms_mtrack.mtrack.signals.HealthFacilityBase': 'healthmodels.models.HealthFacility.HealthFacilityBase',
              'mtrack_project.rapidsms_mtrack.mtrack.signals.ProductReportsHelper': 'logistics.models.ProductReportsHelper',
              'mtrack_project.rapidsms_mtrack.mtrack.signals.SupplyPoint': 'logistics.models.SupplyPoint',
              'mtrack_project.rapidsms_mtrack.mtrack.signals.SupplyPointType': 'logistics.models.SupplyPointType',
              'mtrack_project.rapidsms_mtrack.mtrack.signals.config': 'logistics.util.config',
              'mtrack_project.rapidsms_mtrack.mtrack.signals.const': 'logistics.const',
              'mtrack_project.rapidsms_mtrack.mtrack.signals.create_supply_point_from_facility': 'mtrack.loader.create_supply_point_from_facility',
              'mtrack_project.rapidsms_mtrack.mtrack.signals.get_location_from_facility': 'mtrack.loader.get_location_from_facility',
              'mtrack_project.rapidsms_mtrack.mtrack.signals.post_save': 'django.db.models.signals.post_save',
              'mtrack_project.rapidsms_mtrack.mtrack.signals.pre_save': 'django.db.models.signals.pre_save',
              'mtrack_project.rapidsms_mtrack.mtrack.signals.xform_received': 'rapidsms_xforms.models.xform_received',
              'mtrack_project.rapidsms_mtrack.mtrack.tests.*': 'healthmodels.models.*',
              'mtrack_project.rapidsms_mtrack.mtrack.tests.App': 'rapidsms_xforms.app.App',
              'mtrack_project.rapidsms_mtrack.mtrack.tests.Attribute': 'eav.models.Attribute',
              'mtrack_project.rapidsms_mtrack.mtrack.tests.Backend': 'rapidsms.models.Backend',
              'mtrack_project.rapidsms_mtrack.mtrack.tests.Client': 'django.test.client.Client',
              'mtrack_project.rapidsms_mtrack.mtrack.tests.Connection': 'rapidsms.models.Connection',
              'mtrack_project.rapidsms_mtrack.mtrack.tests.Contact': 'rapidsms.models.Contact',
              'mtrack_project.rapidsms_mtrack.mtrack.tests.Group': 'django.contrib.auth.models.Group',
              'mtrack_project.rapidsms_mtrack.mtrack.tests.HealthFacility': 'healthmodels.models.HealthFacility',
              'mtrack_project.rapidsms_mtrack.mtrack.tests.HealthFacilityType': 'healthmodels.models.HealthFacilityType',
              'mtrack_project.rapidsms_mtrack.mtrack.tests.HealthProvider': 'healthmodels.models.HealthProvider',
              'mtrack_project.rapidsms_mtrack.mtrack.tests.IncomingMessage': 'rapidsms.messages.incoming.IncomingMessage',
              'mtrack_project.rapidsms_mtrack.mtrack.tests.Location': 'rapidsms.contrib.locations.models.Location',
              'mtrack_project.rapidsms_mtrack.mtrack.tests.Message': 'rapidsms_httprouter.models.Message',
              'mtrack_project.rapidsms_mtrack.mtrack.tests.Point': 'rapidsms.contrib.locations.models.Point',
              'mtrack_project.rapidsms_mtrack.mtrack.tests.ProductReport': 'logistics.models.ProductReport',
              'mtrack_project.rapidsms_mtrack.mtrack.tests.Site': 'django.contrib.sites.models.Site',
              'mtrack_project.rapidsms_mtrack.mtrack.tests.TestCase': 'django.test.TestCase',
              'mtrack_project.rapidsms_mtrack.mtrack.tests.TransactionTestCase': 'django.test.TransactionTestCase',
              'mtrack_project.rapidsms_mtrack.mtrack.tests.User': 'django.contrib.auth.models.User',
              'mtrack_project.rapidsms_mtrack.mtrack.tests.ValidationError': 'django.core.exceptions.ValidationError',
              'mtrack_project.rapidsms_mtrack.mtrack.tests.datetime': 'datetime',
              'mtrack_project.rapidsms_mtrack.mtrack.tests.fake_incoming': 'cvs.tests.util.fake_incoming',
              'mtrack_project.rapidsms_mtrack.mtrack.tests.mtrack_init_demo': 'mtrack.loader.mtrack_init_demo',
              'mtrack_project.rapidsms_mtrack.mtrack.urls.AnonymousReport': 'mtrack.models.AnonymousReport',
              'mtrack_project.rapidsms_mtrack.mtrack.urls.ManagementReport': 'mtrack.reports.ManagementReport',
              'mtrack_project.rapidsms_mtrack.mtrack.urls.Message': 'rapidsms_httprouter.models.Message',
              'mtrack_project.rapidsms_mtrack.mtrack.urls.SimpleSorter': 'generic.sorters.SimpleSorter',
              'mtrack_project.rapidsms_mtrack.mtrack.urls.XFormSubmission': 'rapidsms_xforms.models.XFormSubmission',
              'mtrack_project.rapidsms_mtrack.mtrack.urls.admin': 'mtrack.views.dashboard.admin',
              'mtrack_project.rapidsms_mtrack.mtrack.urls.anonymousreports': 'mtrack.views.anonymousreports',
              'mtrack_project.rapidsms_mtrack.mtrack.urls.approve': 'mtrack.views.dashboard.approve',
              'mtrack_project.rapidsms_mtrack.mtrack.urls.direct_to_template': 'django.views.generic.simple.direct_to_template',
              'mtrack_project.rapidsms_mtrack.mtrack.urls.generic': 'generic.views.generic',
              'mtrack_project.rapidsms_mtrack.mtrack.urls.get_all_facility_reports_for_view': 'mtrack.utils.get_all_facility_reports_for_view',
              'mtrack_project.rapidsms_mtrack.mtrack.urls.get_dashboard_messages': 'mtrack.utils.get_dashboard_messages',
              'mtrack_project.rapidsms_mtrack.mtrack.urls.get_facility_reports_for_view': 'mtrack.utils.get_facility_reports_for_view',
              'mtrack_project.rapidsms_mtrack.mtrack.urls.include': 'django.conf.urls.defaults.include',
              'mtrack_project.rapidsms_mtrack.mtrack.urls.login_required': 'django.contrib.auth.decorators.login_required',
              'mtrack_project.rapidsms_mtrack.mtrack.urls.patterns': 'django.conf.urls.defaults.patterns',
              'mtrack_project.rapidsms_mtrack.mtrack.urls.url': 'django.conf.urls.defaults.url',
              'mtrack_project.rapidsms_mtrack.mtrack.utils.Count': 'django.db.models.Count',
              'mtrack_project.rapidsms_mtrack.mtrack.utils.Group': 'django.contrib.auth.models.Group',
              'mtrack_project.rapidsms_mtrack.mtrack.utils.HealthFacility': 'healthmodels.models.HealthFacility',
              'mtrack_project.rapidsms_mtrack.mtrack.utils.HealthProvider': 'healthmodels.models.HealthProvider',
              'mtrack_project.rapidsms_mtrack.mtrack.utils.Location': 'rapidsms.contrib.locations.models.Location',
              'mtrack_project.rapidsms_mtrack.mtrack.utils.Max': 'django.db.models.Max',
              'mtrack_project.rapidsms_mtrack.mtrack.utils.Min': 'django.db.models.Min',
              'mtrack_project.rapidsms_mtrack.mtrack.utils.Notification': 'alerts.models.Notification',
              'mtrack_project.rapidsms_mtrack.mtrack.utils.XFormSubmission': 'rapidsms_xforms.models.XFormSubmission',
              'mtrack_project.rapidsms_mtrack.mtrack.utils.datetime': 'datetime',
              'mtrack_project.rapidsms_mtrack.mtrack.utils.get_location_for_user': 'uganda_common.utils.get_location_for_user',
              'mtrack_project.rapidsms_mtrack.mtrack.utils.get_unsolicited_messages': 'cvs.utils.get_unsolicited_messages',
              'mtrack_project.rapidsms_mtrack.mtrack.views.anonymousreports.AnonymousEditReportForm': 'mtrack.forms.AnonymousEditReportForm',
              'mtrack_project.rapidsms_mtrack.mtrack.views.anonymousreports.AnonymousReport': 'mtrack.models.AnonymousReport',
              'mtrack_project.rapidsms_mtrack.mtrack.views.anonymousreports.HttpResponse': 'django.http.HttpResponse',
              'mtrack_project.rapidsms_mtrack.mtrack.views.anonymousreports.HttpResponseRedirect': 'django.http.HttpResponseRedirect',
              'mtrack_project.rapidsms_mtrack.mtrack.views.anonymousreports.RequestContext': 'django.template.RequestContext',
              'mtrack_project.rapidsms_mtrack.mtrack.views.anonymousreports.generic_row': 'generic.views.generic_row',
              'mtrack_project.rapidsms_mtrack.mtrack.views.anonymousreports.get_object_or_404': 'django.shortcuts.get_object_or_404',
              'mtrack_project.rapidsms_mtrack.mtrack.views.anonymousreports.login_required': 'django.contrib.auth.decorators.login_required',
              'mtrack_project.rapidsms_mtrack.mtrack.views.anonymousreports.pdb': 'pdb',
              'mtrack_project.rapidsms_mtrack.mtrack.views.anonymousreports.render_to_response': 'django.shortcuts.render_to_response',
              'mtrack_project.rapidsms_mtrack.mtrack.views.dashboard.RequestContext': 'django.template.RequestContext',
              'mtrack_project.rapidsms_mtrack.mtrack.views.dashboard.get_facility_reports': 'mtrack.utils.get_facility_reports',
              'mtrack_project.rapidsms_mtrack.mtrack.views.dashboard.get_location_for_user': 'uganda_common.utils.get_location_for_user',
              'mtrack_project.rapidsms_mtrack.mtrack.views.dashboard.get_object_or_404': 'django.shortcuts.get_object_or_404',
              'mtrack_project.rapidsms_mtrack.mtrack.views.dashboard.last_reporting_period': 'mtrack.utils.last_reporting_period',
              'mtrack_project.rapidsms_mtrack.mtrack.views.dashboard.render_to_response': 'django.shortcuts.render_to_response',
              'mtrack_project.rapidsms_mtrack.mtrack.views.dashboard.reporting_facilities': 'mtrack.utils.reporting_facilities',
              'mtrack_project.rapidsms_mtrack.mtrack.views.dashboard.reporting_vhts': 'mtrack.utils.reporting_vhts',
              'mtrack_project.rapidsms_mtrack.mtrack.views.dashboard.total_registered_facilities': 'mtrack.utils.total_registered_facilities',
              'mtrack_project.rapidsms_mtrack.mtrack.views.dashboard.total_vhts': 'mtrack.utils.total_vhts',
              'mtrack_project.rapidsms_tracking.tracking.admin.UserLog': 'tracking.models.UserLog',
              'mtrack_project.rapidsms_tracking.tracking.admin.admin': 'django.contrib.admin',
              'mtrack_project.rapidsms_tracking.tracking.middleware.AnonymousUser': 'django.contrib.auth.models.AnonymousUser',
              'mtrack_project.rapidsms_tracking.tracking.middleware.UserLog': 'tracking.models.UserLog',
              'mtrack_project.rapidsms_tracking.tracking.middleware.datetime': 'datetime',
              'mtrack_project.rapidsms_tracking.tracking.middleware.settings': 'django.conf.settings',
              'mtrack_project.rapidsms_tracking.tracking.migrations.0001_initial.SchemaMigration': 'south.v2.SchemaMigration',
              'mtrack_project.rapidsms_tracking.tracking.migrations.0001_initial.datetime': 'datetime',
              'mtrack_project.rapidsms_tracking.tracking.migrations.0001_initial.db': 'south.db.db',
              'mtrack_project.rapidsms_tracking.tracking.migrations.0001_initial.models': 'django.db.models',
              'mtrack_project.rapidsms_tracking.tracking.models.Avg': 'django.db.models.Avg',
              'mtrack_project.rapidsms_tracking.tracking.models.User': 'django.contrib.auth.models.User',
              'mtrack_project.rapidsms_tracking.tracking.models.models': 'django.db.models',
              'mtrack_project.rapidsms_tracking.tracking.urls.*': 'django.conf.urls.defaults.*',
              'mtrack_project.rapidsms_tracking.tracking.urls.SimpleSorter': 'generic.sorters.SimpleSorter',
              'mtrack_project.rapidsms_tracking.tracking.urls.TupleSorter': 'generic.sorters.TupleSorter',
              'mtrack_project.rapidsms_tracking.tracking.urls.User': 'django.contrib.auth.models.User',
              'mtrack_project.rapidsms_tracking.tracking.urls.UserLog': 'tracking.models.UserLog',
              'mtrack_project.rapidsms_tracking.tracking.urls.generic': 'generic.views.generic',
              'mtrack_project.rapidsms_tracking.tracking.urls.get_users': 'mtrack_project.rapidsms_tracking.tracking.utils.get_users',
              'mtrack_project.rapidsms_tracking.tracking.urls.login_required': 'django.contrib.auth.decorators.login_required',
              'mtrack_project.rapidsms_tracking.tracking.urls.view_user_history': 'mtrack_project.rapidsms_tracking.tracking.views.view_user_history',
              'mtrack_project.rapidsms_tracking.tracking.utils.User': 'django.contrib.auth.models.User',
              'mtrack_project.rapidsms_tracking.tracking.views.SimpleSorter': 'generic.sorters.SimpleSorter',
              'mtrack_project.rapidsms_tracking.tracking.views.User': 'django.contrib.auth.models.User',
              'mtrack_project.rapidsms_tracking.tracking.views.UserLog': 'mtrack_project.rapidsms_tracking.tracking.models.UserLog',
              'mtrack_project.rapidsms_tracking.tracking.views.generic': 'generic.views.generic',
              'mtrack_project.rapidsms_tracking.tracking.views.get_object_or_404': 'django.shortcuts.get_object_or_404',
              'mtrack_project.rapidsms_uganda_ussd.ussd.admin.Field': 'mtrack_project.rapidsms_uganda_ussd.ussd.models.Field',
              'mtrack_project.rapidsms_uganda_ussd.ussd.admin.Menu': 'mtrack_project.rapidsms_uganda_ussd.ussd.models.Menu',
              'mtrack_project.rapidsms_uganda_ussd.ussd.admin.Question': 'mtrack_project.rapidsms_uganda_ussd.ussd.models.Question',
              'mtrack_project.rapidsms_uganda_ussd.ussd.admin.admin': 'django.contrib.admin',
              'mtrack_project.rapidsms_uganda_ussd.ussd.forms.Connection': 'rapidsms.models.Connection',
              'mtrack_project.rapidsms_uganda_ussd.ussd.forms.Session': 'mtrack_project.rapidsms_uganda_ussd.ussd.models.Session',
              'mtrack_project.rapidsms_uganda_ussd.ussd.forms.assign_backend': 'uganda_common.utils.assign_backend',
              'mtrack_project.rapidsms_uganda_ussd.ussd.forms.datetime': 'datetime',
              'mtrack_project.rapidsms_uganda_ussd.ussd.forms.forms': 'django.forms',
              'mtrack_project.rapidsms_uganda_ussd.ussd.models.Connection': 'rapidsms.models.Connection',
              'mtrack_project.rapidsms_uganda_ussd.ussd.models.Contact': 'rapidsms.models.Contact',
              'mtrack_project.rapidsms_uganda_ussd.ussd.models.ImproperlyConfigured': 'django.core.exceptions.ImproperlyConfigured',
              'mtrack_project.rapidsms_uganda_ussd.ussd.models.MPTTModel': 'mptt.models.MPTTModel',
              'mtrack_project.rapidsms_uganda_ussd.ussd.models.PolymorphicManager': 'uganda_common.models.PolymorphicManager',
              'mtrack_project.rapidsms_uganda_ussd.ussd.models.PolymorphicMixin': 'uganda_common.models.PolymorphicMixin',
              'mtrack_project.rapidsms_uganda_ussd.ussd.models.ValidationError': 'django.forms.ValidationError',
              'mtrack_project.rapidsms_uganda_ussd.ussd.models.XForm': 'rapidsms_xforms.models.XForm',
              'mtrack_project.rapidsms_uganda_ussd.ussd.models.XFormField': 'rapidsms_xforms.models.XFormField',
              'mtrack_project.rapidsms_uganda_ussd.ussd.models.XFormSubmission': 'rapidsms_xforms.models.XFormSubmission',
              'mtrack_project.rapidsms_uganda_ussd.ussd.models.XFormSubmissionValue': 'rapidsms_xforms.models.XFormSubmissionValue',
              'mtrack_project.rapidsms_uganda_ussd.ussd.models.django': 'django',
              'mtrack_project.rapidsms_uganda_ussd.ussd.models.models': 'django.db.models',
              'mtrack_project.rapidsms_uganda_ussd.ussd.models.mptt': 'mptt',
              'mtrack_project.rapidsms_uganda_ussd.ussd.models.settings': 'django.conf.settings',
              'mtrack_project.rapidsms_uganda_ussd.ussd.models.xform_received': 'rapidsms_xforms.models.xform_received',
              'mtrack_project.rapidsms_uganda_ussd.ussd.tests.models_tests.Backend': 'rapidsms.models.Backend',
              'mtrack_project.rapidsms_uganda_ussd.ussd.tests.models_tests.Client': 'django.test.client.Client',
              'mtrack_project.rapidsms_uganda_ussd.ussd.tests.models_tests.Connection': 'rapidsms.models.Connection',
              'mtrack_project.rapidsms_uganda_ussd.ussd.tests.models_tests.Contact': 'rapidsms.models.Contact',
              'mtrack_project.rapidsms_uganda_ussd.ussd.tests.models_tests.TestCase': 'django.test.TestCase',
              'mtrack_project.rapidsms_uganda_ussd.ussd.tests.models_tests.XForm': 'rapidsms_xforms.models.XForm',
              'mtrack_project.rapidsms_uganda_ussd.ussd.tests.models_tests.reverse': 'django.core.urlresolvers.reverse',
              'mtrack_project.rapidsms_uganda_ussd.ussd.tests.models_tests.settings': 'django.conf.settings',
              'mtrack_project.rapidsms_uganda_ussd.ussd.tests.models_tests.urllib': 'urllib',
              'mtrack_project.rapidsms_uganda_ussd.ussd.tests.views_tests.Backend': 'rapidsms.models.Backend',
              'mtrack_project.rapidsms_uganda_ussd.ussd.tests.views_tests.Client': 'django.test.client.Client',
              'mtrack_project.rapidsms_uganda_ussd.ussd.tests.views_tests.Connection': 'rapidsms.models.Connection',
              'mtrack_project.rapidsms_uganda_ussd.ussd.tests.views_tests.Field': 'ussd.models.Field',
              'mtrack_project.rapidsms_uganda_ussd.ussd.tests.views_tests.Location': 'rapidsms.contrib.locations.models.Location',
              'mtrack_project.rapidsms_uganda_ussd.ussd.tests.views_tests.LocationType': 'rapidsms.contrib.locations.models.LocationType',
              'mtrack_project.rapidsms_uganda_ussd.ussd.tests.views_tests.Menu': 'ussd.models.Menu',
              'mtrack_project.rapidsms_uganda_ussd.ussd.tests.views_tests.Navigation': 'ussd.models.Navigation',
              'mtrack_project.rapidsms_uganda_ussd.ussd.tests.views_tests.RequestFactory': 'django.test.client.RequestFactory',
              'mtrack_project.rapidsms_uganda_ussd.ussd.tests.views_tests.Screen': 'ussd.models.Screen',
              'mtrack_project.rapidsms_uganda_ussd.ussd.tests.views_tests.Session': 'ussd.models.Session',
              'mtrack_project.rapidsms_uganda_ussd.ussd.tests.views_tests.Site': 'django.contrib.sites.models.Site',
              'mtrack_project.rapidsms_uganda_ussd.ussd.tests.views_tests.StubScreen': 'ussd.models.StubScreen',
              'mtrack_project.rapidsms_uganda_ussd.ussd.tests.views_tests.TestCase': 'django.test.TestCase',
              'mtrack_project.rapidsms_uganda_ussd.ussd.tests.views_tests.TransitionException': 'ussd.models.TransitionException',
              'mtrack_project.rapidsms_uganda_ussd.ussd.tests.views_tests.User': 'django.contrib.auth.models.User',
              'mtrack_project.rapidsms_uganda_ussd.ussd.tests.views_tests.XForm': 'rapidsms_xforms.models.XForm',
              'mtrack_project.rapidsms_uganda_ussd.ussd.tests.views_tests.XFormField': 'rapidsms_xforms.models.XFormField',
              'mtrack_project.rapidsms_uganda_ussd.ussd.tests.views_tests.XFormSubmission': 'rapidsms_xforms.models.XFormSubmission',
              'mtrack_project.rapidsms_uganda_ussd.ussd.tests.views_tests.call_command': 'django.core.management.call_command',
              'mtrack_project.rapidsms_uganda_ussd.ussd.tests.views_tests.datetime': 'datetime',
              'mtrack_project.rapidsms_uganda_ussd.ussd.tests.views_tests.loading': 'django.db.models.loading',
              'mtrack_project.rapidsms_uganda_ussd.ussd.tests.views_tests.reverse': 'django.core.urlresolvers.reverse',
              'mtrack_project.rapidsms_uganda_ussd.ussd.tests.views_tests.settings': 'django.conf.settings',
              'mtrack_project.rapidsms_uganda_ussd.ussd.tests.views_tests.urllib': 'urllib',
              'mtrack_project.rapidsms_uganda_ussd.ussd.tests.views_tests.ussd': 'ussd.views.ussd',
              'mtrack_project.rapidsms_uganda_ussd.ussd.urls.*': 'django.conf.urls.defaults.*',
              'mtrack_project.rapidsms_uganda_ussd.ussd.urls.views': 'mtrack_project.rapidsms_uganda_ussd.ussd..views',
              'mtrack_project.rapidsms_uganda_ussd.ussd.utils.models': 'django.db.models',
              'mtrack_project.rapidsms_uganda_ussd.ussd.views.HttpResponse': 'django.http.HttpResponse',
              'mtrack_project.rapidsms_uganda_ussd.ussd.views.RequestContext': 'django.template.RequestContext',
              'mtrack_project.rapidsms_uganda_ussd.ussd.views.ValidationError': 'django.forms.ValidationError',
              'mtrack_project.rapidsms_uganda_ussd.ussd.views.YoForm': 'mtrack_project.rapidsms_uganda_ussd.ussd.forms.YoForm',
              'mtrack_project.rapidsms_uganda_ussd.ussd.views.render_to_response': 'django.shortcuts.render_to_response',
              'mtrack_project.rapidsms_uganda_ussd.ussd.views.urllib': 'urllib',
              'mtrack_project.rapidsms_xforms_src.pavement.*': 'github.tools.task.*',
              'mtrack_project.rapidsms_xforms_src.pavement.find_packages': 'setuptools.find_packages',
              'mtrack_project.rapidsms_xforms_src.pavement.paver.doctools': 'paver.doctools',
              'mtrack_project.rapidsms_xforms_src.pavement.paver.misctasks': 'paver.misctasks',
              'mtrack_project.rapidsms_xforms_src.pavement.paver.virtual': 'paver.virtual',
              'mtrack_project.rapidsms_xforms_src.pavement.setup': 'paver.setuputils.setup',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.admin.XForm': 'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.models.XForm',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.admin.XFormField': 'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.models.XFormField',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.admin.XFormSubmission': 'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.models.XFormSubmission',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.admin.XFormSubmissionValue': 'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.models.XFormSubmissionValue',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.admin.admin': 'django.contrib.admin',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.app.AppBase': 'rapidsms.apps.base.AppBase',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.app.XForm': 'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.models.XForm',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.app.rapidsms': 'rapidsms',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.management.commands.loadmessages.Backend': 'rapidsms.models.Backend',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.management.commands.loadmessages.BaseCommand': 'django.core.management.base.BaseCommand',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.management.commands.loadmessages.Connection': 'rapidsms.models.Connection',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.management.commands.loadmessages.DEFAULT_DB_ALIAS': 'django.db.DEFAULT_DB_ALIAS',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.management.commands.loadmessages.Message': 'rapidsms_httprouter.models.Message',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.management.commands.loadmessages.Site': 'django.contrib.sites.models.Site',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.management.commands.loadmessages.XForm': 'rapidsms_xforms.models.XForm',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.management.commands.loadmessages.connections': 'django.db.connections',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.management.commands.loadmessages.csv': 'csv',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.management.commands.loadmessages.datetime': 'datetime.datetime',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.management.commands.loadmessages.get_apps': 'django.db.models.get_apps',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.management.commands.loadmessages.gzip': 'gzip',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.management.commands.loadmessages.make_option': 'optparse.make_option',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.management.commands.loadmessages.no_style': 'django.core.management.color.no_style',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.management.commands.loadmessages.os': 'os',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.management.commands.loadmessages.product': 'django.utils.itercompat.product',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.management.commands.loadmessages.re': 're',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.management.commands.loadmessages.router': 'django.db.router',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.management.commands.loadmessages.serializers': 'django.core.serializers',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.management.commands.loadmessages.settings': 'django.conf.settings',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.management.commands.loadmessages.sys': 'sys',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.management.commands.loadmessages.traceback': 'traceback',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.management.commands.loadmessages.transaction': 'django.db.transaction',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.management.commands.loadmessages.zipfile': 'zipfile',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.migrations.0001_initial.SchemaMigration': 'south.v2.SchemaMigration',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.migrations.0001_initial.datetime': 'datetime',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.migrations.0001_initial.db': 'south.db.db',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.migrations.0001_initial.models': 'django.db.models',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.models.Attribute': 'eav.models.Attribute',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.models.Connection': 'rapidsms.models.Connection',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.models.ContentFile': 'django.core.files.base.ContentFile',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.models.Context': 'django.template.Context',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.models.CurrentSiteManager': 'django.contrib.sites.managers.CurrentSiteManager',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.models.DEFAULT_DB_ALIAS': 'django.db.DEFAULT_DB_ALIAS',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.models.Decimal': 'decimal.Decimal',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.models.EavSlugField': 'eav.fields.EavSlugField',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.models.EntityManager': 'eav.managers.EntityManager',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.models.ExtensibleModelBase': 'rapidsms.models.ExtensibleModelBase',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.models.Group': 'django.contrib.auth.models.Group',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.models.Lock': 'threading.Lock',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.models.Message': 'rapidsms_httprouter.models.Message',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.models.Point': 'rapidsms.contrib.locations.models.Point',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.models.Site': 'django.contrib.sites.models.Site',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.models.Template': 'django.template.Template',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.models.User': 'django.contrib.auth.models.User',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.models.ValidationError': 'django.core.exceptions.ValidationError',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.models.Value': 'eav.models.Value',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.models.connections': 'django.db.connections',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.models.django.dispatch': 'django.dispatch',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.models.models': 'django.db.models',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.models.re': 're',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.models.register': 'eav.register',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.models.router': 'django.db.router',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.models.settings': 'django.conf.settings',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.models.transaction': 'django.db.transaction',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.templatetags.dumper.escape': 'django.utils.html.escape',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.templatetags.dumper.linebreaksbr': 'django.template.defaultfilters.linebreaksbr',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.templatetags.dumper.mark_safe': 'django.utils.safestring.mark_safe',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.templatetags.dumper.pformat': 'pprint.pformat',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.templatetags.dumper.template': 'django.template',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.templatetags.forms.Context': 'django.template.Context',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.templatetags.forms.Template': 'django.template.Template',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.templatetags.forms.get_template': 'django.template.loader.get_template',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.templatetags.forms.settings': 'django.conf.settings',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.templatetags.forms.slugify': 'django.template.defaultfilters.slugify',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.templatetags.forms.template': 'django.template',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.templatetags.messages.mark_safe': 'django.utils.safestring.mark_safe',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.templatetags.messages.template': 'django.template',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.templatetags.prop.template': 'django.template',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.tests.App': 'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.app.App',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.tests.Attribute': 'eav.models.Attribute',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.tests.Backend': 'rapidsms.models.Backend',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.tests.Client': 'django.test.client.Client',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.tests.Connection': 'rapidsms.models.Connection',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.tests.Group': 'django.contrib.auth.models.Group',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.tests.IncomingMessage': 'rapidsms.messages.incoming.IncomingMessage',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.tests.Site': 'django.contrib.sites.models.Site',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.tests.TestCase': 'django.test.TestCase',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.tests.TransactionTestCase': 'django.test.TransactionTestCase',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.tests.User': 'django.contrib.auth.models.User',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.tests.ValidationError': 'django.core.exceptions.ValidationError',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.tests.XForm': 'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.models.XForm',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.tests.XFormField': 'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.models.XFormField',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.tests.XFormFieldConstraint': 'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.models.XFormFieldConstraint',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.tests.lookup_user_by_connection': 'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.models.lookup_user_by_connection',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.tests.models': 'django.db.models',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.tests.os': 'os',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.tests.parseString': 'xml.dom.minidom.parseString',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.tests.re': 're',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.tests.reverse': 'django.core.urlresolvers.reverse',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.tests.settings': 'django.conf.settings',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.tests.xform_received': 'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.models.xform_received',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.urls.*': 'django.conf.urls.defaults.*',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.urls.login_required': 'django.contrib.auth.decorators.login_required',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.urls.views': 'mtrack_project.rapidsms_xforms_src.rapidsms_xforms..views',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.views.EavSlugField': 'eav.fields.EavSlugField',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.views.Fieldset': 'uni_form.helpers.Fieldset',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.views.FormHelper': 'uni_form.helpers.FormHelper',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.views.HttpDigestAuthenticator': 'django_digest.HttpDigestAuthenticator',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.views.HttpResponse': 'django.http.HttpResponse',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.views.Layout': 'uni_form.helpers.Layout',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.views.Paginator': 'django.core.paginator.Paginator',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.views.RequestContext': 'django.template.RequestContext',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.views.Site': 'django.contrib.sites.models.Site',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.views.ValidationError': 'django.core.exceptions.ValidationError',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.views.XForm': 'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.models.XForm',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.views.XFormField': 'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.models.XFormField',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.views.XFormFieldConstraint': 'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.models.XFormFieldConstraint',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.views.XFormSubmission': 'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.models.XFormSubmission',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.views.csrf_exempt': 'django.views.decorators.csrf.csrf_exempt',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.views.forms': 'django.forms',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.views.get_object_or_404': 'django.shortcuts.get_object_or_404',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.views.parse': 'xml.dom.minidom.parse',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.views.parseString': 'xml.dom.minidom.parseString',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.views.redirect': 'django.shortcuts.redirect',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.views.render_to_response': 'django.shortcuts.render_to_response',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.views.require_GET': 'django.views.decorators.http.require_GET',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.views.require_POST': 'django.views.decorators.http.require_POST',
              'mtrack_project.rapidsms_xforms_src.rapidsms_xforms.views.settings': 'django.conf.settings',
              'mtrack_project.rapidsms_xforms_src.setup.find_packages': 'setuptools.find_packages',
              'mtrack_project.rapidsms_xforms_src.setup.setup': 'setuptools.setup',
              'mtrack_project.rapidsms_xforms_src.test-runner.manage.execute_manager': 'django.core.management.execute_manager',
              'mtrack_project.rapidsms_xforms_src.test-runner.manage.settings': 'mtrack_project.rapidsms_xforms_src.test-runner.settings',
              'mtrack_project.rapidsms_xforms_src.test-runner.settings.os': 'os',
              'mtrack_project.rapidsms_xforms_src.test-runner.settings.sys': 'sys',
              'mtrack_project.rapidsms_xforms_src.test-runner.settings.tempfile': 'tempfile',
              'mtrack_project.rapidsms_xforms_src.test-runner.urls.*': 'django.conf.urls.defaults.*',
              'mtrack_project.rapidsms_xforms_src.test-runner.urls.admin': 'django.contrib.admin',
              'mtrack_project.rapidsms_xforms_src.test-runner.urls.settings': 'django.conf.settings',
              'mtrack_project.rapidsms_xforms_src.test_settings.os': 'os',
              'mtrack_project.rapidsms_xforms_src.test_settings.sys': 'sys',
              'mtrack_project.rapidsms_xforms_src.test_settings.tempfile': 'tempfile',
              'mtrack_project.settings.*': 'localsettings.*',
              'mtrack_project.settings.os': 'os',
              'mtrack_project.settings.sys': 'sys',
              'mtrack_project.settings.tempfile': 'tempfile',
              'mtrack_project.static.uganda.config.ContactRole': 'logistics.apps.logistics.models.ContactRole',
              'mtrack_project.static.uganda.config.LocationType': 'rapidsms.contrib.locations.models.LocationType',
              'mtrack_project.static.uganda.config.SupplyPointType': 'logistics.apps.logistics.models.SupplyPointType',
              'mtrack_project.static.uganda.config.messagelog': 'rapidsms.contrib.messagelog',
              'mtrack_project.static.uganda.config.settings': 'rapidsms.conf.settings',
              'mtrack_project.urls.*': 'django.conf.urls.defaults.*',
              'mtrack_project.urls.admin': 'django.contrib.admin',
              'mtrack_project.urls.contact_urls': 'contact.urls.urlpatterns',
              'mtrack_project.urls.cvs_urls': 'cvs.urls.urlpatterns',
              'mtrack_project.urls.direct_to_template': 'django.views.generic.simple.direct_to_template',
              'mtrack_project.urls.get_router': 'rapidsms_httprouter.router.get_router',
              'mtrack_project.urls.healthmodels_urls': 'healthmodels.urls.urlpatterns',
              'mtrack_project.urls.mtrack_urls': 'mtrack.urls.urlpatterns',
              'mtrack_project.urls.router_urls': 'rapidsms_httprouter.urls.urlpatterns',
              'mtrack_project.urls.settings': 'django.conf.settings',
              'mtrack_project.urls.ussd_urls': 'ussd.urls.urlpatterns',
              'mtrack_project.urls.xform_urls': 'rapidsms_xforms.urls.urlpatterns',
              'poll.admin.Category': 'poll.models.Category',
              'poll.admin.Poll': 'poll.models.Poll',
              'poll.admin.Response': 'poll.models.Response',
              'poll.admin.ResponseCategory': 'poll.models.ResponseCategory',
              'poll.admin.Rule': 'poll.models.Rule',
              'poll.admin.admin': 'django.contrib.admin',
              'poll.app.AppBase': 'rapidsms.apps.base.AppBase',
              'poll.app.Poll': 'poll.models.Poll',
              'poll.app.Q': 'django.db.models.Q',
              'poll.app.datetime': 'datetime',
              'poll.app.rapidsms': 'rapidsms',
              'poll.extensions.rapidsms.contact.models': 'django.db.models',
              'poll.forms.Category': 'poll.models.Category',
              'poll.forms.Contact': 'rapidsms.models.Contact',
              'poll.forms.Group': 'django.contrib.auth.models.Group',
              'poll.forms.Poll': 'poll.models.Poll',
              'poll.forms.RadioSelect': 'django.forms.widgets.RadioSelect',
              'poll.forms.Rule': 'poll.models.Rule',
              'poll.forms.forms': 'django.forms',
              'poll.forms.re': 're',
              'poll.management.Attribute': 'eav.models.Attribute',
              'poll.management.Site': 'django.contrib.sites.models.Site',
              'poll.management.eav_app': 'eav.models',
              'poll.management.get_models': 'django.db.models.get_models',
              'poll.management.post_syncdb': 'django.db.models.signals.post_syncdb',
              'poll.management.settings': 'django.conf.settings',
              'poll.migrations.0001_initial.SchemaMigration': 'south.v2.SchemaMigration',
              'poll.migrations.0001_initial.datetime': 'datetime',
              'poll.migrations.0001_initial.db': 'south.db.db',
              'poll.migrations.0001_initial.models': 'django.db.models',
              'poll.migrations.0003_auto__add_field_poll_response_type.SchemaMigration': 'south.v2.SchemaMigration',
              'poll.migrations.0003_auto__add_field_poll_response_type.datetime': 'datetime',
              'poll.migrations.0003_auto__add_field_poll_response_type.db': 'south.db.db',
              'poll.migrations.0003_auto__add_field_poll_response_type.models': 'django.db.models',
              'poll.models.Attribute': 'eav.models.Attribute',
              'poll.models.Avg': 'django.db.models.Avg',
              'poll.models.BulkInsertManager': 'rapidsms_httprouter.managers.BulkInsertManager',
              'poll.models.Connection': 'rapidsms.models.Connection',
              'poll.models.Contact': 'rapidsms.models.Contact',
              'poll.models.ContentType': 'django.contrib.contenttypes.models.ContentType',
              'poll.models.Count': 'django.db.models.Count',
              'poll.models.CurrentSiteManager': 'django.contrib.sites.managers.CurrentSiteManager',
              'poll.models.Location': 'rapidsms.contrib.locations.models.Location',
              'poll.models.Max': 'django.db.models.Max',
              'poll.models.Message': 'rapidsms_httprouter.models.Message',
              'poll.models.Min': 'django.db.models.Min',
              'poll.models.OutgoingMessage': 'rapidsms.messages.outgoing.OutgoingMessage',
              'poll.models.Site': 'django.contrib.sites.models.Site',
              'poll.models.StdDev': 'django.db.models.StdDev',
              'poll.models.Sum': 'django.db.models.Sum',
              'poll.models.TreeNodeChoiceField': 'mptt.forms.TreeNodeChoiceField',
              'poll.models.User': 'django.contrib.auth.models.User',
              'poll.models.ValidationError': 'django.core.exceptions.ValidationError',
              'poll.models.Value': 'eav.models.Value',
              'poll.models.connection': 'django.db.connection',
              'poll.models.datetime': 'datetime',
              'poll.models.difflib': 'difflib',
              'poll.models.forms': 'django.forms',
              'poll.models.models': 'django.db.models',
              'poll.models.nested_models': 'rapidsms.contrib.locations.nested.models',
              'poll.models.re': 're',
              'poll.models.register': 'eav.register',
              'poll.models.settings': 'django.conf.settings',
              'poll.models.transaction': 'django.db.transaction',
              'poll.templatetags.attr.template': 'django.template',
              'poll.tests.Attribute': 'eav.models.Attribute',
              'poll.tests.Backend': 'rapidsms.models.Backend',
              'poll.tests.Category': 'poll.models.Category',
              'poll.tests.Connection': 'rapidsms.models.Connection',
              'poll.tests.Contact': 'rapidsms.models.Contact',
              'poll.tests.ForUpdateManager': 'rapidsms_httprouter.managers.ForUpdateManager',
              'poll.tests.Manager': 'django.db.models.Manager',
              'poll.tests.Message': 'rapidsms_httprouter.models.Message',
              'poll.tests.Poll': 'poll.models.Poll',
              'poll.tests.Response': 'poll.models.Response',
              'poll.tests.Rule': 'poll.models.Rule',
              'poll.tests.STARTSWITH_PATTERN_TEMPLATE': 'poll.models.STARTSWITH_PATTERN_TEMPLATE',
              'poll.tests.TestCase': 'django.test.TestCase',
              'poll.tests.TestScript': 'rapidsms.tests.scripted.TestScript',
              'poll.tests.User': 'django.contrib.auth.models.User',
              'poll.tests.datetime': 'datetime.datetime',
              'poll.tests.get_router': 'rapidsms_httprouter.router.get_router',
              'poll.tests.post_save': 'django.db.models.signals.post_save',
              'poll.tests.re': 're',
              'poll.tests.settings': 'django.conf.settings',
              'poll.urls.*': 'django.conf.urls.defaults.*',
              'poll.urls.views': 'poll..views',
              'poll.views.*': 'poll.forms.*',
              'poll.views.Attribute': 'eav.models.Attribute',
              'poll.views.Backend': 'rapidsms.models.Backend',
              'poll.views.Connection': 'rapidsms.models.Connection',
              'poll.views.Count': 'django.db.models.Count',
              'poll.views.HttpResponse': 'django.http.HttpResponse',
              'poll.views.Location': 'rapidsms.contrib.locations.models.Location',
              'poll.views.OutgoingMessage': 'rapidsms.messages.outgoing.OutgoingMessage',
              'poll.views.Q': 'django.db.models.Q',
              'poll.views.RequestContext': 'django.template.RequestContext',
              'poll.views.Response': 'poll.models.Response',
              'poll.views.Site': 'django.contrib.sites.models.Site',
              'poll.views.cache_control': 'django.views.decorators.cache.cache_control',
              'poll.views.get_object_or_404': 'django.shortcuts.get_object_or_404',
              'poll.views.get_router': 'rapidsms_httprouter.router.get_router',
              'poll.views.login_required': 'django.contrib.auth.decorators.login_required',
              'poll.views.mark_safe': 'django.utils.safestring.mark_safe',
              'poll.views.permission_required': 'django.contrib.auth.decorators.permission_required',
              'poll.views.redirect': 'django.shortcuts.redirect',
              'poll.views.render_to_response': 'django.shortcuts.render_to_response',
              'poll.views.require_GET': 'django.views.decorators.http.require_GET',
              'poll.views.reverse': 'django.core.urlresolvers.reverse',
              'poll.views.settings': 'django.conf.settings',
              'poll.views.simplejson': 'django.utils.simplejson',
              'poll.views.transaction': 'django.db.transaction',
              'project.manage.execute_manager': 'django.core.management.execute_manager',
              'project.manage.settings': 'project.settings',
              'project.settings.os': 'os',
              'project.settings.sys': 'sys',
              'project.settings.tempfile': 'tempfile',
              'project.urls.*': 'django.conf.urls.defaults.*',
              'project.urls.admin': 'django.contrib.admin',
              'project.urls.contact_urls': 'contact.urls.urlpatterns',
              'project.urls.cvs_urls': 'cvs.urls.urlpatterns',
              'project.urls.healthmodels_urls': 'healthmodels.urls.urlpatterns',
              'project.urls.router_urls': 'rapidsms_httprouter.urls.urlpatterns',
              'project.urls.settings': 'django.conf.settings',
              'project.urls.xform_urls': 'rapidsms_xforms.urls.urlpatterns',
              'rapidsms-admin.django.core.management.commands.startproject': 'django.core.management.commands.startproject',
              'rapidsms-admin.management': 'django.core.management',
              'rapidsms-admin.rapidsms.management.commands.startproject': 'rapidsms.management.commands.startproject',
              'rapidsms-admin.sys': 'sys',
              'rapidsms.Message': 'rapidsms.messages.OutgoingMessage',
              'rapidsms.admin.App': 'rapidsms.models.App',
              'rapidsms.admin.Backend': 'rapidsms.models.Backend',
              'rapidsms.admin.Connection': 'rapidsms.models.Connection',
              'rapidsms.admin.Contact': 'rapidsms.models.Contact',
              'rapidsms.admin.admin': 'django.contrib.admin',
              'rapidsms.apps.base.LoggerMixin': 'log.mixin.LoggerMixin',
              'rapidsms.apps.base.get_class': 'utils.modules.get_class',
              'rapidsms.apps.base.try_import': 'utils.modules.try_import',
              'rapidsms.backends.base.B': 'rapidsms.models.Backend',
              'rapidsms.backends.base.Connection': 'models.Connection',
              'rapidsms.backends.base.IncomingMessage': 'messages.incoming.IncomingMessage',
              'rapidsms.backends.base.LoggerMixin': 'log.mixin.LoggerMixin',
              'rapidsms.backends.base.Queue': 'Queue',
              'rapidsms.backends.base.get_class': 'utils.modules.get_class',
              'rapidsms.backends.base.time': 'time',
              'rapidsms.backends.base.try_import': 'utils.modules.try_import',
              'rapidsms.backends.bucket.BackendBase': 'rapidsms.backends.base.BackendBase',
              'rapidsms.backends.email.BackendBase': 'rapidsms.backends.base.BackendBase',
              'rapidsms.backends.email.MIMEText': 'email.mime.text.MIMEText',
              'rapidsms.backends.email.absolute_import': '__future__.absolute_import',
              'rapidsms.backends.email.datetime': 'datetime.datetime',
              'rapidsms.backends.email.imaplib': 'imaplib',
              'rapidsms.backends.email.message_from_string': 'rapidsms.backends.email.message_from_string',
              'rapidsms.backends.email.re': 're',
              'rapidsms.backends.email.smtplib': 'smtplib',
              'rapidsms.backends.email.time': 'time',
              'rapidsms.backends.gsm.BackendBase': 'rapidsms.backends.base.BackendBase',
              'rapidsms.backends.gsm.Connection': 'models.Connection',
              'rapidsms.backends.gsm.IncomingMessage': 'messages.incoming.IncomingMessage',
              'rapidsms.backends.gsm.time': 'time',
              'rapidsms.backends.gsm.try_import': 'utils.modules.try_import',
              'rapidsms.backends.http.BackendBase': 'rapidsms.backends.base.BackendBase',
              'rapidsms.backends.http.HttpResponse': 'django.http.HttpResponse',
              'rapidsms.backends.http.HttpResponseBadRequest': 'django.http.HttpResponseBadRequest',
              'rapidsms.backends.http.LoggerMixin': 'rapidsms.log.mixin.LoggerMixin',
              'rapidsms.backends.http.STATUS_CODE_TEXT': 'django.core.handlers.wsgi.STATUS_CODE_TEXT',
              'rapidsms.backends.http.WSGIHandler': 'django.core.handlers.wsgi.WSGIHandler',
              'rapidsms.backends.http.WSGIRequestHandler': 'django.core.servers.basehttp.WSGIRequestHandler',
              'rapidsms.backends.http.WSGIServer': 'django.core.servers.basehttp.WSGIServer',
              'rapidsms.backends.http.datetime': 'datetime.datetime',
              'rapidsms.backends.http.http': 'django.http',
              'rapidsms.backends.http.select': 'select',
              'rapidsms.backends.http.urllib2': 'urllib2',
              'rapidsms.backends.irc.BackendBase': 'rapidsms.backends.base.BackendBase',
              'rapidsms.backends.irc.Connection': 'models.Connection',
              'rapidsms.backends.irc.try_import': 'utils.modules.try_import',
              'rapidsms.backends.kannel.HttpResponse': 'django.http.HttpResponse',
              'rapidsms.backends.kannel.HttpResponseBadRequest': 'django.http.HttpResponseBadRequest',
              'rapidsms.backends.kannel.RapidHttpBackend': 'rapidsms.backends.http.RapidHttpBackend',
              'rapidsms.backends.kannel.copy': 'copy',
              'rapidsms.backends.kannel.datetime': 'datetime.datetime',
              'rapidsms.backends.kannel.urllib': 'urllib',
              'rapidsms.backends.kannel.urllib2': 'urllib2',
              'rapidsms.backends.smpp.BackendBase': 'rapidsms.backends.base.BackendBase',
              'rapidsms.backends.smpp.Connection': 'models.Connection',
              'rapidsms.backends.smpp.socket': 'socket',
              'rapidsms.backends.smpp.time': 'time',
              'rapidsms.backends.smpp.try_import': 'utils.modules.try_import',
              'rapidsms.conf.settings': 'django.conf.settings',
              'rapidsms.contrib.ajax.app.AppBase': 'rapidsms.apps.base.AppBase',
              'rapidsms.contrib.ajax.app.BaseHTTPRequestHandler': 'BaseHTTPServer.BaseHTTPRequestHandler',
              'rapidsms.contrib.ajax.app.HTTPServer': 'BaseHTTPServer.HTTPServer',
              'rapidsms.contrib.ajax.app.JSONEncoder': 'django.utils.simplejson.JSONEncoder',
              'rapidsms.contrib.ajax.app.QuerySet': 'django.db.models.query.QuerySet',
              'rapidsms.contrib.ajax.app.Thread': 'threading.Thread',
              'rapidsms.contrib.ajax.app.ThreadingMixIn': 'SocketServer.ThreadingMixIn',
              'rapidsms.contrib.ajax.app.cgi': 'cgi',
              'rapidsms.contrib.ajax.app.settings': 'rapidsms.conf.settings',
              'rapidsms.contrib.ajax.app.traceback': 'traceback',
              'rapidsms.contrib.ajax.app.urlparse': 'urlparse',
              'rapidsms.contrib.ajax.urls.*': 'django.conf.urls.defaults.*',
              'rapidsms.contrib.ajax.urls.views': 'rapidsms.contrib.ajax..views',
              'rapidsms.contrib.ajax.utils.JSONDecoder': 'django.utils.simplejson.JSONDecoder',
              'rapidsms.contrib.ajax.utils.copy': 'copy.copy',
              'rapidsms.contrib.ajax.utils.exceptions': 'rapidsms.contrib.ajax..exceptions',
              'rapidsms.contrib.ajax.utils.settings': 'rapidsms.conf.settings',
              'rapidsms.contrib.ajax.utils.urllib': 'urllib',
              'rapidsms.contrib.ajax.utils.urllib2': 'urllib2',
              'rapidsms.contrib.ajax.views.HttpResponse': 'django.http.HttpResponse',
              'rapidsms.contrib.ajax.views.request': 'rapidsms.contrib.ajax.utils.request',
              'rapidsms.contrib.default.app.AppBase': 'rapidsms.apps.base.AppBase',
              'rapidsms.contrib.default.app.settings': 'rapidsms.conf.settings',
              'rapidsms.contrib.echo.handlers.echo.KeywordHandler': 'rapidsms.contrib.handlers.handlers.keyword.KeywordHandler',
              'rapidsms.contrib.echo.handlers.ping.BaseHandler': 'rapidsms.contrib.handlers.handlers.base.BaseHandler',
              'rapidsms.contrib.export.urls.*': 'django.conf.urls.defaults.*',
              'rapidsms.contrib.export.urls.views': 'rapidsms.contrib.export..views',
              'rapidsms.contrib.export.views.PIPE': 'subprocess.PIPE',
              'rapidsms.contrib.export.views.Popen': 'subprocess.Popen',
              'rapidsms.contrib.export.views.datetime': 'datetime',
              'rapidsms.contrib.export.views.http': 'django.http',
              'rapidsms.contrib.export.views.os': 'os',
              'rapidsms.contrib.export.views.settings': 'django.conf.settings',
              'rapidsms.contrib.handlers.app.AppBase': 'rapidsms.apps.base.AppBase',
              'rapidsms.contrib.handlers.app.get_handlers': 'rapidsms.contrib.handlers.utils.get_handlers',
              'rapidsms.contrib.handlers.handlers.base.Backend': 'rapidsms.models.Backend',
              'rapidsms.contrib.handlers.handlers.base.Connection': 'rapidsms.models.Connection',
              'rapidsms.contrib.handlers.handlers.base.IncomingMessage': 'rapidsms.messages.IncomingMessage',
              'rapidsms.contrib.handlers.handlers.base.LoggerMixin': 'rapidsms.log.mixin.LoggerMixin',
              'rapidsms.contrib.handlers.handlers.keyword.BaseHandler': 'rapidsms.contrib.handlers.handlers.base.BaseHandler',
              'rapidsms.contrib.handlers.handlers.keyword.ObjectDoesNotExist': 'django.core.exceptions.ObjectDoesNotExist',
              'rapidsms.contrib.handlers.handlers.keyword.re': 're',
              'rapidsms.contrib.handlers.handlers.pattern.BaseHandler': 'rapidsms.contrib.handlers.handlers.base.BaseHandler',
              'rapidsms.contrib.handlers.handlers.pattern.re': 're',
              'rapidsms.contrib.handlers.migrations.0001_initial.SchemaMigration': 'south.v2.SchemaMigration',
              'rapidsms.contrib.handlers.migrations.0001_initial.datetime': 'datetime',
              'rapidsms.contrib.handlers.migrations.0001_initial.db': 'south.db.db',
              'rapidsms.contrib.handlers.migrations.0001_initial.models': 'django.db.models',
              'rapidsms.contrib.handlers.tests.EchoHandler': 'rapidsms.contrib.echo.handlers.echo.EchoHandler',
              'rapidsms.contrib.handlers.tests.PingHandler': 'rapidsms.contrib.echo.handlers.ping.PingHandler',
              'rapidsms.contrib.handlers.tests.assert_equal': 'nose.tools.assert_equal',
              'rapidsms.contrib.handlers.tests.get_handlers': 'rapidsms.contrib.handlers.utils.get_handlers',
              'rapidsms.contrib.handlers.tests.settings': 'rapidsms.conf.settings',
              'rapidsms.contrib.handlers.utils.BaseHandler': 'rapidsms.contrib.handlers.handlers.base.BaseHandler',
              'rapidsms.contrib.handlers.utils.find_python_files': 'rapidsms.utils.modules.find_python_files',
              'rapidsms.contrib.handlers.utils.get_class': 'rapidsms.utils.modules.get_class',
              'rapidsms.contrib.handlers.utils.settings': 'rapidsms.conf.settings',
              'rapidsms.contrib.handlers.utils.try_import': 'rapidsms.utils.modules.try_import',
              'rapidsms.contrib.httptester.app.AppBase': 'rapidsms.apps.base.AppBase',
              'rapidsms.contrib.httptester.app.BackendBase': 'rapidsms.backends.base.BackendBase',
              'rapidsms.contrib.httptester.app.IncomingMessage': 'rapidsms.messages.IncomingMessage',
              'rapidsms.contrib.httptester.app.OutgoingMessage': 'rapidsms.messages.OutgoingMessage',
              'rapidsms.contrib.httptester.app.settings': 'rapidsms.conf.settings',
              'rapidsms.contrib.httptester.app.time': 'time',
              'rapidsms.contrib.httptester.backend.BackendBase': 'rapidsms.backends.base.BackendBase',
              'rapidsms.contrib.httptester.forms.forms': 'django.forms',
              'rapidsms.contrib.httptester.urls.*': 'django.conf.urls.defaults.*',
              'rapidsms.contrib.httptester.urls.views': 'rapidsms.contrib.httptester..views',
              'rapidsms.contrib.httptester.utils.call_router': 'rapidsms.contrib.ajax.utils.call_router',
              'rapidsms.contrib.httptester.utils.curry': 'django.utils.functional.curry',
              'rapidsms.contrib.httptester.views.HttpResponseRedirect': 'django.http.HttpResponseRedirect',
              'rapidsms.contrib.httptester.views.RequestContext': 'django.template.RequestContext',
              'rapidsms.contrib.httptester.views.RouterNotResponding': 'rapidsms.contrib.ajax.exceptions.RouterNotResponding',
              'rapidsms.contrib.httptester.views.forms': 'rapidsms.contrib.httptester..forms',
              'rapidsms.contrib.httptester.views.randint': 'random.randint',
              'rapidsms.contrib.httptester.views.render_to_response': 'django.shortcuts.render_to_response',
              'rapidsms.contrib.httptester.views.require_GET': 'django.views.decorators.http.require_GET',
              'rapidsms.contrib.httptester.views.require_POST': 'django.views.decorators.http.require_POST',
              'rapidsms.contrib.httptester.views.reverse': 'django.core.urlresolvers.reverse',
              'rapidsms.contrib.httptester.views.utils': 'rapidsms.contrib.httptester..utils',
              'rapidsms.contrib.locations.admin.Location': 'rapidsms.contrib.locations.models.Location',
              'rapidsms.contrib.locations.admin.LocationType': 'rapidsms.contrib.locations.models.LocationType',
              'rapidsms.contrib.locations.admin.admin': 'django.contrib.admin',
              'rapidsms.contrib.locations.app.*': 'rapidsms.contrib.locations.models.*',
              'rapidsms.contrib.locations.app.AppBase': 'rapidsms.apps.base.AppBase',
              'rapidsms.contrib.locations.app.re': 're',
              'rapidsms.contrib.locations.forms.*': 'rapidsms.contrib.locations.models.*',
              'rapidsms.contrib.locations.forms._': 'django.utils.translation.ugettext_lazy',
              'rapidsms.contrib.locations.forms.fields': 'django.forms.fields',
              'rapidsms.contrib.locations.forms.forms': 'django.forms',
              'rapidsms.contrib.locations.forms.widgets': 'django.forms.widgets',
              'rapidsms.contrib.locations.migrations.0001_initial.SchemaMigration': 'south.v2.SchemaMigration',
              'rapidsms.contrib.locations.migrations.0001_initial.datetime': 'datetime',
              'rapidsms.contrib.locations.migrations.0001_initial.db': 'south.db.db',
              'rapidsms.contrib.locations.migrations.0001_initial.models': 'django.db.models',
              'rapidsms.contrib.locations.migrations.0002_initial.SchemaMigration': 'south.v2.SchemaMigration',
              'rapidsms.contrib.locations.migrations.0002_initial.datetime': 'datetime',
              'rapidsms.contrib.locations.migrations.0002_initial.db': 'south.db.db',
              'rapidsms.contrib.locations.migrations.0002_initial.models': 'django.db.models',
              'rapidsms.contrib.locations.models.ContentType': 'django.contrib.contenttypes.models.ContentType',
              'rapidsms.contrib.locations.models.ExtensibleModelBase': 'rapidsms.models.ExtensibleModelBase',
              'rapidsms.contrib.locations.models.escape': 'django.utils.html.escape',
              'rapidsms.contrib.locations.models.generic': 'django.contrib.contenttypes.generic',
              'rapidsms.contrib.locations.models.models': 'django.db.models',
              'rapidsms.contrib.locations.models.re': 're',
              'rapidsms.contrib.locations.nested.extensions.locations.location.LocationType': 'rapidsms.contrib.locations.models.LocationType',
              'rapidsms.contrib.locations.nested.extensions.locations.location.models': 'django.db.models',
              'rapidsms.contrib.locations.nested.models.Location': 'rapidsms.contrib.locations.models.Location',
              'rapidsms.contrib.locations.nested.models.mptt': 'mptt',
              'rapidsms.contrib.locations.tables.Column': 'djtables.Column',
              'rapidsms.contrib.locations.tables.Table': 'djtables.Table',
              'rapidsms.contrib.locations.urls.*': 'django.conf.urls.defaults.*',
              'rapidsms.contrib.locations.urls.views': 'rapidsms.contrib.locations..views',
              'rapidsms.contrib.locations.utils.Location': 'rapidsms.contrib.locations.models.Location',
              'rapidsms.contrib.locations.utils.LocationForm': 'rapidsms.contrib.locations.forms.LocationForm',
              'rapidsms.contrib.locations.utils.try_import': 'rapidsms.utils.modules.try_import',
              'rapidsms.contrib.locations.views.*': 'rapidsms.contrib.locations.tables.*',
              'rapidsms.contrib.locations.views.HttpResponseRedirect': 'django.http.HttpResponseRedirect',
              'rapidsms.contrib.locations.views.RequestContext': 'django.template.RequestContext',
              'rapidsms.contrib.locations.views.get_object_or_404': 'django.shortcuts.get_object_or_404',
              'rapidsms.contrib.locations.views.render_to_response': 'django.shortcuts.render_to_response',
              'rapidsms.contrib.locations.views.require_GET': 'django.views.decorators.http.require_GET',
              'rapidsms.contrib.locations.views.require_http_methods': 'django.views.decorators.http.require_http_methods',
              'rapidsms.contrib.locations.views.reverse': 'django.core.urlresolvers.reverse',
              'rapidsms.contrib.locations.views.settings': 'rapidsms.conf.settings',
              'rapidsms.contrib.locations.views.utils': 'rapidsms.contrib.locations..utils',
              'rapidsms.contrib.locations.views.web_message': 'rapidsms.utils.web_message',
              'rapidsms.contrib.messagelog.admin.Message': 'rapidsms.contrib.messagelog.models.Message',
              'rapidsms.contrib.messagelog.admin.admin': 'django.contrib.admin',
              'rapidsms.contrib.messagelog.app.AppBase': 'rapidsms.apps.base.AppBase',
              'rapidsms.contrib.messagelog.app.Message': 'rapidsms.contrib.messagelog.models.Message',
              'rapidsms.contrib.messagelog.app.datetime': 'datetime',
              'rapidsms.contrib.messagelog.models.Connection': 'rapidsms.models.Connection',
              'rapidsms.contrib.messagelog.models.Contact': 'rapidsms.models.Contact',
              'rapidsms.contrib.messagelog.models.ValidationError': 'django.core.exceptions.ValidationError',
              'rapidsms.contrib.messagelog.models.connection': 'django.db.connection',
              'rapidsms.contrib.messagelog.models.models': 'django.db.models',
              'rapidsms.contrib.messagelog.models.typecast_timestamp': 'django.db.backends.util.typecast_timestamp',
              'rapidsms.contrib.messagelog.tables.Column': 'djtables.Column',
              'rapidsms.contrib.messagelog.tables.DateColumn': 'djtables.column.DateColumn',
              'rapidsms.contrib.messagelog.tables.Message': 'rapidsms.contrib.messagelog.models.Message',
              'rapidsms.contrib.messagelog.tables.Table': 'djtables.Table',
              'rapidsms.contrib.messagelog.tables.settings': 'django.conf.settings',
              'rapidsms.contrib.messagelog.urls.*': 'django.conf.urls.defaults.*',
              'rapidsms.contrib.messagelog.urls.views': 'rapidsms.contrib.messagelog..views',
              'rapidsms.contrib.messagelog.views.Message': 'rapidsms.contrib.messagelog.models.Message',
              'rapidsms.contrib.messagelog.views.MessageTable': 'rapidsms.contrib.messagelog.tables.MessageTable',
              'rapidsms.contrib.messagelog.views.RequestContext': 'django.template.RequestContext',
              'rapidsms.contrib.messagelog.views.render_to_response': 'django.shortcuts.render_to_response',
              'rapidsms.contrib.messaging.app.AppBase': 'rapidsms.apps.base.AppBase',
              'rapidsms.contrib.messaging.app.Connection': 'rapidsms.models.Connection',
              'rapidsms.contrib.messaging.app.OutgoingMessage': 'rapidsms.messages.outgoing.OutgoingMessage',
              'rapidsms.contrib.messaging.filters.itertools': 'itertools',
              'rapidsms.contrib.messaging.urls.*': 'django.conf.urls.defaults.*',
              'rapidsms.contrib.messaging.urls.views': 'rapidsms.contrib.messaging..views',
              'rapidsms.contrib.messaging.utils.call_router': 'rapidsms.contrib.ajax.utils.call_router',
              'rapidsms.contrib.messaging.views.Contact': 'rapidsms.models.Contact',
              'rapidsms.contrib.messaging.views.HttpResponse': 'django.http.HttpResponse',
              'rapidsms.contrib.messaging.views.RequestContext': 'django.template.RequestContext',
              'rapidsms.contrib.messaging.views.filters': 'rapidsms.contrib.messaging..filters',
              'rapidsms.contrib.messaging.views.get_object_or_404': 'django.shortcuts.get_object_or_404',
              'rapidsms.contrib.messaging.views.json': 'json',
              'rapidsms.contrib.messaging.views.paginated': 'rapidsms.utils.pagination.paginated',
              'rapidsms.contrib.messaging.views.render_to_response': 'django.shortcuts.render_to_response',
              'rapidsms.contrib.messaging.views.require_POST': 'django.views.decorators.http.require_POST',
              'rapidsms.contrib.messaging.views.send_message': 'rapidsms.contrib.messaging.utils.send_message',
              'rapidsms.contrib.registration.forms.forms': 'django.forms',
              'rapidsms.contrib.registration.handlers.language.Contact': 'rapidsms.models.Contact',
              'rapidsms.contrib.registration.handlers.language.KeywordHandler': 'rapidsms.contrib.handlers.handlers.keyword.KeywordHandler',
              'rapidsms.contrib.registration.handlers.language.settings': 'rapidsms.conf.settings',
              'rapidsms.contrib.registration.handlers.register.Contact': 'rapidsms.models.Contact',
              'rapidsms.contrib.registration.handlers.register.KeywordHandler': 'rapidsms.contrib.handlers.handlers.keyword.KeywordHandler',
              'rapidsms.contrib.registration.tables.Column': 'djtables.Column',
              'rapidsms.contrib.registration.tables.Contact': 'rapidsms.models.Contact',
              'rapidsms.contrib.registration.tables.Table': 'djtables.Table',
              'rapidsms.contrib.registration.tables.reverse': 'django.core.urlresolvers.reverse',
              'rapidsms.contrib.registration.tests.TestScript': 'rapidsms.tests.scripted.TestScript',
              'rapidsms.contrib.registration.tests.unittest': 'unittest',
              'rapidsms.contrib.registration.urls.*': 'django.conf.urls.defaults.*',
              'rapidsms.contrib.registration.urls.views': 'rapidsms.contrib.registration..views',
              'rapidsms.contrib.registration.views.Backend': 'rapidsms.models.Backend',
              'rapidsms.contrib.registration.views.BulkRegistrationForm': 'rapidsms.contrib.registration.forms.BulkRegistrationForm',
              'rapidsms.contrib.registration.views.Connection': 'rapidsms.models.Connection',
              'rapidsms.contrib.registration.views.Contact': 'rapidsms.models.Contact',
              'rapidsms.contrib.registration.views.ContactForm': 'rapidsms.forms.ContactForm',
              'rapidsms.contrib.registration.views.ContactTable': 'rapidsms.contrib.registration.tables.ContactTable',
              'rapidsms.contrib.registration.views.HttpResponseRedirect': 'django.http.HttpResponseRedirect',
              'rapidsms.contrib.registration.views.RequestContext': 'django.template.RequestContext',
              'rapidsms.contrib.registration.views.csv': 'csv',
              'rapidsms.contrib.registration.views.get_object_or_404': 'django.shortcuts.get_object_or_404',
              'rapidsms.contrib.registration.views.render_to_response': 'django.shortcuts.render_to_response',
              'rapidsms.contrib.registration.views.reverse': 'django.core.urlresolvers.reverse',
              'rapidsms.contrib.registration.views.transaction': 'django.db.transaction',
              'rapidsms.contrib.scheduler.app.AppBase': 'rapidsms.apps.base.AppBase',
              'rapidsms.contrib.scheduler.app.EventSchedule': 'rapidsms.contrib.scheduler.models.EventSchedule',
              'rapidsms.contrib.scheduler.app.datetime': 'datetime.datetime',
              'rapidsms.contrib.scheduler.app.threading': 'threading',
              'rapidsms.contrib.scheduler.app.time': 'time',
              'rapidsms.contrib.scheduler.app.timedelta': 'datetime.timedelta',
              'rapidsms.contrib.scheduler.fields.models': 'django.db.models',
              'rapidsms.contrib.scheduler.fields.pickle': 'pickle',
              'rapidsms.contrib.scheduler.forms.EventSchedule': 'rapidsms.contrib.scheduler.models.EventSchedule',
              'rapidsms.contrib.scheduler.forms.forms': 'django.forms',
              'rapidsms.contrib.scheduler.models.MONTHS': 'django.utils.dates.MONTHS',
              'rapidsms.contrib.scheduler.models.PickledObjectField': 'rapidsms.contrib.scheduler.fields.PickledObjectField',
              'rapidsms.contrib.scheduler.models.WEEKDAYS_ABBR': 'django.utils.dates.WEEKDAYS_ABBR',
              'rapidsms.contrib.scheduler.models.datetime': 'datetime.datetime',
              'rapidsms.contrib.scheduler.models.models': 'django.db.models',
              'rapidsms.contrib.scheduler.templatetags.scheduler_tags.template': 'django.template',
              'rapidsms.contrib.scheduler.tests.faketime.ALL': 'rapidsms.contrib.scheduler.models.ALL',
              'rapidsms.contrib.scheduler.tests.faketime.EventSchedule': 'rapidsms.contrib.scheduler.models.EventSchedule',
              'rapidsms.contrib.scheduler.tests.faketime.MINYEAR': 'datetime.MINYEAR',
              'rapidsms.contrib.scheduler.tests.faketime.TestScript': 'rapidsms.tests.scripted.TestScript',
              'rapidsms.contrib.scheduler.tests.faketime.datetime': 'datetime.datetime',
              'rapidsms.contrib.scheduler.tests.faketime.logging': 'logging',
              'rapidsms.contrib.scheduler.tests.faketime.scheduler_app': 'rapidsms.contrib.scheduler.app',
              'rapidsms.contrib.scheduler.tests.faketime.time': 'time',
              'rapidsms.contrib.scheduler.tests.faketime.timedelta': 'datetime.timedelta',
              'rapidsms.contrib.scheduler.tests.slow.ALL': 'rapidsms.contrib.scheduler.models.ALL',
              'rapidsms.contrib.scheduler.tests.slow.EventSchedule': 'rapidsms.contrib.scheduler.models.EventSchedule',
              'rapidsms.contrib.scheduler.tests.slow.TestScript': 'rapidsms.tests.scripted.TestScript',
              'rapidsms.contrib.scheduler.tests.slow.datetime': 'datetime.datetime',
              'rapidsms.contrib.scheduler.tests.slow.logging': 'logging',
              'rapidsms.contrib.scheduler.tests.slow.scheduler_app': 'rapidsms.contrib.scheduler.app',
              'rapidsms.contrib.scheduler.tests.slow.time': 'time',
              'rapidsms.contrib.scheduler.tests.slow.timedelta': 'datetime.timedelta',
              'rapidsms.contrib.scheduler.tests.speedup.ALL': 'rapidsms.contrib.scheduler.models.ALL',
              'rapidsms.contrib.scheduler.tests.speedup.EventSchedule': 'rapidsms.contrib.scheduler.models.EventSchedule',
              'rapidsms.contrib.scheduler.tests.speedup.TestScript': 'rapidsms.tests.scripted.TestScript',
              'rapidsms.contrib.scheduler.tests.speedup.datetime': 'datetime.datetime',
              'rapidsms.contrib.scheduler.tests.speedup.logging': 'logging',
              'rapidsms.contrib.scheduler.tests.speedup.scheduler_app': 'rapidsms.contrib.scheduler.app',
              'rapidsms.contrib.scheduler.tests.speedup.time': 'time',
              'rapidsms.contrib.scheduler.tests.speedup.timedelta': 'datetime.timedelta',
              'rapidsms.contrib.scheduler.urls.*': 'django.conf.urls.defaults.*',
              'rapidsms.contrib.scheduler.urls.os': 'os',
              'rapidsms.contrib.scheduler.urls.views': 'rapidsms.contrib.scheduler.views',
              'rapidsms.contrib.scheduler.views.EventSchedule': 'rapidsms.contrib.scheduler.models.EventSchedule',
              'rapidsms.contrib.scheduler.views.HttpResponseRedirect': 'django.http.HttpResponseRedirect',
              'rapidsms.contrib.scheduler.views.RequestContext': 'django.template.RequestContext',
              'rapidsms.contrib.scheduler.views.ScheduleForm': 'rapidsms.contrib.scheduler.forms.ScheduleForm',
              'rapidsms.contrib.scheduler.views._': 'django.utils.translation.ugettext',
              'rapidsms.contrib.scheduler.views.call_router': 'rapidsms.contrib.ajax.utils.call_router',
              'rapidsms.contrib.scheduler.views.get_object_or_404': 'django.shortcuts.get_object_or_404',
              'rapidsms.contrib.scheduler.views.login_required': 'django.contrib.auth.decorators.login_required',
              'rapidsms.contrib.scheduler.views.paginated': 'rapidsms.utils.pagination.paginated',
              'rapidsms.contrib.scheduler.views.render_to_response': 'django.shortcuts.render_to_response',
              'rapidsms.contrib.scheduler.views.require_POST': 'django.views.decorators.http.require_POST',
              'rapidsms.contrib.scheduler.views.reverse': 'django.core.urlresolvers.reverse',
              'rapidsms.forms.*': 'rapidsms.models.*',
              'rapidsms.forms.forms': 'django.forms',
              'rapidsms.log.mixin.logging': 'logging',
              'rapidsms.management.commands.runrouter.NoArgsCommand': 'django.core.management.base.NoArgsCommand',
              'rapidsms.management.commands.runrouter.call_command': 'django.core.management.call_command',
              'rapidsms.management.commands.runrouter.logging': 'logging',
              'rapidsms.management.commands.runrouter.logging.handlers': 'logging.handlers',
              'rapidsms.management.commands.runrouter.router': 'router.router',
              'rapidsms.management.commands.runrouter.settings': 'conf.settings',
              'rapidsms.management.commands.startproject.CommandError': 'django.core.management.base.CommandError',
              'rapidsms.management.commands.startproject.LabelCommand': 'django.core.management.base.LabelCommand',
              'rapidsms.management.commands.startproject.os': 'os',
              'rapidsms.management.commands.startproject.rapidsms': 'rapidsms',
              'rapidsms.management.commands.startproject.shutil': 'shutil',
              'rapidsms.management.commands.startproject.try_import': 'rapidsms.utils.modules.try_import',
              'rapidsms.management.commands.update_apps.App': 'rapidsms.models.App',
              'rapidsms.management.commands.update_apps.NoArgsCommand': 'django.core.management.base.NoArgsCommand',
              'rapidsms.management.commands.update_apps.settings': 'conf.settings',
              'rapidsms.management.commands.update_backends.Backend': 'rapidsms.models.Backend',
              'rapidsms.management.commands.update_backends.NoArgsCommand': 'django.core.management.base.NoArgsCommand',
              'rapidsms.management.commands.update_backends.settings': 'conf.settings',
              'rapidsms.messages.ErrorMessage': 'rapidsms.messages.error.ErrorMessage',
              'rapidsms.messages.IncomingMessage': 'rapidsms.messages.incoming.IncomingMessage',
              'rapidsms.messages.OutgoingMessage': 'rapidsms.messages.outgoing.OutgoingMessage',
              'rapidsms.messages.error.OutgoingMessage': 'rapidsms.messages.outgoing.OutgoingMessage',
              'rapidsms.messages.incoming.ErrorMessage': 'rapidsms.messages.error.ErrorMessage',
              'rapidsms.messages.incoming.MessageBase': 'rapidsms.messages.base.MessageBase',
              'rapidsms.messages.incoming.OutgoingMessage': 'rapidsms.messages.outgoing.OutgoingMessage',
              'rapidsms.messages.incoming.copy': 'copy.copy',
              'rapidsms.messages.incoming.datetime': 'datetime.datetime',
              'rapidsms.messages.outgoing.MessageBase': 'rapidsms.messages.base.MessageBase',
              'rapidsms.messages.outgoing.NoRouterError': 'errors.NoRouterError',
              'rapidsms.messages.outgoing.datetime': 'datetime.datetime',
              'rapidsms.messages.outgoing.router': 'router.router',
              'rapidsms.messages.outgoing.settings': 'conf.settings',
              'rapidsms.messages.outgoing.translation': 'django.utils.translation.trans_real.translation',
              'rapidsms.migrations.0001_initial.SchemaMigration': 'south.v2.SchemaMigration',
              'rapidsms.migrations.0001_initial.datetime': 'datetime',
              'rapidsms.migrations.0001_initial.db': 'south.db.db',
              'rapidsms.migrations.0001_initial.models': 'django.db.models',
              'rapidsms.models.MessageSendingError': 'rapidsms.errors.MessageSendingError',
              'rapidsms.models.NoConnectionError': 'rapidsms.errors.NoConnectionError',
              'rapidsms.models.OutgoingMessage': 'rapidsms.messages.outgoing.OutgoingMessage',
              'rapidsms.models.datetime': 'datetime.datetime',
              'rapidsms.models.get_classes': 'rapidsms.utils.modules.get_classes',
              'rapidsms.models.models': 'django.db.models',
              'rapidsms.models.settings': 'rapidsms.conf.settings',
              'rapidsms.models.try_import': 'rapidsms.utils.modules.try_import',
              'rapidsms.router.AppBase': 'rapidsms.apps.base.AppBase',
              'rapidsms.router.BackendBase': 'rapidsms.backends.base.BackendBase',
              'rapidsms.router.LoggerMixin': 'rapidsms.log.mixin.LoggerMixin',
              'rapidsms.router.Queue': 'Queue',
              'rapidsms.router.Signal': 'django.dispatch.Signal',
              'rapidsms.router.settings': 'rapidsms.conf.settings',
              'rapidsms.router.sys': 'sys',
              'rapidsms.router.threading': 'threading',
              'rapidsms.router.time': 'time',
              'rapidsms.router.traceback': 'traceback',
              'rapidsms.templatetags.forms_tags.template': 'django.template',
              'rapidsms.templatetags.paginator_tags.math': 'math',
              'rapidsms.templatetags.paginator_tags.settings': 'rapidsms.conf.settings',
              'rapidsms.templatetags.paginator_tags.template': 'django.template',
              'rapidsms.templatetags.region_tags.copy': 'copy.copy',
              'rapidsms.templatetags.region_tags.get_template': 'django.template.loader.get_template',
              'rapidsms.templatetags.region_tags.os': 'os',
              'rapidsms.templatetags.region_tags.settings': 'conf.settings',
              'rapidsms.templatetags.region_tags.template': 'django.template',
              'rapidsms.templatetags.region_tags.try_import': 'rapidsms.utils.modules.try_import',
              'rapidsms.templatetags.tabs_tags.RegexURLPattern': 'django.core.urlresolvers.RegexURLPattern',
              'rapidsms.templatetags.tabs_tags.Variable': 'django.template.Variable',
              'rapidsms.templatetags.tabs_tags.get_resolver': 'django.core.urlresolvers.get_resolver',
              'rapidsms.templatetags.tabs_tags.import_module': 'django.utils.importlib.import_module',
              'rapidsms.templatetags.tabs_tags.re': 're',
              'rapidsms.templatetags.tabs_tags.reverse': 'django.core.urlresolvers.reverse',
              'rapidsms.templatetags.tabs_tags.settings': 'django.conf.settings',
              'rapidsms.templatetags.tabs_tags.template': 'django.template',
              'rapidsms.templatetags.tabs_tags.threading': 'threading',
              'rapidsms.templatetags.tabs_tags.types': 'types',
              'rapidsms.templatetags.tabs_tags.wraps': 'functools.wraps',
              'rapidsms.tests.backend.test_base.B': 'models.Backend',
              'rapidsms.tests.backend.test_base.BackendBase': 'backends.base.BackendBase',
              'rapidsms.tests.backend.test_base.BucketBackend': 'rapidsms.backends.bucket.BucketBackend',
              'rapidsms.tests.backend.test_base.C': 'models.Connection',
              'rapidsms.tests.backend.test_base.assert_equals': 'nose.tools.assert_equals',
              'rapidsms.tests.backend.test_base.threading': 'threading',
              'rapidsms.tests.backend.test_base.time': 'time',
              'rapidsms.tests.backend.test_bucket.BucketBackend': 'backends.bucket.BucketBackend',
              'rapidsms.tests.backend.test_bucket.OutgoingMessage': 'messages.OutgoingMessage',
              'rapidsms.tests.backend.test_bucket.Router': 'router.Router',
              'rapidsms.tests.backend.test_bucket.assert_equals': 'nose.tools.assert_equals',
              'rapidsms.tests.backend.test_bucket.sys': 'sys',
              'rapidsms.tests.backend.test_bucket.threading': 'threading',
              'rapidsms.tests.backend.test_bucket.time': 'time',
              'rapidsms.tests.backend.test_http.HttpRequest': 'django.http.HttpRequest',
              'rapidsms.tests.backend.test_http.HttpResponse': 'django.http.HttpResponse',
              'rapidsms.tests.backend.test_http.HttpResponseBadRequest': 'django.http.HttpResponseBadRequest',
              'rapidsms.tests.backend.test_http.MockRouter': 'rapidsms.tests.harness.MockRouter',
              'rapidsms.tests.backend.test_http.RapidHttpBacked': 'rapidsms.backends.http.RapidHttpBacked',
              'rapidsms.tests.backend.test_http.assert_equals': 'nose.tools.assert_equals',
              'rapidsms.tests.backend.test_http.assert_raises': 'nose.tools.assert_raises',
              'rapidsms.tests.backend.test_http.assert_true': 'nose.tools.assert_true',
              'rapidsms.tests.harness.AppBase': 'apps.base.AppBase',
              'rapidsms.tests.harness.BackendBase': 'rapidsms.backends.base.BackendBase',
              'rapidsms.tests.harness.Router': 'rapidsms.router.Router',
              'rapidsms.tests.harness.os': 'os',
              'rapidsms.tests.scripted.EchoApp': 'rapidsms.tests.harness.EchoApp',
              'rapidsms.tests.scripted.LoggerMixin': 'rapidsms.log.mixin.LoggerMixin',
              'rapidsms.tests.scripted.TransactionTestCase': 'django.test.TransactionTestCase',
              'rapidsms.tests.scripted.datetime': 'datetime.datetime',
              'rapidsms.tests.scripted.globalrouter': 'rapidsms.router.router',
              'rapidsms.tests.scripted.logging': 'logging',
              'rapidsms.tests.scripted.re': 're',
              'rapidsms.tests.scripted.settings': 'django.conf.settings',
              'rapidsms.tests.scripted.threading': 'threading',
              'rapidsms.tests.scripted.time': 'time',
              'rapidsms.tests.scripted.unittest': 'unittest',
              'rapidsms.tests.test_app_base.App': 'rapidsms.contrib.default.app.App',
              'rapidsms.tests.test_app_base.AppBase': 'apps.base.AppBase',
              'rapidsms.tests.test_app_base.assert_equals': 'nose.tools.assert_equals',
              'rapidsms.tests.test_logger.LoggerMixin': 'log.mixin.LoggerMixin',
              'rapidsms.tests.test_logger.MemoryHandler': 'logging.handlers.MemoryHandler',
              'rapidsms.tests.test_logger.assert_equals': 'nose.tools.assert_equals',
              'rapidsms.tests.test_logger.assert_raises': 'nose.tools.assert_raises',
              'rapidsms.tests.test_logger.logging': 'logging',
              'rapidsms.tests.test_router.App': 'rapidsms.contrib.default.app.App',
              'rapidsms.tests.test_router.AppBase': 'apps.base.AppBase',
              'rapidsms.tests.test_router.BackendBase': 'backends.base.BackendBase',
              'rapidsms.tests.test_router.Router': 'router.Router',
              'rapidsms.tests.test_router.assert_equals': 'nose.tools.assert_equals',
              'rapidsms.tests.test_router.assert_raises': 'nose.tools.assert_raises',
              'rapidsms.tests.test_router.threading': 'threading',
              'rapidsms.tests.test_router.time': 'time',
              'rapidsms.tests.test_views.Client': 'django.test.client.Client',
              'rapidsms.tests.test_views.User': 'django.contrib.auth.models.User',
              'rapidsms.tests.test_views.assert_equals': 'nose.tools.assert_equals',
              'rapidsms.tests.test_views.reverse': 'django.core.urlresolvers.reverse',
              'rapidsms.urls.login_logout.*': 'django.conf.urls.defaults.*',
              'rapidsms.urls.login_logout.views': 'rapidsms.urls..views',
              'rapidsms.urls.static_media.*': 'django.conf.urls.defaults.*',
              'rapidsms.urls.static_media.os': 'os',
              'rapidsms.urls.static_media.settings': 'conf.settings',
              'rapidsms.urls.static_media.try_import': 'rapidsms.utils.modules.try_import',
              'rapidsms.utils.datetime': 'datetime.datetime',
              'rapidsms.utils.modules.os': 'os',
              'rapidsms.utils.modules.sys': 'sys',
              'rapidsms.utils.modules.traceback': 'traceback',
              'rapidsms.utils.pagination.EmptyPage': 'django.core.paginator.EmptyPage',
              'rapidsms.utils.pagination.InvalidPage': 'django.core.paginator.InvalidPage',
              'rapidsms.utils.pagination.Paginator': 'django.core.paginator.Paginator',
              'rapidsms.utils.pagination.settings': 'conf.settings',
              'rapidsms.utils.pytz': 'pytz',
              'rapidsms.utils.web_message.RequestContext': 'django.template.RequestContext',
              'rapidsms.utils.web_message.render_to_response': 'django.shortcuts.render_to_response',
              'rapidsms.views.RequestContext': 'django.template.RequestContext',
              'rapidsms.views.django_login': 'django.contrib.auth.views.login',
              'rapidsms.views.django_logout': 'django.contrib.auth.views.logout',
              'rapidsms.views.render_to_response': 'django.shortcuts.render_to_response',
              'rapidsms.views.require_GET': 'django.views.decorators.http.require_GET',
              'rapidsms_httprouter.admin.*': 'django.conf.urls.defaults.*',
              'rapidsms_httprouter.admin.HttpResponseRedirect': 'django.http.HttpResponseRedirect',
              'rapidsms_httprouter.admin.Message': 'rapidsms_httprouter.models.Message',
              'rapidsms_httprouter.admin.admin': 'django.contrib.admin',
              'rapidsms_httprouter.admin.forms': 'django.forms',
              'rapidsms_httprouter.admin.get_router': 'rapidsms_httprouter.router.get_router',
              'rapidsms_httprouter.admin.reverse': 'django.core.urlresolvers.reverse',
              'rapidsms_httprouter.management.commands.normalizeconnections.Backend': 'rapidsms.models.Backend',
              'rapidsms_httprouter.management.commands.normalizeconnections.BaseCommand': 'django.core.management.base.BaseCommand',
              'rapidsms_httprouter.management.commands.normalizeconnections.Connection': 'rapidsms.models.Connection',
              'rapidsms_httprouter.management.commands.normalizeconnections.DEFAULT_DB_ALIAS': 'django.db.DEFAULT_DB_ALIAS',
              'rapidsms_httprouter.management.commands.normalizeconnections.HttpRouter': 'rapidsms_httprouter.router.HttpRouter',
              'rapidsms_httprouter.management.commands.normalizeconnections.connections': 'django.db.connections',
              'rapidsms_httprouter.management.commands.normalizeconnections.datetime': 'datetime.datetime',
              'rapidsms_httprouter.management.commands.normalizeconnections.make_option': 'optparse.make_option',
              'rapidsms_httprouter.management.commands.normalizeconnections.router': 'django.db.router',
              'rapidsms_httprouter.management.commands.normalizeconnections.settings': 'django.conf.settings',
              'rapidsms_httprouter.management.commands.normalizeconnections.traceback': 'traceback',
              'rapidsms_httprouter.management.commands.normalizeconnections.transaction': 'django.db.transaction',
              'rapidsms_httprouter.management.commands.send_messages.Backend': 'rapidsms.models.Backend',
              'rapidsms_httprouter.management.commands.send_messages.BaseCommand': 'django.core.management.base.BaseCommand',
              'rapidsms_httprouter.management.commands.send_messages.Connection': 'rapidsms.models.Connection',
              'rapidsms_httprouter.management.commands.send_messages.Contact': 'rapidsms.models.Contact',
              'rapidsms_httprouter.management.commands.send_messages.LoggerMixin': 'rapidsms.log.mixin.LoggerMixin',
              'rapidsms_httprouter.management.commands.send_messages.Message': 'rapidsms_httprouter.models.Message',
              'rapidsms_httprouter.management.commands.send_messages.MessageBatch': 'rapidsms_httprouter.models.MessageBatch',
              'rapidsms_httprouter.management.commands.send_messages.get_router': 'rapidsms_httprouter.router.get_router',
              'rapidsms_httprouter.management.commands.send_messages.quote_plus': 'urllib.quote_plus',
              'rapidsms_httprouter.management.commands.send_messages.send_mail': 'django.core.mail.send_mail',
              'rapidsms_httprouter.management.commands.send_messages.settings': 'django.conf.settings',
              'rapidsms_httprouter.management.commands.send_messages.traceback': 'traceback',
              'rapidsms_httprouter.management.commands.send_messages.transaction': 'django.db.transaction',
              'rapidsms_httprouter.management.commands.send_messages.urlopen': 'urllib2.urlopen',
              'rapidsms_httprouter.managers.AutoField': 'django.db.models.fields.AutoField',
              'rapidsms_httprouter.managers.DateField': 'django.db.models.fields.DateField',
              'rapidsms_httprouter.managers.DateTimeField': 'django.db.models.fields.DateTimeField',
              'rapidsms_httprouter.managers.FieldDoesNotExist': 'django.db.models.fields.FieldDoesNotExist',
              'rapidsms_httprouter.managers.ForeignKey': 'django.db.models.fields.related.ForeignKey',
              'rapidsms_httprouter.managers.ManyToManyField': 'django.db.models.fields.related.ManyToManyField',
              'rapidsms_httprouter.managers.OneToOneField': 'django.db.models.fields.related.OneToOneField',
              'rapidsms_httprouter.managers.QuerySet': 'django.db.models.query.QuerySet',
              'rapidsms_httprouter.managers.TimeField': 'django.db.models.fields.TimeField',
              'rapidsms_httprouter.managers.connection': 'django.db.connection',
              'rapidsms_httprouter.managers.connections': 'django.db.connections',
              'rapidsms_httprouter.managers.datetime': 'datetime',
              'rapidsms_httprouter.managers.mkstemp': 'tempfile.mkstemp',
              'rapidsms_httprouter.managers.models': 'django.db.models',
              'rapidsms_httprouter.managers.os': 'os',
              'rapidsms_httprouter.managers.settings': 'django.conf.settings',
              'rapidsms_httprouter.managers.signals': 'django.db.models.signals',
              'rapidsms_httprouter.managers.sys': 'sys',
              'rapidsms_httprouter.migrations.0001_initial.SchemaMigration': 'south.v2.SchemaMigration',
              'rapidsms_httprouter.migrations.0001_initial.datetime': 'datetime',
              'rapidsms_httprouter.migrations.0001_initial.db': 'south.db.db',
              'rapidsms_httprouter.migrations.0001_initial.models': 'django.db.models',
              'rapidsms_httprouter.models.BulkInsertManager': 'rapidsms_httprouter.managers.BulkInsertManager',
              'rapidsms_httprouter.models.Connection': 'rapidsms.models.Connection',
              'rapidsms_httprouter.models.Contact': 'rapidsms.models.Contact',
              'rapidsms_httprouter.models.ForUpdateManager': 'rapidsms_httprouter.managers.ForUpdateManager',
              'rapidsms_httprouter.models.datetime': 'datetime',
              'rapidsms_httprouter.models.django': 'django',
              'rapidsms_httprouter.models.models': 'django.db.models',
              'rapidsms_httprouter.models.transaction': 'django.db.transaction',
              'rapidsms_httprouter.router.AppBase': 'rapidsms.apps.base.AppBase',
              'rapidsms_httprouter.router.Backend': 'rapidsms.models.Backend',
              'rapidsms_httprouter.router.Connection': 'rapidsms.models.Connection',
              'rapidsms_httprouter.router.IncomingMessage': 'rapidsms.messages.incoming.IncomingMessage',
              'rapidsms_httprouter.router.Lock': 'threading.Lock',
              'rapidsms_httprouter.router.LoggerMixin': 'rapidsms.log.mixin.LoggerMixin',
              'rapidsms_httprouter.router.Message': 'rapidsms_httprouter.models.Message',
              'rapidsms_httprouter.router.OutgoingMessage': 'rapidsms.messages.outgoing.OutgoingMessage',
              'rapidsms_httprouter.router.Thread': 'threading.Thread',
              'rapidsms_httprouter.router.quote_plus': 'urllib.quote_plus',
              'rapidsms_httprouter.router.re': 're',
              'rapidsms_httprouter.router.settings': 'django.conf.settings',
              'rapidsms_httprouter.router.time': 'time',
              'rapidsms_httprouter.router.traceback': 'traceback',
              'rapidsms_httprouter.router.transaction': 'django.db.transaction',
              'rapidsms_httprouter.router.urlopen': 'urllib2.urlopen',
              'rapidsms_httprouter.tests.AppBase': 'rapidsms.apps.base.AppBase',
              'rapidsms_httprouter.tests.Backend': 'rapidsms.models.Backend',
              'rapidsms_httprouter.tests.Connection': 'rapidsms.models.Connection',
              'rapidsms_httprouter.tests.HttpRouterThread': 'rapidsms_httprouter.router.HttpRouterThread',
              'rapidsms_httprouter.tests.IncomingMessage': 'rapidsms.messages.incoming.IncomingMessage',
              'rapidsms_httprouter.tests.Message': 'rapidsms_httprouter.models.Message',
              'rapidsms_httprouter.tests.OutgoingMessage': 'rapidsms.messages.outgoing.OutgoingMessage',
              'rapidsms_httprouter.tests.TestCase': 'django.test.TestCase',
              'rapidsms_httprouter.tests.TransactionTestCase': 'django.test.TransactionTestCase',
              'rapidsms_httprouter.tests.get_router': 'rapidsms_httprouter.router.get_router',
              'rapidsms_httprouter.tests.json': 'json',
              'rapidsms_httprouter.tests.settings': 'django.conf.settings',
              'rapidsms_httprouter.tests.time': 'time',
              'rapidsms_httprouter.urls.*': 'django.conf.urls.defaults.*',
              'rapidsms_httprouter.urls.can_send': 'rapidsms_httprouter.views.can_send',
              'rapidsms_httprouter.urls.console': 'rapidsms_httprouter.views.console',
              'rapidsms_httprouter.urls.delivered': 'rapidsms_httprouter.views.delivered',
              'rapidsms_httprouter.urls.outbox': 'rapidsms_httprouter.views.outbox',
              'rapidsms_httprouter.urls.receive': 'rapidsms_httprouter.views.receive',
              'rapidsms_httprouter.urls.staff_member_required': 'django.contrib.admin.views.decorators.staff_member_required',
              'rapidsms_httprouter.urls.summary': 'rapidsms_httprouter.views.summary',
              'rapidsms_httprouter.views.*': 'django.core.paginator.*',
              'rapidsms_httprouter.views.Column': 'djtables.Column',
              'rapidsms_httprouter.views.Connection': 'rapidsms.models.Connection',
              'rapidsms_httprouter.views.Count': 'django.db.models.Count',
              'rapidsms_httprouter.views.DateColumn': 'djtables.column.DateColumn',
              'rapidsms_httprouter.views.HttpResponse': 'django.http.HttpResponse',
              'rapidsms_httprouter.views.IncomingMessage': 'rapidsms.messages.incoming.IncomingMessage',
              'rapidsms_httprouter.views.Message': 'rapidsms_httprouter.models.Message',
              'rapidsms_httprouter.views.OutgoingMessage': 'rapidsms.messages.outgoing.OutgoingMessage',
              'rapidsms_httprouter.views.Q': 'django.db.models.Q',
              'rapidsms_httprouter.views.RequestContext': 'django.template.RequestContext',
              'rapidsms_httprouter.views.Table': 'djtables.Table',
              'rapidsms_httprouter.views.forms': 'django.forms',
              'rapidsms_httprouter.views.get_object_or_404': 'django.shortcuts.get_object_or_404',
              'rapidsms_httprouter.views.get_router': 'rapidsms_httprouter.router.get_router',
              'rapidsms_httprouter.views.json': 'json',
              'rapidsms_httprouter.views.login_required': 'django.contrib.auth.decorators.login_required',
              'rapidsms_httprouter.views.render_to_response': 'django.shortcuts.render_to_response',
              'rapidsms_httprouter.views.settings': 'django.conf.settings',
              'script.admin.Script': 'script.models.Script',
              'script.admin.ScriptProgress': 'script.models.ScriptProgress',
              'script.admin.ScriptStep': 'script.models.ScriptStep',
              'script.admin.admin': 'django.contrib.admin',
              'script.app.*': 'script.models.*',
              'script.app.AppBase': 'rapidsms.apps.base.AppBase',
              'script.app.datetime': 'datetime',
              'script.app.incoming_progress': 'script.utils.incoming.incoming_progress',
              'script.app.rapidsms': 'rapidsms',
              'script.management.commands.check_script_progress.Backend': 'rapidsms.models.Backend',
              'script.management.commands.check_script_progress.BaseCommand': 'django.core.management.base.BaseCommand',
              'script.management.commands.check_script_progress.Connection': 'rapidsms.models.Connection',
              'script.management.commands.check_script_progress.Contact': 'rapidsms.models.Contact',
              'script.management.commands.check_script_progress.Context': 'django.template.Context',
              'script.management.commands.check_script_progress.Email': 'script.models.Email',
              'script.management.commands.check_script_progress.Message': 'rapidsms_httprouter.models.Message',
              'script.management.commands.check_script_progress.NullHandler': 'logging.NullHandler',
              'script.management.commands.check_script_progress.OptionParser': 'optparse.OptionParser',
              'script.management.commands.check_script_progress.OutgoingMessage': 'rapidsms.messages.outgoing.OutgoingMessage',
              'script.management.commands.check_script_progress.Script': 'script.models.Script',
              'script.management.commands.check_script_progress.ScriptProgress': 'script.models.ScriptProgress',
              'script.management.commands.check_script_progress.Template': 'django.template.Template',
              'script.management.commands.check_script_progress.check_progress': 'script.utils.outgoing.check_progress',
              'script.management.commands.check_script_progress.datetime': 'datetime',
              'script.management.commands.check_script_progress.handlers': 'logging.handlers',
              'script.management.commands.check_script_progress.itertools': 'itertools',
              'script.management.commands.check_script_progress.logging': 'logging',
              'script.management.commands.check_script_progress.make_option': 'optparse.make_option',
              'script.management.commands.check_script_progress.send_mail': 'django.core.mail.send_mail',
              'script.management.commands.check_script_progress.settings': 'django.conf.settings',
              'script.management.commands.check_script_progress.traceback': 'traceback',
              'script.management.commands.check_script_progress.transaction': 'django.db.transaction',
              'script.migrations.0001_initial.SchemaMigration': 'south.v2.SchemaMigration',
              'script.migrations.0001_initial.datetime': 'datetime',
              'script.migrations.0001_initial.db': 'south.db.db',
              'script.migrations.0001_initial.models': 'django.db.models',
              'script.models.*': 'script.signals.*',
              'script.models.Connection': 'rapidsms.models.Connection',
              'script.models.Context': 'django.template.Context',
              'script.models.CurrentSiteManager': 'django.contrib.sites.managers.CurrentSiteManager',
              'script.models.IncomingMessage': 'rapidsms.messages.incoming.IncomingMessage',
              'script.models.Poll': 'poll.models.Poll',
              'script.models.Response': 'poll.models.Response',
              'script.models.Site': 'django.contrib.sites.models.Site',
              'script.models.Template': 'django.template.Template',
              'script.models.User': 'django.contrib.auth.models.User',
              'script.models.connection': 'django.db.connection',
              'script.models.datetime': 'datetime',
              'script.models.difflib': 'difflib',
              'script.models.models': 'django.db.models',
              'script.models.send_mail': 'django.core.mail.send_mail',
              'script.models.settings': 'django.conf.settings',
              'script.signals.Signal': 'django.dispatch.Signal',
              'script.tests.*': 'script.signals.*',
              'script.tests.Backend': 'rapidsms.models.Backend',
              'script.tests.Client': 'django.test.client.Client',
              'script.tests.Connection': 'rapidsms.models.Connection',
              'script.tests.Contact': 'rapidsms.models.Contact',
              'script.tests.IncomingMessage': 'rapidsms.messages.incoming.IncomingMessage',
              'script.tests.Message': 'rapidsms_httprouter.models.Message',
              'script.tests.Poll': 'poll.models.Poll',
              'script.tests.Response': 'poll.models.Response',
              'script.tests.Site': 'django.contrib.sites.models.Site',
              'script.tests.TestCase': 'django.test.TestCase',
              'script.tests.TransactionTestCase': 'django.test.TransactionTestCase',
              'script.tests.User': 'django.contrib.auth.models.User',
              'script.tests.ValidationError': 'django.core.exceptions.ValidationError',
              'script.tests.check_progress': 'script.utils.outgoing.check_progress',
              'script.tests.connection': 'django.db.connection',
              'script.tests.datetime': 'datetime',
              'script.tests.incoming_progress': 'script.utils.incoming.incoming_progress',
              'script.tests.settings': 'django.conf.settings',
              'script.utils.handling.Attribute': 'eav.models.Attribute',
              'script.utils.handling.Poll': 'poll.models.Poll',
              'script.utils.handling.STARTSWITH_PATTERN_TEMPLATE': 'poll.models.STARTSWITH_PATTERN_TEMPLATE',
              'script.utils.handling.difflib': 'difflib',
              'script.utils.handling.re': 're',
              'script.utils.handling.traceback': 'traceback',
              'script.utils.incoming.ScriptProgress': 'script.models.ScriptProgress',
              'script.utils.incoming.ScriptSession': 'script.models.ScriptSession',
              'script.utils.incoming.ScriptStep': 'script.models.ScriptStep',
              'script.utils.incoming.datetime': 'datetime',
              'script.utils.outgoing.Connection': 'rapidsms.models.Connection',
              'script.utils.outgoing.Script': 'script.models.Script',
              'script.utils.outgoing.ScriptProgress': 'script.models.ScriptProgress',
              'script.utils.outgoing.ScriptSession': 'script.models.ScriptSession',
              'script.utils.outgoing.ScriptStep': 'script.models.ScriptStep',
              'script.utils.outgoing.datetime': 'datetime',
              'setup.find_packages': 'setuptools.find_packages',
              'setup.setup': 'setuptools.setup',
              'uganda_common.cache_manager.QuerySet': 'django.db.models.query.QuerySet',
              'uganda_common.cache_manager.cache': 'django.core.cache.cache',
              'uganda_common.cache_manager.pre_delete': 'django.db.models.signals.pre_delete',
              'uganda_common.cache_manager.pre_save': 'django.db.models.signals.pre_save',
              'uganda_common.context_processors.Tab': 'rapidsms.templatetags.tabs_tags.Tab',
              'uganda_common.context_processors.reverse': 'django.core.urlresolvers.reverse',
              'uganda_common.context_processors.settings': 'django.conf.settings',
              'uganda_common.forms.datetime': 'datetime',
              'uganda_common.forms.forms': 'django.forms',
              'uganda_common.forms.mark_safe': 'django.utils.safestring.mark_safe',
              'uganda_common.models.Attribute': 'eav.models.Attribute',
              'uganda_common.models.Location': 'rapidsms.contrib.locations.models.Location',
              'uganda_common.models.LocationResponseForm': 'poll.models.LocationResponseForm',
              'uganda_common.models.Poll': 'poll.models.Poll',
              'uganda_common.models.QuerySet': 'django.db.models.query.QuerySet',
              'uganda_common.models.STARTSWITH_PATTERN_TEMPLATE': 'poll.models.STARTSWITH_PATTERN_TEMPLATE',
              'uganda_common.models.ValidationError': 'django.forms.ValidationError',
              'uganda_common.models.find_best_response': 'script.utils.handling.find_best_response',
              'uganda_common.models.find_closest_match': 'script.utils.handling.find_closest_match',
              'uganda_common.models.models': 'django.db.models',
              'uganda_common.models.re': 're',
              'uganda_common.reports.ArithmeticChartView': 'uganda_common.views.ArithmeticChartView',
              'uganda_common.reports.BasicDateGetter': 'generic.reporting.views.BasicDateGetter',
              'uganda_common.reports.Column': 'generic.reporting.reports.Column',
              'uganda_common.reports.DateRangeForm': 'generic.reporting.forms.DateRangeForm',
              'uganda_common.reports.Location': 'rapidsms.contrib.locations.models.Location',
              'uganda_common.reports.Report': 'generic.reports.Report',
              'uganda_common.reports.XFormChartView': 'uganda_common.views.XFormChartView',
              'uganda_common.reports.connection': 'django.db.connection',
              'uganda_common.reports.datetime': 'datetime',
              'uganda_common.reports.reorganize_location': 'uganda_common.utils.reorganize_location',
              'uganda_common.reports.total_attribute_value': 'uganda_common.utils.total_attribute_value',
              'uganda_common.reports.total_submissions': 'uganda_common.utils.total_submissions',
              'uganda_common.utils.Attribute': 'eav.models.Attribute',
              'uganda_common.utils.Backend': 'rapidsms.models.Backend',
              'uganda_common.utils.Connection': 'rapidsms.models.Connection',
              'uganda_common.utils.Contact': 'rapidsms.models.Contact',
              'uganda_common.utils.Count': 'django.db.models.Count',
              'uganda_common.utils.Group': 'django.contrib.auth.models.Group',
              'uganda_common.utils.HttpResponse': 'django.http.HttpResponse',
              'uganda_common.utils.Location': 'rapidsms.contrib.locations.models.Location',
              'uganda_common.utils.LocationResponseForm': 'poll.models.LocationResponseForm',
              'uganda_common.utils.Max': 'django.db.models.Max',
              'uganda_common.utils.Message': 'rapidsms_httprouter.models.Message',
              'uganda_common.utils.Min': 'django.db.models.Min',
              'uganda_common.utils.Poll': 'poll.models.Poll',
              'uganda_common.utils.Q': 'django.db.models.Q',
              'uganda_common.utils.Response': 'poll.models.Response',
              'uganda_common.utils.STARTSWITH_PATTERN_TEMPLATE': 'poll.models.STARTSWITH_PATTERN_TEMPLATE',
              'uganda_common.utils.Script': 'script.models.Script',
              'uganda_common.utils.ScriptResponse': 'script.models.ScriptResponse',
              'uganda_common.utils.ScriptStep': 'script.models.ScriptStep',
              'uganda_common.utils.StringIO': 'StringIO',
              'uganda_common.utils.Sum': 'django.db.models.Sum',
              'uganda_common.utils.ValidationError': 'django.core.exceptions.ValidationError',
              'uganda_common.utils.XForm': 'rapidsms_xforms.models.XForm',
              'uganda_common.utils.XFormField': 'rapidsms_xforms.models.XFormField',
              'uganda_common.utils.XFormFieldConstraint': 'rapidsms_xforms.models.XFormFieldConstraint',
              'uganda_common.utils.XFormSubmission': 'rapidsms_xforms.models.XFormSubmission',
              'uganda_common.utils.XFormSubmissionValue': 'rapidsms_xforms.models.XFormSubmissionValue',
              'uganda_common.utils.datetime': 'datetime',
              'uganda_common.utils.find_closest_match': 'script.utils.handling.find_closest_match',
              'uganda_common.utils.get_dates_from_post': 'generic.utils.get_dates',
              'uganda_common.utils.open_workbook': 'xlrd.open_workbook',
              'uganda_common.utils.re': 're',
              'uganda_common.utils.settings': 'django.conf.settings',
              'uganda_common.utils.xlwt': 'xlwt',
              'uganda_common.views.ChartView': 'generic.reporting.views.ChartView',
              'uganda_common.views.Location': 'rapidsms.contrib.locations.models.Location',
              'uganda_common.views.ReportView': 'generic.reporting.views.ReportView',
              'uganda_common.views.XFormDateGetter': 'uganda_common.reports.XFormDateGetter',
              'uganda_common.views.datetime': 'datetime',
              'uganda_common.views.get_object_or_404': 'django.shortcuts.get_object_or_404',
              'uganda_common.views.time': 'time',
              'uganda_common.views.total_attribute_value_api': 'uganda_common.utils.total_attribute_value',
              'uganda_common.views.total_submissions_api': 'uganda_common.utils.total_submissions',
              'unregister.app.AppBase': 'rapidsms.apps.base.AppBase',
              'unregister.app.Blacklist': 'unregister.models.Blacklist',
              'unregister.app.rapidsms': 'rapidsms',
              'unregister.app.settings': 'django.conf.settings',
              'unregister.extensions.rapidsms.contact.ContactBase': 'rapidsms.models.ContactBase',
              'unregister.extensions.rapidsms.contact.models': 'django.db.models',
              'unregister.forms.ActionForm': 'generic.forms.ActionForm',
              'unregister.forms.Blacklist': 'unregister.models.Blacklist',
              'unregister.forms.Connection': 'rapidsms.models.Connection',
              'unregister.migrations.0001_initial.SchemaMigration': 'south.v2.SchemaMigration',
              'unregister.migrations.0001_initial.datetime': 'datetime',
              'unregister.migrations.0001_initial.db': 'south.db.db',
              'unregister.migrations.0001_initial.models': 'django.db.models',
              'unregister.models.Connection': 'rapidsms.models.Connection',
              'unregister.models.mass_text_sent': 'rapidsms_httprouter.models.mass_text_sent',
              'unregister.models.models': 'django.db.models'}}
